"use strict";(self.webpackChunkuc_2_docs=self.webpackChunkuc_2_docs||[]).push([[9586],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>u});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=p(n),u=a,h=m["".concat(s,".").concat(u)]||m[u]||c[u]||o;return n?r.createElement(h,i(i({ref:t},d),{},{components:n})):r.createElement(h,i({ref:t},d))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},89953:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var r=n(87462),a=(n(67294),n(3905));const o={id:"uc2e8",title:"Compiling from Scratch"},i=void 0,l={unversionedId:"Electronics/uc2e8",id:"Electronics/uc2e8",title:"Compiling from Scratch",description:"UC2-ESP Firmware for the openUC2 UC2e electronics",source:"@site/docs/03_Electronics/08_Flashing_the_firmware.md",sourceDirName:"03_Electronics",slug:"/Electronics/uc2e8",permalink:"/docs/Electronics/uc2e8",draft:!1,tags:[],version:"current",sidebarPosition:8,frontMatter:{id:"uc2e8",title:"Compiling from Scratch"},sidebar:"tutorialSidebar",previous:{title:"UC2Serial Android App",permalink:"/docs/Electronics/Controlling_the_ESP32_APP"},next:{title:"Documentation for Stepper Motor Controller with Rotational Encoder (TMC2209 + AS5600)",permalink:"/docs/Electronics/StepperMotorBackpack"}},s={},p=[{value:"UC2-ESP Firmware for the openUC2 UC2e electronics",id:"uc2-esp-firmware-for-the-openuc2-uc2e-electronics",level:2},{value:"Setting up the build/develpment environment",id:"setting-up-the-builddevelpment-environment",level:2},{value:"V1: Source-code, Compiling and Binaries (Deprecated)",id:"v1-source-code-compiling-and-binaries-deprecated",level:2},{value:"V1: Install necessary software for UC2 rest (flash and interact) (Deprecated)",id:"v1-install-necessary-software-for-uc2-rest-flash-and-interact-deprecated",level:2},{value:"Download and install the software:",id:"download-and-install-the-software",level:3},{value:"List of relevant files",id:"list-of-relevant-files",level:3},{value:"Steps to install the software",id:"steps-to-install-the-software",level:3},{value:"VIDEO Tutorial: Steps to install the software",id:"video-tutorial-steps-to-install-the-software",level:3}],d={toc:p};function c(e){let{components:t,...o}=e;return(0,a.kt)("wrapper",(0,r.Z)({},d,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"uc2-esp-firmware-for-the-openuc2-uc2e-electronics"},"UC2-ESP Firmware for the openUC2 UC2e electronics"),(0,a.kt)("admonition",{type:"warning"},(0,a.kt)("p",{parentName:"admonition"},"Note: We started the firmware in version ",(0,a.kt)("strong",{parentName:"p"},"V1")," in this repository: ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/openUC2/UC2-REST/tree/master/ESP32"},"UC2-REST")," and continued development the firmware version in ",(0,a.kt)("strong",{parentName:"p"},"V2")," in another repository ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/youseetoo/uc2-esp32/"},"UC2-ESP32"),". We emphasize to use the latest firmware ",(0,a.kt)("strong",{parentName:"p"},"V2"))),(0,a.kt)("p",null,"This repository provides the latest (",(0,a.kt)("inlineCode",{parentName:"p"},"V2"),") firmware that controls external hardware like Motors, LEDs, Lasers and other customized elements using an ESP32 and an adapter board. It is inspired by the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/openUC2/UC2-REST/tree/master/ESP32"},"UC2-REST")," firmware, but features a much more structured way of the code by dividing modules into separated classes. A ",(0,a.kt)("inlineCode",{parentName:"p"},"ModuleController")," ensures a proper initializiation of individual modules at runtime, which makes the entire code very modular and follows the overall UC2 principle."),(0,a.kt)("p",null,"Similar to the legacy UC2-REST Firmware, the microcontroller can communicate using the wired serial and the wireless WiFi protocol. Both rely on a more-less similar ",(0,a.kt)("inlineCode",{parentName:"p"},"REST API")," that uses endpoints to address an ",(0,a.kt)("inlineCode",{parentName:"p"},"act, get, set")," command. For example, the information about the state of the ESP can be retrieved by issuing the code:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'{"task":"/state_get"}\n')),(0,a.kt)("p",null,"A list of all commands that can be sent via HTTP requests and serial commands (e.g. by using the Arduino IDE-contained Serial monitor at 115200 BAUD) can be found in the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/youseetoo/uc2-esp32/blob/mergeBD/RestApi.md"},"RestApi.md"),"-file."),(0,a.kt)("h2",{id:"setting-up-the-builddevelpment-environment"},"Setting up the build/develpment environment"),(0,a.kt)("p",null,"In order to build the code, you have to follow the following steps:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},'Install Visual Studio Code + the Extension called "Platform.io" => Restart Visual studio code to load PIO'),(0,a.kt)("li",{parentName:"ol"},"Clone the repository including all the submodules: ",(0,a.kt)("inlineCode",{parentName:"li"},"git clone --recurse-submodules https://github.com/youseetoo/uc2-esp32")),(0,a.kt)("li",{parentName:"ol"},"Open the main folder in the Visual Studio Code"),(0,a.kt)("li",{parentName:"ol"},"Adjust the settings in the file ",(0,a.kt)("inlineCode",{parentName:"li"},"platformio.ini"),"-file (mostly the port)\n4.1. Go to Platformio Home and navigate to Devices\n4.2 Copy the Device port (if connected) and insert that into the ",(0,a.kt)("inlineCode",{parentName:"li"},"platformio.ini"),", e.g. ",(0,a.kt)("inlineCode",{parentName:"li"},"upload_port = /dev/cu.SLAB_USBtoUART")," or ",(0,a.kt)("inlineCode",{parentName:"li"},"COM3")," for windows"),(0,a.kt)("li",{parentName:"ol"},"Hit the ",(0,a.kt)("inlineCode",{parentName:"li"},"PlatformIO upload")," button; The following task will be run: ",(0,a.kt)("inlineCode",{parentName:"li"},"platformio run --target upload"),"; The code is getting compiled and saved into ",(0,a.kt)("inlineCode",{parentName:"li"},"./.pio/build/"),"\n5.1 The code will be uploaded. If everything goes right the terminal says: `Leaving... Hard resetting via RTS pin...``"),(0,a.kt)("li",{parentName:"ol"},"open the PlatformIO serial monitor (remember to also change the port in the ",(0,a.kt)("inlineCode",{parentName:"li"},"platform.io")," accordingly) and check the ESP32's output (eventually hit the reset button)"),(0,a.kt)("li",{parentName:"ol"},"In case you have any problems: File an issue :-)")),(0,a.kt)("p",null,"In order to test several commands, you can find a useful list of ",(0,a.kt)("inlineCode",{parentName:"p"},"json")," files in this file: ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/youseetoo/uc2-esp32/blob/mergeBD/main/json_api_BD.txt"},"json_api_BD.txt")),(0,a.kt)("h2",{id:"v1-source-code-compiling-and-binaries-deprecated"},"V1: Source-code, Compiling and Binaries (Deprecated)"),(0,a.kt)("p",null,"The current version of the firmware can be found here: ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/openUC2/UC2-REST/tree/master/ESP32"},"https://github.com/openUC2/UC2-REST/tree/master/ESP32")),(0,a.kt)("p",null,"Additional information on how to install and compile the board can be found in the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/openUC2/UC2-REST/master/README.md"},"README")),(0,a.kt)("p",null,"Precompiled binaries that can be installed through ImSwitch (more information coming soon) or the ",(0,a.kt)("inlineCode",{parentName:"p"},"esptool.py"),"can be found here ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/openUC2/UC2-REST/tree/master/ESP32/build"},"https://github.com/openUC2/UC2-REST/tree/master/ESP32/build")),(0,a.kt)("h2",{id:"v1-install-necessary-software-for-uc2-rest-flash-and-interact-deprecated"},"V1: Install necessary software for UC2 rest (flash and interact) (Deprecated)"),(0,a.kt)("p",null,"Here you learn how to install the necessary software (Arduino IDE, drivers, ESP-IDF, Arduino libraries) that are necessary for the system to be working. Everything is explained in the video below."),(0,a.kt)("p",null,"Additional information about the UC2 electronics and UC2-REST are provided here: ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/openUC2/UC2-REST"},"https://github.com/openUC2/UC2-REST")),(0,a.kt)("h3",{id:"download-and-install-the-software"},"Download and install the software:"),(0,a.kt)("p",null,"To simplify life, we host a ",(0,a.kt)("a",{parentName:"p",href:"https://www.dropbox.com/sh/pea63wifrq3edsl/AAChzXEGA55uUt2Kjxxfk_Dka?dl=0"},"dropbox folder")," containing all the necessary drivers and Software pieces for this workshop. It will run on a Windows 10 64 Bit system:"),(0,a.kt)("p",{align:"left"},(0,a.kt)("a",{href:"https://www.dropbox.com/sh/pea63wifrq3edsl/AAChzXEGA55uUt2Kjxxfk_Dka?dl=0",name:"logo"},(0,a.kt)("img",{src:"https://upload.wikimedia.org/wikipedia/commons/thumb/7/78/Dropbox_Icon.svg/86px-Dropbox_Icon.svg.png",width:"40"}))),(0,a.kt)("h3",{id:"list-of-relevant-files"},"List of relevant files"),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"for the UC2-REST")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Arduino IDE:")," ",(0,a.kt)("inlineCode",{parentName:"li"},"arduino-1.8.18-windows.exe")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"ESP32 USB driver:")," ",(0,a.kt)("inlineCode",{parentName:"li"},"CH341SER.exe")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"UC2 Rest firmware:")," ",(0,a.kt)("inlineCode",{parentName:"li"},"UC2-REST.zip"))),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Alternative GitHub links that provide you with the ",(0,a.kt)("strong",{parentName:"em"},"latest version")," of the software:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/openUC2/UC2-REST"},"https://github.com/openUC2/UC2-REST")," (=> firmware under ESP32/main; compile and flash on your ESP32 board)"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/beniroquai/BenesArduinoLibraries"},"https://github.com/beniroquai/BenesArduinoLibraries")," (=> all libraries necessary to compile the software)"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://learn.sparkfun.com/tutorials/how-to-install-ch340-drivers/all"},"https://learn.sparkfun.com/tutorials/how-to-install-ch340-drivers/all")," (=> CH340 drivers for the ESP32 board)")),(0,a.kt)("h3",{id:"steps-to-install-the-software"},"Steps to install the software"),(0,a.kt)("ol",{start:0},(0,a.kt)("li",{parentName:"ol"},"Download all relevant files from the Dropbox folder above"),(0,a.kt)("li",{parentName:"ol"},"Install the Arduino IDE (including all drivers if you are asked during the installation)"),(0,a.kt)("li",{parentName:"ol"},"Install the CH340 USB Serial driver ",(0,a.kt)("a",{parentName:"li",href:"https://learn.sparkfun.com/tutorials/how-to-install-ch340-drivers/all"},"https://learn.sparkfun.com/tutorials/how-to-install-ch340-drivers/all")),(0,a.kt)("li",{parentName:"ol"},"Extract ",(0,a.kt)("inlineCode",{parentName:"li"},"BenesArduinoLibraries-master.zip")," to ",(0,a.kt)("inlineCode",{parentName:"li"},"/User/$USER$/Documents/Aduino/libraries")),(0,a.kt)("li",{parentName:"ol"},"Open the Arduino IDE and add the ESP32 board configuration. For this you need to add the following URL to the settings tag: ",(0,a.kt)("inlineCode",{parentName:"li"},"https://dl.espressif.com/dl/package_esp32_index.json, http://arduino.esp8266.com/stable/package_esp8266com_index.json"),". For additional information please have a look in ",(0,a.kt)("a",{parentName:"li",href:"https://randomnerdtutorials.com/installing-the-esp32-board-in-arduino-ide-windows-instructions/"},"this tutorial")),(0,a.kt)("li",{parentName:"ol"},"Once done, open the Board manager and add the ",(0,a.kt)("inlineCode",{parentName:"li"},"ESP32"),"version ",(0,a.kt)("strong",{parentName:"li"},"2.0.3")),(0,a.kt)("li",{parentName:"ol"},"Unzip the folder ",(0,a.kt)("inlineCode",{parentName:"li"},"UC2-REST")," and open the file ",(0,a.kt)("inlineCode",{parentName:"li"},"/ESP32/main/main.ino")),(0,a.kt)("li",{parentName:"ol"},"Select the board, the port and hit the compile and upload button"),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"IMPORTANT")," when setting up the build + upload, make sure you add this setting for the partition scheme (and potentially all others if not already set as default):")),(0,a.kt)("p",null,(0,a.kt)("img",{src:n(28375).Z,width:"2910",height:"1882"})),(0,a.kt)("p",null,"The system accepts different hardware configurations (pins, devices, etc.). All of this is defined in the ",(0,a.kt)("inlineCode",{parentName:"p"},"pindef_XXXX.h"),". Please have a look in the UC2-REST repository for additional information: ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/openUC2/UC2-REST"},"https://github.com/openUC2/UC2-REST")),(0,a.kt)("h3",{id:"video-tutorial-steps-to-install-the-software"},"VIDEO Tutorial: Steps to install the software"),(0,a.kt)("iframe",{width:"560",height:"315",src:"https://www.youtube.com/embed/9doTdo5SW2E",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:!0}))}c.isMDXComponent=!0},28375:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/FLASH_HUGEAPP-6a31ea3456d5bb1f7475a92d982169df.png"}}]);