"use strict";(self.webpackChunkuc_2_docs=self.webpackChunkuc_2_docs||[]).push([[3271],{3905:(n,e,t)=>{t.d(e,{Zo:()=>P,kt:()=>l});var i=t(67294);function r(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function o(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,i)}return t}function a(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?o(Object(t),!0).forEach((function(e){r(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function c(n,e){if(null==n)return{};var t,i,r=function(n,e){if(null==n)return{};var t,i,r={},o=Object.keys(n);for(i=0;i<o.length;i++)t=o[i],e.indexOf(t)>=0||(r[t]=n[t]);return r}(n,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(i=0;i<o.length;i++)t=o[i],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(r[t]=n[t])}return r}var s=i.createContext({}),d=function(n){var e=i.useContext(s),t=e;return n&&(t="function"==typeof n?n(e):a(a({},e),n)),t},P=function(n){var e=d(n.components);return i.createElement(s.Provider,{value:e},n.children)},u={inlineCode:"code",wrapper:function(n){var e=n.children;return i.createElement(i.Fragment,{},e)}},p=i.forwardRef((function(n,e){var t=n.components,r=n.mdxType,o=n.originalType,s=n.parentName,P=c(n,["components","mdxType","originalType","parentName"]),p=d(t),l=r,I=p["".concat(s,".").concat(l)]||p[l]||u[l]||o;return t?i.createElement(I,a(a({ref:e},P),{},{components:t})):i.createElement(I,a({ref:e},P))}));function l(n,e){var t=arguments,r=e&&e.mdxType;if("string"==typeof n||r){var o=t.length,a=new Array(o);a[0]=p;var c={};for(var s in e)hasOwnProperty.call(e,s)&&(c[s]=e[s]);c.originalType=n,c.mdxType="string"==typeof n?n:r,a[1]=c;for(var d=2;d<o;d++)a[d]=t[d];return i.createElement.apply(null,a)}return i.createElement.apply(null,t)}p.displayName="MDXCreateElement"},25704:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>s,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>c,toc:()=>d});var i=t(87462),r=(t(67294),t(3905));const o={},a="HAT+",c={unversionedId:"Electronics/Advanced/Hardware-Interfaces/RaspberryPiHat+",id:"Electronics/Advanced/Hardware-Interfaces/RaspberryPiHat+",title:"HAT+",description:"This is a HAT for the Raspberry Pi 5 that adapts the Raspberry pi to an esp32 that in turn talks to auxilary components like motors and illumination modules via CAN Bus and I2C (optionally).",source:"@site/docs/04_Electronics/10_Advanced/03_Hardware-Interfaces/12-RaspberryPiHat+.md",sourceDirName:"04_Electronics/10_Advanced/03_Hardware-Interfaces",slug:"/Electronics/Advanced/Hardware-Interfaces/RaspberryPiHat+",permalink:"/docs/Electronics/Advanced/Hardware-Interfaces/RaspberryPiHat+",draft:!1,tags:[],version:"current",sidebarPosition:12,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Documentation for Stepper Motor Controller with Rotational Encoder (TMC2209 + AS5600)",permalink:"/docs/Electronics/Advanced/Hardware-Interfaces/StepperMotorBackpack"},next:{title:"CANInterface",permalink:"/docs/Electronics/Advanced/Hardware-Interfaces/CANInterface"}},s={},d=[{value:"Pinout",id:"pinout",level:2},{value:"ESP32 CAN INterface",id:"esp32-can-interface",level:2},{value:"HAT+ on Jetson",id:"hat-on-jetson",level:2},{value:"Correct Termination of Boards",id:"correct-termination-of-boards",level:2}],P={toc:d};function u(n){let{components:e,...o}=n;return(0,r.kt)("wrapper",(0,i.Z)({},P,o,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"hat"},"HAT+"),(0,r.kt)("p",null,"This is a HAT for the Raspberry Pi 5 that adapts the Raspberry pi to an esp32 that in turn talks to auxilary components like motors and illumination modules via CAN Bus and I2C (optionally)."),(0,r.kt)("h2",{id:"pinout"},"Pinout"),(0,r.kt)("p",null,"This is the hat's pinout on:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'raspi_pinheader = {\n    1: {"Pin": 1, "Function": "+3.3V"},\n    2: {"Pin": 2, "Function": "+5V"},\n    3: {"Pin": 3, "Function": "I2C_1_SDA (GPIO2)"},\n    4: {"Pin": 4, "Function": "+5V"},\n    5: {"Pin": 5, "Function": "I2C_1_SCL (GPIO3)"},\n    6: {"Pin": 6, "Function": "GND"},\n    7: {"Pin": 7, "Function": "GPIO4"},\n    8: {"Pin": 8, "Function": "RPI_UART_TX (GPIO14)"},\n    9: {"Pin": 9, "Function": "GND"},\n    10: {"Pin": 10, "Function": "RPI_UART_RX (GPIO15)"},\n    11: {"Pin": 11, "Function": "GPIO17"},\n    12: {"Pin": 12, "Function": "GPIO18"},\n    13: {"Pin": 13, "Function": "GPIO27"},\n    14: {"Pin": 14, "Function": "GND"},\n    15: {"Pin": 15, "Function": "GPIO22"},\n    16: {"Pin": 16, "Function": "GPIO23"},\n    17: {"Pin": 17, "Function": "+3.3V"},\n    18: {"Pin": 18, "Function": "GPIO24"},\n    19: {"Pin": 19, "Function": "CAN-ctrl_PICO (GPIO10)"},\n    20: {"Pin": 20, "Function": "GND"},\n    21: {"Pin": 21, "Function": "CAN-ctrl_POCI (GPIO9)"},\n    22: {"Pin": 22, "Function": "GPIO25"},\n    23: {"Pin": 23, "Function": "CAN-ctrl_SCK (GPIO11)"},\n    24: {"Pin": 24, "Function": "CAN-ctrl_CS (GPIO8)"},\n    25: {"Pin": 25, "Function": "GND"},\n    26: {"Pin": 26, "Function": "EEPROM_SCL (GPIO0)"},\n    27: {"Pin": 27, "Function": "EEPROM_SDA (GPIO1)"},\n    28: {"Pin": 28, "Function": "Reserved"},\n    29: {"Pin": 29, "Function": "GPIO5"},\n    30: {"Pin": 30, "Function": "GND"},\n    31: {"Pin": 31, "Function": "GPIO6"},\n    32: {"Pin": 32, "Function": "GPIO12"},\n    33: {"Pin": 33, "Function": "GPIO13"},\n    34: {"Pin": 34, "Function": "GND"},\n    35: {"Pin": 35, "Function": "GPIO19"},\n    36: {"Pin": 36, "Function": "GPIO16"},\n    37: {"Pin": 37, "Function": "GPIO26"},\n    38: {"Pin": 38, "Function": "GPIO20"},\n    39: {"Pin": 39, "Function": "GND"},\n    40: {"Pin": 40, "Function": "GPIO21"},\n}\n')),(0,r.kt)("p",null,(0,r.kt)("img",{src:t(61846).Z,width:"914",height:"870"})),(0,r.kt)("h2",{id:"esp32-can-interface"},"ESP32 CAN INterface"),(0,r.kt)("p",null,"The HAT+ hosts an ESP32 that converts UART/Serial into CAN Control commands for the external components. The pinout is the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"\n// GPIO Pin Definitions for ESP32-S3 Xiao\n#define GPIO_TXD0        0   // UART TX\n#define GPIO_RXD0        1   // UART RX\n#define GPIO_SENSOR_VP   2   // Sensor VP\n#define GPIO_SENSOR_VN   3   // Sensor VN\n#define GPIO_STRAP_PIN_4 4   // Strapping pin 4\n#define GPIO_STRAP_PIN_5 5   // Strapping pin 5\n#define GPIO_IO6         6\n#define GPIO_IO7         7\n#define GPIO_IO8         8   // NeoPixel or LEDC PWM Output\n#define GPIO_IO9         9\n#define GPIO_IO10       10\n#define GPIO_IO11       11\n#define GPIO_IO12       12   // Strapping pin / JTAG\n#define GPIO_IO13       13   // Strapping pin / JTAG\n#define GPIO_IO14       14   // Strapping pin / JTAG\n#define GPIO_IO15       15   // Strapping pin / JTAG\n#define GPIO_IO16       16   // ESP_CAN_SEND\n#define GPIO_IO17       17   // ESP_CAN_RECV\n#define GPIO_I2C_SDA    18   // I2C SDA\n#define GPIO_I2C_SCL    19   // I2C SCL\n#define GPIO_DAC        20   // DAC Pin\n#define GPIO_IO21       21\n#define GPIO_IO22       22\n#define GPIO_IO23       23\n#define GPIO_IO24       24\n#define GPIO_IO25       25\n#define GPIO_IO26       26\n#define GPIO_IO27       27\n#define GPIO_IO28       28\n\n// Additional Connections\n#define GPIO_CAM_TRIGGER_IN_0 29  // Camera Trigger Input Line 0\n#define GPIO_CAM_TRIGGER_OUT_1 30 // Camera Trigger Output Line 1\n#define GPIO_CAM_IO_LINE_2     31 // Camera I/O Line 2\n\n// Default I2C Pins\n#define I2C_SDA_PIN GPIO_I2C_SDA\n#define I2C_SCL_PIN GPIO_I2C_SCL\n\n// CAN Bus Pins\n#define CAN_SEND_PIN GPIO_IO16\n#define CAN_RECV_PIN GPIO_IO17\n")),(0,r.kt)("p",null,(0,r.kt)("img",{src:t(17978).Z,width:"945",height:"757"})),(0,r.kt)("h2",{id:"hat-on-jetson"},"HAT+ on Jetson"),(0,r.kt)("p",null,(0,r.kt)("img",{src:t(23077).Z,width:"1920",height:"1080"})),(0,r.kt)("h2",{id:"correct-termination-of-boards"},"Correct Termination of Boards"),(0,r.kt)("p",null,"In order to enable the CAN Bus, you need to shortcut the audiolines of the audio jack (left/right):\n",(0,r.kt)("img",{src:t(6250).Z,width:"3602",height:"2236"})),(0,r.kt)("p",null,"In order to have the correct 50 Ohm termination resistor and indication if the bus is running, you have to add solder pads here:\n",(0,r.kt)("img",{src:t(94621).Z,width:"3483",height:"2236"})),(0,r.kt)("p",null,"The remote solder jumper for CAN 50 Ohm termination can be done using this pad:\n",(0,r.kt)("img",{src:t(70681).Z,width:"392",height:"370"})))}u.isMDXComponent=!0},6250:(n,e,t)=>{t.d(e,{Z:()=>i});const i=t.p+"assets/images/CANEmergency-59a85010c0a1ed7f24e9782a3402ea56.png"},94621:(n,e,t)=>{t.d(e,{Z:()=>i});const i=t.p+"assets/images/CANIndicator-f11628a6afc9c9a46b6361021956dafa.png"},70681:(n,e,t)=>{t.d(e,{Z:()=>i});const i=t.p+"assets/images/CANMotorTermination-601d3369635ce66526b1cb17daa1f1fb.png"},17978:(n,e,t)=>{t.d(e,{Z:()=>i});const i=t.p+"assets/images/ESP32Pinout-e7f5119696488d74823892d5b263d6f6.jpeg"},23077:(n,e,t)=>{t.d(e,{Z:()=>i});const i=t.p+"assets/images/HAT+Jetson-f303d922cfb5f8f76b796f16b1ef44be.jpeg"},61846:(n,e,t)=>{t.d(e,{Z:()=>i});const i=t.p+"assets/images/HAT+Pinout-6505e7308ec165312ae7da83017b7845.jpeg"}}]);