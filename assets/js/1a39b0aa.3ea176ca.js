"use strict";(self.webpackChunkuc_2_docs=self.webpackChunkuc_2_docs||[]).push([[7458],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var r=a.createContext({}),p=function(e){var t=a.useContext(r),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(r.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,r=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(n),m=i,h=u["".concat(r,".").concat(m)]||u[m]||d[m]||l;return n?a.createElement(h,o(o({ref:t},c),{},{components:n})):a.createElement(h,o({ref:t},c))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,o=new Array(l);o[0]=u;var s={};for(var r in t)hasOwnProperty.call(t,r)&&(s[r]=t[r]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var p=2;p<l;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},23694:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>o,default:()=>d,frontMatter:()=>l,metadata:()=>s,toc:()=>p});var a=n(87462),i=(n(67294),n(3905));const l={},o="ImSwitch Native Python Installation (With QT GUI)",s={unversionedId:"ImSwitch/Advanced/Installation/Native",id:"ImSwitch/Advanced/Installation/Native",title:"ImSwitch Native Python Installation (With QT GUI)",description:"This guide covers installing ImSwitch directly on your system using Python, suitable for development and advanced users who need full control over the installation.",source:"@site/docs/05_ImSwitch/Advanced/01_Installation/Native.md",sourceDirName:"05_ImSwitch/Advanced/01_Installation",slug:"/ImSwitch/Advanced/Installation/Native",permalink:"/docs/ImSwitch/Advanced/Installation/Native",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"ImSwitch Installer",permalink:"/docs/ImSwitch/Advanced/Installation/Installer"},next:{title:"ImSwitch Usage Tutorials",permalink:"/docs/ImSwitch/Advanced/Usage/"}},r={},p=[{value:"Installation Options",id:"installation-options",level:2},{value:"1. <strong>GUI Version (with Qt)</strong> - Full Desktop Experience",id:"1-gui-version-with-qt---full-desktop-experience",level:3},{value:"2. <strong>Headless Version (no Qt)</strong> - Server/Remote Mode",id:"2-headless-version-no-qt---serverremote-mode",level:3},{value:"Automated Installation",id:"automated-installation",level:2},{value:"Headless Installation Script",id:"headless-installation-script",level:3},{value:"Script Details",id:"script-details",level:3},{value:"Manual Installation",id:"manual-installation",level:2},{value:"GUI Installation (with Qt)",id:"gui-installation-with-qt",level:3},{value:"Ubuntu/Debian (GUI)",id:"ubuntudebian-gui",level:4},{value:"Windows (GUI)",id:"windows-gui",level:4},{value:"macOS (GUI)",id:"macos-gui",level:4},{value:"Headless Installation (no Qt)",id:"headless-installation-no-qt",level:3},{value:"Ubuntu/Debian (Headless)",id:"ubuntudebian-headless",level:4},{value:"Running ImSwitch",id:"running-imswitch",level:2},{value:"GUI Mode",id:"gui-mode",level:3},{value:"Headless Mode",id:"headless-mode",level:3},{value:"Configuration",id:"configuration",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues",id:"common-issues",level:3},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Windows Installation",id:"windows-installation",level:2},{value:"Step 1: Install Required Software",id:"step-1-install-required-software",level:3},{value:"Step 2: Clone Repositories",id:"step-2-clone-repositories",level:3},{value:"Step 3: Create Environment and Install",id:"step-3-create-environment-and-install",level:3},{value:"Step 4: Install Hardware Drivers",id:"step-4-install-hardware-drivers",level:3},{value:"Linux/Ubuntu Installation",id:"linuxubuntu-installation",level:2},{value:"Step 1: Install Dependencies",id:"step-1-install-dependencies",level:3},{value:"Step 2: Clone Repositories",id:"step-2-clone-repositories-1",level:3},{value:"Step 3: Create Virtual Environment",id:"step-3-create-virtual-environment",level:3},{value:"Step 4: Hardware Setup",id:"step-4-hardware-setup",level:3},{value:"macOS Installation",id:"macos-installation",level:2},{value:"Step 1: Install Homebrew and Dependencies",id:"step-1-install-homebrew-and-dependencies",level:3},{value:"Step 2: Clone and Install",id:"step-2-clone-and-install",level:3},{value:"Verification",id:"verification",level:2},{value:"Test Installation",id:"test-installation",level:3},{value:"Expected Output",id:"expected-output",level:3},{value:"Development Setup",id:"development-setup",level:2},{value:"IDE Configuration",id:"ide-configuration",level:3},{value:"Contributing",id:"contributing",level:3},{value:"Troubleshooting",id:"troubleshooting-1",level:2},{value:"Common Issues",id:"common-issues-1",level:3},{value:"Getting Help",id:"getting-help",level:3},{value:"Next Steps",id:"next-steps",level:2},{value:"Related Links",id:"related-links",level:2}],c={toc:p};function d(e){let{components:t,...l}=e;return(0,i.kt)("wrapper",(0,a.Z)({},c,l,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"imswitch-native-python-installation-with-qt-gui"},"ImSwitch Native Python Installation (With QT GUI)"),(0,i.kt)("p",null,"This guide covers installing ImSwitch directly on your system using Python, suitable for development and advanced users who need full control over the installation."),(0,i.kt)("h2",{id:"installation-options"},"Installation Options"),(0,i.kt)("p",null,"ImSwitch can be installed in two modes:"),(0,i.kt)("h3",{id:"1-gui-version-with-qt---full-desktop-experience"},"1. ",(0,i.kt)("strong",{parentName:"h3"},"GUI Version (with Qt)")," - Full Desktop Experience"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Complete graphical user interface"),(0,i.kt)("li",{parentName:"ul"},"All visualization and control widgets"),(0,i.kt)("li",{parentName:"ul"},"Requires display/desktop environment"),(0,i.kt)("li",{parentName:"ul"},"Best for interactive microscopy work")),(0,i.kt)("h3",{id:"2-headless-version-no-qt---serverremote-mode"},"2. ",(0,i.kt)("strong",{parentName:"h3"},"Headless Version (no Qt)")," - Server/Remote Mode"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"No graphical interface dependencies"),(0,i.kt)("li",{parentName:"ul"},"REST API and web interface only"),(0,i.kt)("li",{parentName:"ul"},"Ideal for automated systems and remote control"),(0,i.kt)("li",{parentName:"ul"},"Lower resource requirements")),(0,i.kt)("h2",{id:"automated-installation"},"Automated Installation"),(0,i.kt)("p",null,"For most users, we provide automated installation scripts:"),(0,i.kt)("h3",{id:"headless-installation-script"},"Headless Installation Script"),(0,i.kt)("p",null,"The automated headless installation script handles all dependencies:"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Repository"),": ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/openUC2/ImSwitchDockerInstall/blob/master/install_native.sh"},"openUC2/ImSwitchDockerInstall")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"# Download and run the automated installer\nwget https://raw.githubusercontent.com/openUC2/ImSwitchDockerInstall/master/install_native.sh\nchmod +x install_native.sh\nsudo ./install_native.sh\n")),(0,i.kt)("p",null,"This script performs the following steps:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"System Updates"),": Updates package manager and installs dependencies"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Miniforge Installation"),": Installs conda package manager (ARM64/x86_64)"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Environment Creation"),": Creates isolated Python 3.11 environment"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"ImSwitch Installation"),": Clones and installs ImSwitch from GitHub"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"UC2-REST Installation"),": Installs Python interface for ESP32 control"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Dependency Resolution"),": Handles package conflicts and version compatibility")),(0,i.kt)("h3",{id:"script-details"},"Script Details"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'#!/bin/bash -eu\nsudo apt-get update\nsudo apt-get install -y git curl\n\n# in case they don\'t exist create Download/Desktop folder (e.g. lite)\nmkdir -p ~/Downloads\nmkdir -p ~/Desktop\n\nARCH=$(uname -m)\n\n# Set timezone\nexport TZ=America/Los_Angeles\necho "Setting timezone to $TZ"\n#sudo ln -snf /usr/share/zoneinfo/"$TZ" /etc/localtime && echo "$TZ" >/etc/timezone\n\n# Update and install necessary dependencies\necho "Updating system and installing dependencies"\nsudo apt-get update && sudo apt-get install -y \\\n    wget \\\n    unzip \\\n    python3 \\\n    python3-pip \\\n    build-essential \\\n    git \\\n    mesa-utils \\\n    openssh-server \\\n    libhdf5-dev \\\n    usbutils\n\n# Clean up apt caches\nsudo apt-get clean\nsudo rm -rf /var/lib/apt/lists/*\n# Install Miniforge\necho "Installing Miniforge"\nif [ "$ARCH" = "aarch64" ]; then\n    wget https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Linux-aarch64.sh -O /tmp/miniforge.sh\nelif [ "$ARCH" = "x86_64" ]; then\n    wget https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Linux-x86_64.sh -O /tmp/miniforge.sh\nfi\nsudo bash /tmp/miniforge.sh -b -p /opt/conda\nrm /tmp/miniforge.sh\n\n# Update PATH environment variable\necho "Updating PATH"\nexport PATH=/opt/conda/bin:$PATH\n\n# Create conda environment and install packages\necho "Creating conda environment and installing packages"\nconda create -y --name imswitch311 python=3.11\nconda install -n imswitch311 -y -c conda-forge h5py numcodecs==0.13.1 scikit-image==0.25.2\nconda clean --all -f -y\n\n# if ImSwitch Config already exists, skip this step\nif [ -d ~/ImSwitchConfig ]; then\n    echo "ImSwitchConfig already exists, skipping clone."\nelse\n    echo "ImSwitchConfig does not exist, cloning repository."\n    # Clone the config folder\n    echo "Cloning ImSwitchConfig"\n    git clone https://github.com/openUC2/ImSwitchConfig ~/ImSwitchConfig\nfi\n\n# Clone the repository and install dependencies\necho "Cloning and installing imSwitch"\ngit clone https://github.com/openUC2/imSwitch ~/ImSwitch\ncd ~/ImSwitch\ngit checkout master\nsource /opt/conda/bin/activate imswitch311 && pip install -e ~/ImSwitch\n\n# Install UC2-REST\necho "Installing UC2-REST"\ngit clone https://github.com/openUC2/UC2-REST ~/UC2-REST\ncd ~/UC2-REST\nsource /opt/conda/bin/activate imswitch311 && pip install -e ~/UC2-REST\n\n# we want psygnal to be installed without binaries - so first remove it - raspi doesn\'t need this one\n# source /opt/conda/bin/activate imswitch && pip uninstall psygnal -y\n# source /opt/conda/bin/activate imswitch && pip install psygnal --no-binary :all:\nsource /opt/conda/bin/activate imswitch311 && mamba install -c conda-forge --strict-channel-priority numcodecs==0.13.1 -y\n\n# fix numpy\nsource /opt/conda/bin/activate imswitch311 && python3 -m pip install numpy==1.26.4 --force-reinstall\n\n# Expose SSH port and HTTP port\n#echo "Exposing ports 22, 8002 and 8001 and 8888"\n#sudo ufw allow 22\n#sudo ufw allow 8001\n#sudo ufw allow 8002\n#sudo ufw allow 8888\n\necho "Installation complete. To run the application, use the following command:"\necho "source /opt/conda/bin/activate imswitch311 && python3 ~/ImSwitch/main.py --headless --http-port 8001"\n\necho "source /opt/conda/bin/activate imswitch311" >>~/.bashrc\n')),(0,i.kt)("h2",{id:"manual-installation"},"Manual Installation"),(0,i.kt)("p",null,"For advanced users who want full control over the installation process, here are manual instructions for both GUI and headless versions."),(0,i.kt)("h3",{id:"gui-installation-with-qt"},"GUI Installation (with Qt)"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Prerequisites for GUI Version:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Desktop environment (X11/Wayland)"),(0,i.kt)("li",{parentName:"ul"},"Qt5/Qt6 development libraries"),(0,i.kt)("li",{parentName:"ul"},"OpenGL support")),(0,i.kt)("p",null,"In all cases, you can start the GUI (in case all the dependencies are properly installed) using the ",(0,i.kt)("inlineCode",{parentName:"p"},"is_headless=0")," flag. For this create a python file (e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"main2.py"),") and launch this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},'if __name__ == \'__main__\':\n    from imswitch.__main__ import main\n    \'\'\'\n    To start imswitch in headless with a remote config file, you can add additional arguments:\n    main(is_headless=True, default_config="/Users/bene/ImSwitchConfig/imcontrol_setups/example_virtual_microscope.json", http_port=8001, ssl=True, data_folder="/Users/bene/Downloads")\n    - is_headless: True or False\n    - default_config: path to the config file\n    - http_port: port number^ \n    - ssl: True or False\n    - data_folder: path to the data folder => in docker this could be e.g. Volumes, media in combination with external scanning or any other volume that is direclty mapped as a folder to Imswitch\n    - scan_ext_data_folder: True or False => we will look for any externally connected devices (usb) that is mounted under /Volumes or /media\n    example:\n    main(is_headless=True, data_folder="/Users/bene/Downloads")\n    \n    # kill -9 $(lsof -ti:8001)\n    \'\'\'\n    #main(is_headless=False) ## this has to be maintained for DOCKER!\n    #main(default_config="/Users/bene/ImSwitchConfig/imcontrol_setups/FRAME.json", is_headless=True, http_port=8001) ## this has to be maintained for DOCKER!\n    #main(default_config="/Users/bene/ImSwitchConfig/imcontrol_setups/example_uc2_lightsheet_hik.json", is_headless=True, http_port=8001) ## this has to be maintained for DOCKER!\n    main(default_config="/Users/bene/ImSwitchConfig/imcontrol_setups/example_virtual_microscope.json", is_headless=False, http_port=8001, socket_port=8002, scan_ext_data_folder=True, data_folder="~/Downloads", ext_drive_mount="/Volumes") \n')),(0,i.kt)("p",null,"With this we will see the qt app load:"),(0,i.kt)("p",null,(0,i.kt)("img",{src:n(66574).Z,width:"3146",height:"2112"})),(0,i.kt)("p",null,"Below you will find ways how to install the dependencies. In a nutshell: You install imswitch with the ",(0,i.kt)("inlineCode",{parentName:"p"},"PyQt5")," flag which will install napari and its dependencies (e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"pip install .[PyQt5]")," assuming you are in the same folder as the cloned ImSwitch (openUC2 version) repo). The ImSwitch app in QT looks as follows: "),(0,i.kt)("p",null,(0,i.kt)("img",{src:n(83526).Z,width:"3148",height:"2112"})),(0,i.kt)("admonition",{type:"warning"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("strong",{parentName:"p"},"Discontinued support for QT"),": We have stopped supporting the qt framework as we push towards the headless mode - please expect errors and unsupported functions!")),(0,i.kt)("h4",{id:"ubuntudebian-gui"},"Ubuntu/Debian (GUI)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"# Install system dependencies\nsudo apt-get update\nsudo apt-get install -y \\\n    python3 python3-pip python3-venv \\\n    git build-essential \\\n    qt5-default python3-pyqt5 \\\n    libgl1-mesa-glx libglib2.0-0 \\\n    libhdf5-dev libopencv-dev\n\n# Create virtual environment\npython3 -m venv ~/imswitch-env\nsource ~/imswitch-env/bin/activate\n\n# Install ImSwitch\ngit clone https://github.com/openUC2/imSwitch ~/ImSwitch\ncd ~/ImSwitch\npip install -e .\n\n# Install UC2-REST\ngit clone https://github.com/openUC2/UC2-REST ~/UC2-REST\ncd ~/UC2-REST  \npip install -e .\n")),(0,i.kt)("h4",{id:"windows-gui"},"Windows (GUI)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-powershell"},"# Install Python 3.11 from python.org\n# Install Git from git-scm.com\n# Install Visual Studio Code (optional)\n\n# Create virtual environment\npython -m venv imswitch-env\nimswitch-env\\Scripts\\activate\n\n# Clone and install\ngit clone https://github.com/openUC2/imSwitch \ncd imSwitch\npip install -e .[PyQt5]\n\n# Install UC2-REST\ngit clone https://github.com/openUC2/UC2-REST\ncd UC2-REST\npip install -e .\n")),(0,i.kt)("h4",{id:"macos-gui"},"macOS (GUI)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'# Install Homebrew (if not already installed)\n/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"\n\n# Install dependencies\nbrew install python@3.11 git qt5\nexport PATH="/usr/local/opt/qt5/bin:$PATH"\n\n# Create virtual environment\npython3 -m venv ~/imswitch-env\nsource ~/imswitch-env/bin/activate\n\n# Install ImSwitch\ngit clone https://github.com/openUC2/imSwitch ~/ImSwitch\ncd ~/ImSwitch\npip install -e .[PyQt5]\n\n# Install UC2-REST\ngit clone https://github.com/openUC2/UC2-REST ~/UC2-REST\ncd ~/UC2-REST\npip install -e .\n')),(0,i.kt)("h3",{id:"headless-installation-no-qt"},"Headless Installation (no Qt)"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Prerequisites for Headless Version:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Python 3.10+ "),(0,i.kt)("li",{parentName:"ul"},"No desktop environment required"),(0,i.kt)("li",{parentName:"ul"},"Minimal system dependencies")),(0,i.kt)("h4",{id:"ubuntudebian-headless"},"Ubuntu/Debian (Headless)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"# Install minimal dependencies\nsudo apt-get update\nsudo apt-get install -y \\\n    python3 python3-pip python3-venv \\\n    git build-essential \\\n    libhdf5-dev\n\n# Create virtual environment\npython3 -m venv ~/imswitch-headless\nsource ~/imswitch-headless/bin/activate\n\n# Install headless version\ngit clone https://github.com/openUC2/imSwitch ~/ImSwitch\ncd ~/ImSwitch\npip install -e .[headless]\n\n# Install UC2-REST\ngit clone https://github.com/openUC2/UC2-REST ~/UC2-REST\ncd ~/UC2-REST\npip install -e .\n")),(0,i.kt)("h2",{id:"running-imswitch"},"Running ImSwitch"),(0,i.kt)("h3",{id:"gui-mode"},"GUI Mode"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"# Activate environment\nsource ~/imswitch-env/bin/activate  # Linux/Mac\n# OR\nimswitch-env\\Scripts\\activate  # Windows\n\n# Run with GUI\ncd ~/ImSwitch\npython main.py\n")),(0,i.kt)("h3",{id:"headless-mode"},"Headless Mode"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"# Activate environment\nsource ~/imswitch-headless/bin/activate\n\n# Run headless with web interface\ncd ~/ImSwitch\npython main.py --headless --http-port 8001\n\n# Access web interface at: http://localhost:8001/imswitch/index.html\n")),(0,i.kt)("h2",{id:"configuration"},"Configuration"),(0,i.kt)("p",null,"After installation, configure ImSwitch by creating or editing configuration files:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"# Clone configuration repository\ngit clone https://github.com/openUC2/ImSwitchConfig ~/ImSwitchConfig\n\n# Configuration files location:\n# Linux/Mac: ~/Documents/ImSwitchConfig/config/\n# Windows: %USERPROFILE%\\Documents\\ImSwitchConfig\\config\\\n")),(0,i.kt)("h2",{id:"troubleshooting"},"Troubleshooting"),(0,i.kt)("h3",{id:"common-issues"},"Common Issues"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Qt/GUI Issues:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"# Install additional Qt packages\nsudo apt-get install python3-pyqt5.qtsvg python3-pyqt5.qtwebengine\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Camera Driver Issues:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"# Install camera drivers\nsudo apt-get install libhik-camera-dev libdaheng-camera-dev\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Permission Issues:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"# Add user to dialout group for serial port access\nsudo usermod -a -G dialout $USER\n# Log out and log back in\n")),(0,i.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Python 3.10 or higher"),(0,i.kt)("li",{parentName:"ul"},"Git"),(0,i.kt)("li",{parentName:"ul"},"Visual Studio Code (recommended)"),(0,i.kt)("li",{parentName:"ul"},"Platform-specific development tools")),(0,i.kt)("h2",{id:"windows-installation"},"Windows Installation"),(0,i.kt)("h3",{id:"step-1-install-required-software"},"Step 1: Install Required Software"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Visual Studio Code")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Download from ",(0,i.kt)("a",{parentName:"li",href:"https://code.visualstudio.com/Download"},"VS Code website")),(0,i.kt)("li",{parentName:"ul"},"Install with default settings"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Git for Windows")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Download from ",(0,i.kt)("a",{parentName:"li",href:"https://git-scm.com/download/win"},"Git website")),(0,i.kt)("li",{parentName:"ul"},"Install with default settings"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Miniconda")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Download from ",(0,i.kt)("a",{parentName:"li",href:"https://docs.conda.io/en/latest/miniconda.html"},"Miniconda website")),(0,i.kt)("li",{parentName:"ul"},"Install the 64-bit version"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Important"),': Select "Add Anaconda to my PATH environment variable" during installation')))),(0,i.kt)("h3",{id:"step-2-clone-repositories"},"Step 2: Clone Repositories"),(0,i.kt)("p",null,"Open Command Prompt and navigate to your preferred directory:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"cd C:\\Users\\<YourUsername>\\Downloads\n\n# Clone required repositories\ngit clone https://github.com/openUC2/UC2-REST\ngit clone https://github.com/openUC2/ImSwitch\ngit clone https://gitlab.com/bionanoimaging/nanoimagingpack\n")),(0,i.kt)("h3",{id:"step-3-create-environment-and-install"},"Step 3: Create Environment and Install"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"# Create new conda environment\nconda create -n imswitch python=3.10\n\n# Activate environment\nconda activate imswitch\n\n# Install ImSwitch\ncd ImSwitch\npip install -e .\n\n# Install UC2-REST\ncd ../UC2-REST\npip install -e .\n\n# Install NanoImagingPack (optional, for advanced image processing)\ncd ../nanoimagingpack\npip install -e .\n")),(0,i.kt)("h3",{id:"step-4-install-hardware-drivers"},"Step 4: Install Hardware Drivers"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"UC2 Electronics (CH340 Driver):")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Download ",(0,i.kt)("a",{parentName:"li",href:"https://sparks.gogo.co.nz/assets/IMSWITCH/_site_/downloads/CH34x_Install_Windows_v3_4.zip"},"CH340 driver")),(0,i.kt)("li",{parentName:"ol"},"Extract and run the installer"),(0,i.kt)("li",{parentName:"ol"},"Device will appear as COM port in Device Manager")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"UC2 Electronics (CP210x Driver):")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Download ",(0,i.kt)("a",{parentName:"li",href:"https://www.silabs.com/developers/usb-to-uart-bridge-vcp-drivers"},"CP210x driver")),(0,i.kt)("li",{parentName:"ol"},"Install following manufacturer instructions")),(0,i.kt)("h2",{id:"linuxubuntu-installation"},"Linux/Ubuntu Installation"),(0,i.kt)("h3",{id:"step-1-install-dependencies"},"Step 1: Install Dependencies"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"# Update package list\nsudo apt update\n\n# Install required packages\nsudo apt install -y python3-pip python3-venv git build-essential\n\n# Install Python development headers\nsudo apt install -y python3-dev\n\n# For camera support\nsudo apt install -y libusb-1.0-0-dev\n")),(0,i.kt)("h3",{id:"step-2-clone-repositories-1"},"Step 2: Clone Repositories"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"cd ~/Downloads\n\n# Clone required repositories\ngit clone https://github.com/openUC2/UC2-REST\ngit clone https://github.com/openUC2/ImSwitch\ngit clone https://gitlab.com/bionanoimaging/nanoimagingpack\n")),(0,i.kt)("h3",{id:"step-3-create-virtual-environment"},"Step 3: Create Virtual Environment"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"# Create virtual environment\npython3 -m venv ~/imswitch-env\n\n# Activate environment\nsource ~/imswitch-env/bin/activate\n\n# Install ImSwitch and dependencies\ncd ~/Downloads/ImSwitch\npip install -e .\n\n# Install UC2-REST\ncd ~/Downloads/UC2-REST\npip install -e .\n\n# Install NanoImagingPack (optional)\ncd ~/Downloads/nanoimagingpack\npip install -e .\n")),(0,i.kt)("h3",{id:"step-4-hardware-setup"},"Step 4: Hardware Setup"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"USB Serial Devices:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"# Add user to dialout group for serial port access\nsudo usermod -a -G dialout $USER\n\n# Logout and login again for changes to take effect\n")),(0,i.kt)("h2",{id:"macos-installation"},"macOS Installation"),(0,i.kt)("h3",{id:"step-1-install-homebrew-and-dependencies"},"Step 1: Install Homebrew and Dependencies"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'# Install Homebrew (if not already installed)\n/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"\n\n# Install required packages\nbrew install python@3.10 git\n')),(0,i.kt)("h3",{id:"step-2-clone-and-install"},"Step 2: Clone and Install"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"cd ~/Downloads\n\n# Clone repositories\ngit clone https://github.com/openUC2/UC2-REST\ngit clone https://github.com/openUC2/ImSwitch\ngit clone https://gitlab.com/bionanoimaging/nanoimagingpack\n\n# Create virtual environment\npython3 -m venv ~/imswitch-env\nsource ~/imswitch-env/bin/activate\n\n# Install packages\ncd ImSwitch && pip install -e . && cd ..\ncd UC2-REST && pip install -e . && cd ..\ncd nanoimagingpack && pip install -e . && cd ..\n")),(0,i.kt)("h2",{id:"verification"},"Verification"),(0,i.kt)("h3",{id:"test-installation"},"Test Installation"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"# Activate environment (if not already active)\n# Windows: conda activate imswitch\n# Linux/macOS: source ~/imswitch-env/bin/activate\n\n# Test ImSwitch\npython -c \"import imswitch; print('ImSwitch installed successfully')\"\n\n# Test UC2-REST\npython -c \"import UC2REST; print('UC2-REST installed successfully')\"\n\n# Launch ImSwitch\npython -m imswitch\n")),(0,i.kt)("h3",{id:"expected-output"},"Expected Output"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"ImSwitch GUI should launch"),(0,i.kt)("li",{parentName:"ul"},"Check console for any error messages"),(0,i.kt)("li",{parentName:"ul"},"Verify hardware detection in the interface")),(0,i.kt)("h2",{id:"development-setup"},"Development Setup"),(0,i.kt)("h3",{id:"ide-configuration"},"IDE Configuration"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Visual Studio Code Extensions:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Python"),(0,i.kt)("li",{parentName:"ul"},"Pylance"),(0,i.kt)("li",{parentName:"ul"},"Python Docstring Generator"),(0,i.kt)("li",{parentName:"ul"},"GitLens")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Settings for ImSwitch development:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "python.defaultInterpreterPath": "./imswitch-env/bin/python",\n    "python.linting.enabled": true,\n    "python.linting.pylintEnabled": true\n}\n')),(0,i.kt)("h3",{id:"contributing"},"Contributing"),(0,i.kt)("p",null,"If you plan to contribute to ImSwitch:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"# Fork the repository on GitHub first, then:\ngit clone https://github.com/YOUR_USERNAME/ImSwitch\ncd ImSwitch\n\n# Add upstream remote\ngit remote add upstream https://github.com/openUC2/ImSwitch\n\n# Create development branch\ngit checkout -b feature/my-feature\n\n# Install in development mode\npip install -e .[dev]\n")),(0,i.kt)("h2",{id:"troubleshooting-1"},"Troubleshooting"),(0,i.kt)("h3",{id:"common-issues-1"},"Common Issues"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Import errors:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"# Ensure environment is activated\n# Reinstall with verbose output\npip install -e . -v\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Qt/GUI issues on Linux:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"# Install Qt dependencies\nsudo apt install -y python3-pyqt5 python3-pyqt5.qtsvg\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Serial port access denied:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"# Linux: Add user to dialout group\nsudo usermod -a -G dialout $USER\n\n# Windows: Check driver installation in Device Manager\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Camera not detected:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"# Install camera-specific drivers\n# For HIK cameras: Install MVS runtime\n# For other cameras: Check manufacturer documentation\n")),(0,i.kt)("h3",{id:"getting-help"},"Getting Help"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"GitHub Issues"),": ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/openUC2/ImSwitch/issues"},"ImSwitch Issues")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Discussions"),": ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/openUC2/ImSwitch/discussions"},"ImSwitch Discussions")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"UC2 Forum"),": ",(0,i.kt)("a",{parentName:"li",href:"https://openuc2.com"},"openUC2.com"))),(0,i.kt)("h2",{id:"next-steps"},"Next Steps"),(0,i.kt)("p",null,"After successful installation:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("a",{parentName:"strong",href:"/docs/ImSwitch/Advanced/Configuration/"},"Configure your setup"))," - Create configuration files for your hardware"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("a",{parentName:"strong",href:"/docs/ImSwitch/Advanced/Usage/"},"Basic usage"))," - Learn ImSwitch fundamentals"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("a",{parentName:"strong",href:"/docs/ImSwitch/Advanced/Usage/Updates"},"Update procedures"))," - Keep your installation current")),(0,i.kt)("h2",{id:"related-links"},"Related Links"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/openUC2/ImSwitch"},"ImSwitch Repository")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/openUC2/UC2-REST"},"UC2-REST Repository")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://gitlab.com/bionanoimaging/nanoimagingpack"},"NanoImagingPack"))))}d.isMDXComponent=!0},83526:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/qt_imswitch-77fdabbfb84eea166702f58802ab4b85.png"},66574:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/qt_load-7de7570702014423da66aed3993c283f.png"}}]);