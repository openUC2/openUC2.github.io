"use strict";(self.webpackChunkuc_2_docs=self.webpackChunkuc_2_docs||[]).push([[6593],{3905:(e,n,t)=>{t.d(n,{Zo:()=>f,kt:()=>d});var i=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var a=i.createContext({}),c=function(e){var n=i.useContext(a),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},f=function(e){var n=c(e.components);return i.createElement(a.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},u=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,a=e.parentName,f=l(e,["components","mdxType","originalType","parentName"]),u=c(t),d=r,g=u["".concat(a,".").concat(d)]||u[d]||p[d]||o;return t?i.createElement(g,s(s({ref:n},f),{},{components:t})):i.createElement(g,s({ref:n},f))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,s=new Array(o);s[0]=u;var l={};for(var a in n)hasOwnProperty.call(n,a)&&(l[a]=n[a]);l.originalType=e,l.mdxType="string"==typeof e?e:r,s[1]=l;for(var c=2;c<o;c++)s[c]=t[c];return i.createElement.apply(null,s)}return i.createElement.apply(null,t)}u.displayName="MDXCreateElement"},56849:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var i=t(87462),r=(t(67294),t(3905));const o={},s="UC2-REST",l={unversionedId:"Electronics/Advanced/UC2-REST/INTRO",id:"Electronics/Advanced/UC2-REST/INTRO",title:"UC2-REST",description:"This explains the basic functionality of the UC2-REST Python interface in conjunction with the UC2-ESP32 mainboard. This was mostly designed to interface with ImSwitch.",source:"@site/docs/04_Electronics/10_Advanced/02_UC2-REST/06_INTRO.md",sourceDirName:"04_Electronics/10_Advanced/02_UC2-REST",slug:"/Electronics/Advanced/UC2-REST/INTRO",permalink:"/docs/Electronics/Advanced/UC2-REST/INTRO",draft:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"REST commands",permalink:"/docs/Electronics/Advanced/UC2-REST/uc2e5.1"},next:{title:"UC2-REST: Messaging",permalink:"/docs/Electronics/Advanced/UC2-REST/ESP32_Messaging_Callback"}},a={},c=[],f={toc:c};function p(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,i.Z)({},f,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"uc2-rest"},"UC2-REST"),(0,r.kt)("p",null,"This explains the basic functionality of the UC2-REST Python interface in conjunction with the UC2-ESP32 mainboard. This was mostly designed to interface with ImSwitch."),(0,r.kt)("p",null,"The main repositories:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/openUC2/UC2-REST/"},"https://github.com/openUC2/UC2-REST/")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/youseetoo/uc2-esp32"},"https://github.com/youseetoo/uc2-esp32")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/openUC2/imswitch"},"https://github.com/openUC2/imswitch"))),(0,r.kt)("p",null,"Available modules:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},'    def __init__(self, host=None, port=31950, serialport=None, identity="UC2_Feather", baudrate=BAUDRATE, NLeds=64, SerialManager=None, DEBUG=False, logger=None):\n        \'\'\'\n        This client connects to the UC2-REST microcontroller that can be found here\n        https://github.com/openUC2/UC2-REST\n\n        generally speaking you send/receive JSON documents that will cause an:\n        1. action => "/XXX_act"\n        2. getting => "/XXX_get"\n\n        you can send commands through wifi/http or usb/serial\n        \'\'\'\n        if logger is None:\n            self.logger = Logger()\n        else:\n            self.logger = logger\n\n        # perhaps we are in the browser?\n        self.isPyScript = False\n\n        # initialize communication channel (# connect to wifi or usb)\n        if serialport is not None:\n            # use USB connection\n            self.serial = Serial(serialport, baudrate, parent=self, identity=identity, DEBUG=DEBUG)\n            self.is_serial = True\n            self.is_connected = self.serial.is_connected\n            self.serial.DEBUG = DEBUG\n        elif host is not None:\n            # use client in wireless mode\n            self.is_wifi = True\n            self.host = host\n            self.port = port\n\n            # check if host is up\n            self.logger.debug(f"Connecting to microscope {self.host}:{self.port}")\n            #self.is_connected = self.isConnected()\n        elif SerialManager is not None:\n            # we are trying to access the controller from .a web browser\n            self.serial = SerialManagerWrapper(SerialManager, parent=self)\n            self.isPyScript = True\n        else:\n            self.logger.error("No ESP32 device is connected - check IP or Serial port!")\n\n\n        if not self.isPyScript: from .updater import updater\n\n        # import libraries depending on API version\n        self.logger.debug("Using API version 2")        \n\n        #FIXME\n        #self.set_state(debug=False)\n\n        # initialize state\n        self.state = State(self)\n        if not self.isPyScript:\n            state = self.state.get_state()\n\n        # initialize config\n        if not self.isPyScript:\n            self.config = config(self)\n\n        # initialize cmdRecorder\n        self.cmdRecorder = cmdRecorder(self)\n\n        # initialize LED matrix\n        self.led = LedMatrix(self, NLeds=NLeds)\n\n        # initilize motor\n        self.motor = Motor(self)\n\n        # initialize rotator\n        self.rotator = Rotator(self)\n\n        # initiliaze homing\n        self.home = Home(self)\n\n        # initialize temperature\n        self.temperature = Temperature(self)\n\n        # initialize laser\n        self.state = State(self)\n\n        # initialize galvo\n        self.galvo = Galvo(self)\n\n        # initialize laser\n        self.laser = Laser(self)\n\n        # initialize wifi\n        self.wifi = Wifi(self)\n\n        # initialize camera\n        self.camera = Camera(self)\n\n        # initialize analog\n        self.analog = Analog(self)\n\n        # initialize digital out\n        self.digitalout = DigitalOut(self)\n\n        # initialize messaging\n        self.message = Message(self)\n\n        # initialize config\n        if False: # not self.isPyScript:\n            self.config = config(self)\n            try: self.pinConfig = self.config.loadConfigDevice()\n            except: self.pinConfig = None\n\n        # initialize updater\n        if not self.isPyScript:\n            try: self.updater = updater(parent=self)\n            except: self.updater = None\n\n        # initialize module controller\n        self.modules = Modules(parent=self)\n')))}p.isMDXComponent=!0}}]);