"use strict";(self.webpackChunkuc_2_docs=self.webpackChunkuc_2_docs||[]).push([[4055],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var i=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=i.createContext({}),m=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=m(e.components);return i.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=m(n),g=a,d=u["".concat(s,".").concat(g)]||u[g]||c[g]||r;return n?i.createElement(d,o(o({ref:t},p),{},{components:n})):i.createElement(d,o({ref:t},p))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var m=2;m<r;m++)o[m]=n[m];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},38103:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>r,metadata:()=>l,toc:()=>m});var i=n(87462),a=(n(67294),n(3905));const r={},o="ImSwitchClient Documentation",l={unversionedId:"ImSwitch/Advanced/Device-Specific/ImSwitch-Client",id:"ImSwitch/Advanced/Device-Specific/ImSwitch-Client",title:"ImSwitchClient Documentation",description:"Introduction",source:"@site/docs/05_ImSwitch/Advanced/05_Device-Specific/ImSwitch-Client.md",sourceDirName:"05_ImSwitch/Advanced/05_Device-Specific",slug:"/ImSwitch/Advanced/Device-Specific/ImSwitch-Client",permalink:"/docs/ImSwitch/Advanced/Device-Specific/ImSwitch-Client",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Install driver for Daheng Camera",permalink:"/docs/ImSwitch/Advanced/Device-Specific/Daheng-Camera"},next:{title:"Experimental Features",permalink:"/docs/ImSwitch/Advanced/Experimental/"}},s={},m=[{value:"Introduction",id:"introduction",level:2},{value:"Try on GOOGLE COLAB:",id:"try-on-google-colab",level:2},{value:"Features",id:"features",level:2},{value:"Installation",id:"installation",level:2},{value:"Getting Started",id:"getting-started",level:2},{value:"Initializing the Client",id:"initializing-the-client",level:3},{value:"Example: Moving a Stage and Acquiring an Image",id:"example-moving-a-stage-and-acquiring-an-image",level:3},{value:"Laser Control Example",id:"laser-control-example",level:3},{value:"Recording an Image",id:"recording-an-image",level:3},{value:"Setting Live View",id:"setting-live-view",level:3},{value:"API Overview",id:"api-overview",level:2},{value:"Positioners Manager",id:"positioners-manager",level:3},{value:"Lasers Manager",id:"lasers-manager",level:3},{value:"Recording Manager",id:"recording-manager",level:3},{value:"SaveFormat Enum",id:"saveformat-enum",level:4},{value:"Settings Manager",id:"settings-manager",level:3},{value:"View Manager",id:"view-manager",level:3},{value:"LED Matrix Manager",id:"led-matrix-manager",level:3},{value:"Communication Manager",id:"communication-manager",level:3},{value:"Experiment Controller",id:"experiment-controller",level:3},{value:"HistoScan Manager",id:"histoscan-manager",level:3},{value:"Objective Controller",id:"objective-controller",level:3},{value:"Advanced Examples",id:"advanced-examples",level:2},{value:"XY Scanning and Image Stitching",id:"xy-scanning-and-image-stitching",level:3},{value:"Autofocus Example",id:"autofocus-example",level:3},{value:"Time-lapse Recording with LED Control",id:"time-lapse-recording-with-led-control",level:3},{value:"Multi-Position Experiment",id:"multi-position-experiment",level:3},{value:"Contributing",id:"contributing",level:2},{value:"License",id:"license",level:2}],p={toc:m};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"imswitchclient-documentation"},"ImSwitchClient Documentation"),(0,a.kt)("h2",{id:"introduction"},"Introduction"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"ImSwitchClient")," is a Python wrapper designed for interacting with the ImSwitch REST API, enabling remote control over ImSwitch functionalities, such as stage positioning, laser control, and image acquisition. This client simplifies API interactions and allows seamless integration into Python scripts and Jupyter Notebooks."),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://pypi.python.org/pypi/imswitchclient"},(0,a.kt)("img",{parentName:"a",src:"https://img.shields.io/pypi/v/imswitchclient.svg",alt:"PyPI Version"}))),(0,a.kt)("h2",{id:"try-on-google-colab"},"Try on GOOGLE COLAB:"),(0,a.kt)("p",null,"Hit this link and test: "),(0,a.kt)("a",{target:"_blank",href:"https://colab.research.google.com/drive/1W3Jcw4gFn0jtQXa3_2aCtJYJglMNGkXr?usp=sharing"},(0,a.kt)("img",{src:"https://colab.research.google.com/assets/colab-badge.svg",alt:"Open In Colab"})),(0,a.kt)("a",{target:"_blank",href:"https://colab.research.google.com/github/openUC2/imswitchclient/blob/main/examples/StageCalibration.ipynb"},(0,a.kt)("img",{src:"https://colab.research.google.com/assets/colab-badge.svg",alt:"Open In Colab"})),(0,a.kt)("h2",{id:"features"},"Features"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Remote Control"),": Interface with ImSwitch through REST API endpoints."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Comprehensive API Access"),": Easily control positioners, lasers, detectors, and imaging settings."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Interactive API Exploration"),": Utilize the FastAPI Swagger UI at ",(0,a.kt)("inlineCode",{parentName:"li"},"http://localhost:8000/docs"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Modular Design"),": Includes managers for lasers, positioners, image acquisition, and more."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Open Source"),": Inspired by OpenFlexure Client, freely available under the MIT license.")),(0,a.kt)("h2",{id:"installation"},"Installation"),(0,a.kt)("p",null,"You can install ",(0,a.kt)("inlineCode",{parentName:"p"},"ImSwitchClient")," via pip:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"pip install imswitchclient\n")),(0,a.kt)("h2",{id:"getting-started"},"Getting Started"),(0,a.kt)("h3",{id:"initializing-the-client"},"Initializing the Client"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'import imswitchclient.ImSwitchClient as imc\n\n# Initialize the client\nclient = imc.ImSwitchClient(host="0.0.0.0", isHttps=True, port=8001)\n')),(0,a.kt)("h3",{id:"example-moving-a-stage-and-acquiring-an-image"},"Example: Moving a Stage and Acquiring an Image"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'import numpy as np\nimport matplotlib.pyplot as plt\nimport time\n\n# Retrieve positioner names\npositioner_names = client.positionersManager.getAllDeviceNames()\npositioner_name = positioner_names[0]\n\n# Get current position\ncurrent_positions = client.positionersManager.getPositionerPositions()[positioner_name]\ninitial_position = (current_positions["X"], current_positions["Y"])\n\n# Turn on illumination\nlaser_name = client.lasersManager.getLaserNames()[0]\nclient.lasersManager.setLaserActive(laser_name, True)\nclient.lasersManager.setLaserValue(laser_name, 512)\n\n# Move the stage and capture an image\ndef capture_image_at_position(x, y):\n    client.positionersManager.movePositioner(positioner_name, "X", x, is_absolute=True, is_blocking=True)\n    client.positionersManager.movePositioner(positioner_name, "Y", y, is_absolute=True, is_blocking=True)\n    last_frame = client.recordingManager.snapNumpyToFastAPI()\n    plt.imshow(last_frame)\n    plt.show()\n\n# Example scanning\nfor ix in range(5):\n    for iy in range(5):\n        new_x = initial_position[0] + ix * 50\n        new_y = initial_position[1] + iy * 50\n        capture_image_at_position(new_x, new_y)\n\n# Return stage to initial position\nclient.positionersManager.movePositioner(positioner_name, "X", initial_position[0], is_absolute=True, is_blocking=True)\nclient.positionersManager.movePositioner(positioner_name, "Y", initial_position[1], is_absolute=True, is_blocking=True)\n')),(0,a.kt)("h3",{id:"laser-control-example"},"Laser Control Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"laser_name = client.lasersManager.getLaserNames()[0]\nclient.lasersManager.setLaserActive(laser_name, True)\nclient.lasersManager.setLaserValue(laser_name, 800)\n\n# Verify laser status\nprint(client.lasersManager.getLaserNames())\nclient.lasersManager.setLaserActive(laser_name, False)\n")),(0,a.kt)("h3",{id:"recording-an-image"},"Recording an Image"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"# Take a snapshot\nimage = client.recordingManager.snapNumpyToFastAPI()\nplt.imshow(image)\nplt.show()\n")),(0,a.kt)("h3",{id:"setting-live-view"},"Setting Live View"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"client.viewManager.setLiveViewActive(True)\nclient.viewManager.setLiveViewCrosshairVisible(True)\nclient.viewManager.setLiveViewGridVisible(False)\n")),(0,a.kt)("h2",{id:"api-overview"},"API Overview"),(0,a.kt)("p",null,"The ImSwitch API provides access to various components:"),(0,a.kt)("h3",{id:"positioners-manager"},"Positioners Manager"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"getAllDeviceNames()")," - Get all available positioners."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"getPositionerPositions()")," - Get current position."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"movePositioner(name, axis, value, is_absolute, is_blocking)")," - Move the stage."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"homeAxis(name, axis, is_blocking)")," - Home the positioner.")),(0,a.kt)("h3",{id:"lasers-manager"},"Lasers Manager"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"getLaserNames()")," - Get available lasers."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"setLaserActive(name, status)")," - Turn laser on/off."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"setLaserValue(name, value)")," - Set laser intensity.")),(0,a.kt)("h3",{id:"recording-manager"},"Recording Manager"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"snapNumpyToFastAPI(resizeFactor)")," - Capture an image as numpy array."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"startRecording(save_format)")," - Begin recording with optional save format (SaveFormat enum)."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"stopRecording()")," - Stop recording."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"snapImageToPath(file_name)")," - Snap image and save to specified path."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"startVideoStream()")," - Start MJPEG video stream."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"stopVideoStream()")," - Stop MJPEG video stream."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"getVideoFrame()")," - Get current frame from video stream.")),(0,a.kt)("h4",{id:"saveformat-enum"},"SaveFormat Enum"),(0,a.kt)("p",null,"The recording manager supports multiple save formats:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"SaveFormat.TIFF")," - TIFF format"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"SaveFormat.HDF5")," - HDF5 format"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"SaveFormat.ZARR")," - ZARR format"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"SaveFormat.MP4")," - MP4 video format"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"SaveFormat.PNG")," - PNG format"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"SaveFormat.JPG")," - JPEG format")),(0,a.kt)("h3",{id:"settings-manager"},"Settings Manager"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"getDetectorNames()")," - Get available detector names."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"setDetectorBinning(detector_name, binning)")," - Set detector binning."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"setDetectorExposureTime(detector_name, exposure_time)")," - Set detector exposure time."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"setDetectorGain(detector_name, gain)")," - Set detector gain."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"setDetectorParameter(detector_name, parameter_name, value)")," - Set generic detector parameter."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"setDetectorROI(detector_name, x, y, w, h)")," - Set detector Region of Interest.")),(0,a.kt)("h3",{id:"view-manager"},"View Manager"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"setLiveViewActive(active)")," - Enable/disable live view."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"setLiveViewCrosshairVisible(visible)")," - Show/hide crosshair in live view."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"setLiveViewGridVisible(visible)")," - Show/hide grid in live view.")),(0,a.kt)("h3",{id:"led-matrix-manager"},"LED Matrix Manager"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"setAllLED(state, intensity)")," - Set all LEDs with specified state and intensity."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"setAllLEDOff()")," - Turn off all LEDs."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"setAllLEDOn()")," - Turn on all LEDs."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"setIntensity(intensity)")," - Set LED intensity."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"setLED(led_id, state)")," - Set specific LED with ID and state."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"setSpecial(pattern, intensity, get_return)")," - Set special LED pattern.")),(0,a.kt)("h3",{id:"communication-manager"},"Communication Manager"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"acquireImage()")," - Acquire an image through communication channel."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"getImage()")," - Get an image from communication channel.")),(0,a.kt)("h3",{id:"experiment-controller"},"Experiment Controller"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"forceStopExperiment()")," - Force stop current experiment."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"getExperimentStatus()")," - Get current experiment status."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"getHardwareParameters()")," - Get hardware parameters."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"pauseWorkflow()")," - Pause current workflow."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"resumeExperiment()")," - Resume paused experiment."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"stopExperiment()")," - Stop current experiment."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"startWellplateExperiment(experiment_data)")," - Start wellplate experiment."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"startWellplateExperimentWithScanCoordinates(...)")," - Start wellplate experiment with scan coordinates.")),(0,a.kt)("h3",{id:"histoscan-manager"},"HistoScan Manager"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"stopHistoScan()")," - Stop current histo scan."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"startStageScanningPositionlistbased(positionList, nTimes, tPeriod, illuSource)")," - Start stage scanning."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"startStageMapping()")," - Start stage mapping."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"getStatusScanRunning()")," - Get scan running status.")),(0,a.kt)("h3",{id:"objective-controller"},"Objective Controller"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"calibrateObjective(homeDirection, homePolarity)")," - Calibrate objective."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"getCurrentObjective()")," - Get current objective."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"getStatus()")," - Get objective status."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"moveToObjective(slot)")," - Move to specific objective slot."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"setPositions(x1, x2, z1, z2, isBlocking)")," - Set objective positions.")),(0,a.kt)("h2",{id:"advanced-examples"},"Advanced Examples"),(0,a.kt)("h3",{id:"xy-scanning-and-image-stitching"},"XY Scanning and Image Stitching"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"import imswitchclient.ImSwitchClient as imc\nfrom imswitchclient.recordingManager import SaveFormat\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Initialize client\nclient = imc.ImSwitchClient(host=\"192.168.1.100\", port=8001)\n\n# XY scanning parameters\nstart_x, start_y = 0, 0  # Starting position in \xb5m\nstep_size = 100  # Step size in \xb5m\nnx, ny = 5, 5  # Number of steps in X and Y\n\n# Get positioner name\npositioner_names = client.positionersManager.getAllDeviceNames()\npositioner_name = positioner_names[0]\n\n# Setup recording\nclient.recordingManager.startRecording(SaveFormat.TIFF)\n\n# Perform XY scan\nimages = []\npositions = []\n\nfor i in range(nx):\n    for j in range(ny):\n        # Calculate target position\n        target_x = start_x + i * step_size\n        target_y = start_y + j * step_size\n        \n        # Move to position\n        client.positionersManager.movePositioner(\n            positioner_name, \"X\", target_x, is_absolute=True, is_blocking=True\n        )\n        client.positionersManager.movePositioner(\n            positioner_name, \"Y\", target_y, is_absolute=True, is_blocking=True\n        )\n        \n        # Capture image\n        image = client.recordingManager.snapNumpyToFastAPI()\n        images.append(image)\n        positions.append((target_x, target_y))\n\n# Stop recording\nclient.recordingManager.stopRecording()\n\n# Simple stitching (concatenate images)\nstitched_image = np.zeros((nx * image.shape[0], ny * image.shape[1]))\nfor idx, img in enumerate(images):\n    i, j = idx // ny, idx % ny\n    start_row, end_row = i * img.shape[0], (i + 1) * img.shape[0]\n    start_col, end_col = j * img.shape[1], (j + 1) * img.shape[1]\n    stitched_image[start_row:end_row, start_col:end_col] = img\n\n# Display result\nplt.figure(figsize=(12, 8))\nplt.imshow(stitched_image, cmap='gray')\nplt.title('Stitched XY Scan')\nplt.axis('off')\nplt.show()\n")),(0,a.kt)("h3",{id:"autofocus-example"},"Autofocus Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'import imswitchclient.ImSwitchClient as imc\nimport numpy as np\n\n# Initialize client\nclient = imc.ImSwitchClient(host="192.168.1.100", port=8001)\n\ndef calculate_focus_score(image):\n    """Calculate focus score using Laplacian variance"""\n    gray = image if len(image.shape) == 2 else np.mean(image, axis=2)\n    return np.var(np.gradient(gray))\n\ndef autofocus_scan(client, positioner_name, z_min, z_max, z_steps=20):\n    """Perform autofocus by scanning Z positions"""\n    z_positions = np.linspace(z_min, z_max, z_steps)\n    focus_scores = []\n    \n    for z_pos in z_positions:\n        # Move to Z position\n        client.positionersManager.movePositioner(\n            positioner_name, "Z", z_pos, is_absolute=True, is_blocking=True\n        )\n        \n        # Capture image and calculate focus score\n        image = client.recordingManager.snapNumpyToFastAPI()\n        score = calculate_focus_score(image)\n        focus_scores.append(score)\n        \n        print(f"Z={z_pos:.2f} \xb5m, Focus Score={score:.2f}")\n    \n    # Find best focus position\n    best_idx = np.argmax(focus_scores)\n    best_z = z_positions[best_idx]\n    \n    # Move to best focus\n    client.positionersManager.movePositioner(\n        positioner_name, "Z", best_z, is_absolute=True, is_blocking=True\n    )\n    \n    print(f"Best focus at Z={best_z:.2f} \xb5m")\n    return best_z, focus_scores\n\n# Usage example\npositioner_names = client.positionersManager.getAllDeviceNames()\npositioner_name = positioner_names[0]\n\n# Perform autofocus\nbest_z, scores = autofocus_scan(client, positioner_name, z_min=0, z_max=100, z_steps=20)\n')),(0,a.kt)("h3",{id:"time-lapse-recording-with-led-control"},"Time-lapse Recording with LED Control"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'import imswitchclient.ImSwitchClient as imc\nfrom imswitchclient.recordingManager import SaveFormat\nimport time\n\n# Initialize client\nclient = imc.ImSwitchClient(host="192.168.1.100", port=8001)\n\n# Setup LED illumination\nclient.ledMatrixManager.setAllLEDOff()\nclient.ledMatrixManager.setSpecial("brightfield", intensity=128)\n\n# Configure detector settings\ndetector_names = client.settingsManager.getDetectorNames()\nif detector_names:\n    detector = detector_names[0]\n    client.settingsManager.setDetectorExposureTime(detector, 50.0)\n    client.settingsManager.setDetectorGain(detector, 1.0)\n\n# Setup time-lapse parameters\ninterval_seconds = 60  # 1 minute intervals\ntotal_duration_minutes = 60  # 1 hour total\nnum_timepoints = total_duration_minutes\n\n# Start recording\nclient.recordingManager.startRecording(SaveFormat.TIFF)\n\nfor timepoint in range(num_timepoints):\n    print(f"Capturing timepoint {timepoint + 1}/{num_timepoints}")\n    \n    # Capture image\n    image_path = f"timelapse_t{timepoint:03d}.tiff"\n    client.recordingManager.snapImageToPath(image_path)\n    \n    # Wait for next timepoint (except for the last one)\n    if timepoint < num_timepoints - 1:\n        time.sleep(interval_seconds)\n\n# Stop recording and turn off LEDs\nclient.recordingManager.stopRecording()\nclient.ledMatrixManager.setAllLEDOff()\nprint("Time-lapse recording completed!")\n')),(0,a.kt)("h3",{id:"multi-position-experiment"},"Multi-Position Experiment"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'import imswitchclient.ImSwitchClient as imc\nfrom imswitchclient.recordingManager import SaveFormat\n\n# Initialize client\nclient = imc.ImSwitchClient(host="192.168.1.100", port=8001)\n\n# Define multiple positions of interest\npositions = [\n    {"name": "sample1", "x": 1000, "y": 2000, "z": 50},\n    {"name": "sample2", "x": 3000, "y": 4000, "z": 52},\n    {"name": "sample3", "x": 5000, "y": 1000, "z": 48},\n]\n\n# Get positioner\npositioner_names = client.positionersManager.getAllDeviceNames()\npositioner_name = positioner_names[0]\n\n# Start recording session\nclient.recordingManager.startRecording(SaveFormat.HDF5)\n\nfor pos in positions:\n    print(f"Moving to position: {pos[\'name\']}")\n    \n    # Move to position\n    client.positionersManager.movePositioner(\n        positioner_name, "X", pos["x"], is_absolute=True, is_blocking=True\n    )\n    client.positionersManager.movePositioner(\n        positioner_name, "Y", pos["y"], is_absolute=True, is_blocking=True\n    )\n    client.positionersManager.movePositioner(\n        positioner_name, "Z", pos["z"], is_absolute=True, is_blocking=True\n    )\n    \n    # Capture multiple images with different settings\n    for channel in ["brightfield", "fluorescence"]:\n        if channel == "brightfield":\n            client.ledMatrixManager.setSpecial("brightfield", intensity=100)\n        else:\n            client.ledMatrixManager.setSpecial("fluorescence", intensity=200)\n        \n        # Capture image\n        image_name = f"{pos[\'name\']}_{channel}.tiff"\n        client.recordingManager.snapImageToPath(image_name)\n\n# Clean up\nclient.recordingManager.stopRecording()\nclient.ledMatrixManager.setAllLEDOff()\nprint("Multi-position experiment completed!")\n')),(0,a.kt)("h2",{id:"contributing"},"Contributing"),(0,a.kt)("p",null,"Contributions are welcome! Visit the GitHub repository for details: ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/openUC2/imswitchclient"},"https://github.com/openUC2/imswitchclient")),(0,a.kt)("h2",{id:"license"},"License"),(0,a.kt)("p",null,"This project is licensed under the MIT License."))}c.isMDXComponent=!0}}]);