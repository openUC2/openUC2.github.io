"use strict";(self.webpackChunkuc_2_docs=self.webpackChunkuc_2_docs||[]).push([[6050],{3905:(e,t,i)=>{i.d(t,{Zo:()=>p,kt:()=>d});var n=i(67294);function o(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function r(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function a(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?r(Object(i),!0).forEach((function(t){o(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):r(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function l(e,t){if(null==e)return{};var i,n,o=function(e,t){if(null==e)return{};var i,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)i=r[n],t.indexOf(i)>=0||(o[i]=e[i]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)i=r[n],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(o[i]=e[i])}return o}var s=n.createContext({}),c=function(e){var t=n.useContext(s),i=t;return e&&(i="function"==typeof e?e(t):a(a({},t),e)),i},p=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var i=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(i),d=o,v=u["".concat(s,".").concat(d)]||u[d]||m[d]||r;return i?n.createElement(v,a(a({ref:t},p),{},{components:i})):n.createElement(v,a({ref:t},p))}));function d(e,t){var i=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=i.length,a=new Array(r);a[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var c=2;c<r;c++)a[c]=i[c];return n.createElement.apply(null,a)}return n.createElement.apply(null,i)}u.displayName="MDXCreateElement"},92417:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>m,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var n=i(87462),o=(i(67294),i(3905));const r={id:"Objective",title:"Objective"},a="UC2-ESP Objective Controller API Documentation",l={unversionedId:"Electronics/UC2-ESP/APIDescription/Objective",id:"Electronics/UC2-ESP/APIDescription/Objective",title:"Objective",description:"The UC2-ESP firmware provides an API to control the objective position, allowing precise switching between predefined objective lens positions (e.g., x1, x2) via a motorized stage. This controller manages calibration (homing), explicit movements, toggling between two positions, and setting of objective positions.",source:"@site/docs/03_Electronics/UC2-ESP/APIDescription/Objective.md",sourceDirName:"03_Electronics/UC2-ESP/APIDescription",slug:"/Electronics/UC2-ESP/APIDescription/Objective",permalink:"/docs/Electronics/UC2-ESP/APIDescription/Objective",draft:!1,tags:[],version:"current",frontMatter:{id:"Objective",title:"Objective"},sidebar:"tutorialSidebar",previous:{title:"Motor",permalink:"/docs/Electronics/UC2-ESP/APIDescription/Motor"},next:{title:"PinConfig",permalink:"/docs/Electronics/UC2-ESP/APIDescription/PinConfig"}},s={},c=[{value:"Endpoint",id:"endpoint",level:2},{value:"Request Format",id:"request-format",level:2},{value:"JSON Parameters Description",id:"json-parameters-description",level:2},{value:"Example Requests",id:"example-requests",level:2},{value:"Calibrate objective stage",id:"calibrate-objective-stage",level:3},{value:"Move explicitly to position x1",id:"move-explicitly-to-position-x1",level:3},{value:"Toggle between objective positions",id:"toggle-between-objective-positions",level:3},{value:"Set objective positions",id:"set-objective-positions",level:3},{value:"Endpoint to Retrieve Objective State",id:"endpoint-to-retrieve-objective-state",level:2},{value:"Example Request",id:"example-request",level:3},{value:"Response Format",id:"response-format",level:3},{value:"Conclusion",id:"conclusion",level:2}],p={toc:c};function m(e){let{components:t,...i}=e;return(0,o.kt)("wrapper",(0,n.Z)({},p,i,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"uc2-esp-objective-controller-api-documentation"},"UC2-ESP Objective Controller API Documentation"),(0,o.kt)("p",null,"The UC2-ESP firmware provides an API to control the objective position, allowing precise switching between predefined objective lens positions (e.g., x1, x2) via a motorized stage. This controller manages calibration (homing), explicit movements, toggling between two positions, and setting of objective positions."),(0,o.kt)("h2",{id:"endpoint"},"Endpoint"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Endpoint:")," ",(0,o.kt)("inlineCode",{parentName:"p"},"/objective_act")),(0,o.kt)("p",null,"Used to control the objective stage movements and calibration."),(0,o.kt)("h2",{id:"request-format"},"Request Format"),(0,o.kt)("p",null,"The API expects a JSON document structured as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "task": "/objective_act",\n  "qid": 1,\n  "calibrate": 1,\n  "homeDirection": -1,\n  "homeEndStopPolarity": 0,\n  "move": 1,\n  "toggle": 1,\n  "obj": 1,\n  "speed": 20000,\n  "accel": 20000,\n  "x1": 1000,\n  "x2": 2000\n}\n')),(0,o.kt)("h2",{id:"json-parameters-description"},"JSON Parameters Description"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"task"),": Set to ",(0,o.kt)("inlineCode",{parentName:"li"},"/objective_act")," to perform objective actions."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"qid"),": (optional) Queue ID for tracking commands."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"calibrate"),": (optional) Initiates homing (calibration) procedure."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"homeDirection"),": (optional) Direction of homing (-1 or 1)."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"homeEndStopPolarity"),": (optional) Polarity of endstop sensor during homing (0 or -1)."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"move"),": (optional) Explicitly move to a specific position."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"toggle"),": (optional) Toggle between two predefined positions."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"obj"),": Specifies target objective position (0: home/calibrate, 1: x1 position, 2: x2 position)."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"speed"),": (optional) Speed of the movement (steps/sec)."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"accel"),": (optional) Acceleration (steps/sec\xb2)."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"x1"),": (optional) Define or set the first objective position. Set to ",(0,o.kt)("inlineCode",{parentName:"li"},"-1")," to use current motor position."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"x2"),": (optional) Define or set the second objective position. Set to ",(0,o.kt)("inlineCode",{parentName:"li"},"-1")," to use current motor position.")),(0,o.kt)("h2",{id:"example-requests"},"Example Requests"),(0,o.kt)("h3",{id:"calibrate-objective-stage"},"Calibrate objective stage"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{"task":"/objective_act","calibrate":1}\n')),(0,o.kt)("h3",{id:"move-explicitly-to-position-x1"},"Move explicitly to position x1"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{"task":"/objective_act","move":1,"obj":1,"speed":20000,"accel":20000}\n')),(0,o.kt)("h3",{id:"toggle-between-objective-positions"},"Toggle between objective positions"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{"task":"/objective_act","toggle":1,"speed":20000,"accel":20000}\n')),(0,o.kt)("h3",{id:"set-objective-positions"},"Set objective positions"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{"task":"/objective_act","x1":1000,"x2":2000}\n')),(0,o.kt)("h2",{id:"endpoint-to-retrieve-objective-state"},"Endpoint to Retrieve Objective State"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Endpoint:")," ",(0,o.kt)("inlineCode",{parentName:"p"},"/objective_get")),(0,o.kt)("p",null,"Returns the current configuration and state of the objective controller."),(0,o.kt)("h3",{id:"example-request"},"Example Request"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{"task":"/objective_get"}\n')),(0,o.kt)("h3",{id:"response-format"},"Response Format"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "objective":{\n    "x1":1000,\n    "x2":2000,\n    "pos":1000,\n    "isHomed":1,\n    "state":1,\n    "isRunning":0\n  }\n}\n')),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"x1"),": Current stored position for objective slot 1."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"x2"),": Current stored position for objective slot 2."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"pos"),": Current position of the objective motor."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"isHomed"),": Indicates if the objective stage has been calibrated."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"state"),": Current active objective position slot (1 or 2)."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"isRunning"),": Indicates if the objective motor is currently moving (1 if moving, 0 otherwise).")),(0,o.kt)("h2",{id:"conclusion"},"Conclusion"),(0,o.kt)("p",null,"The Objective Controller API provides a comprehensive interface for managing objective lens positions, including homing, position setting, explicit movements, and toggling between predefined positions. This ensures precision and reliability in automated microscopy tasks."))}m.isMDXComponent=!0}}]);