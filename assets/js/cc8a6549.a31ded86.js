"use strict";(self.webpackChunkuc_2_docs=self.webpackChunkuc_2_docs||[]).push([[5147],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>p});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),d=u(n),p=o,k=d["".concat(s,".").concat(p)]||d[p]||c[p]||r;return n?a.createElement(k,i(i({ref:t},m),{},{components:n})):a.createElement(k,i({ref:t},m))}));function p(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var u=2;u<r;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},19812:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var a=n(87462),o=(n(67294),n(3905));const r={},i="UC2-ESP32 Firmware",l={unversionedId:"Electronics/Advanced/UC2-ESP32/README",id:"Electronics/Advanced/UC2-ESP32/README",title:"UC2-ESP32 Firmware",description:"Advanced documentation for UC2-ESP32 firmware development, customization, and optimization.",source:"@site/docs/04_Electronics/10_Advanced/01_UC2-ESP32/README.md",sourceDirName:"04_Electronics/10_Advanced/01_UC2-ESP32",slug:"/Electronics/Advanced/UC2-ESP32/",permalink:"/docs/Electronics/Advanced/UC2-ESP32/",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Advanced Electronics",permalink:"/docs/Electronics/Advanced/"},next:{title:"UC2-ESP Firmware for the openUC2 UC2e electronics",permalink:"/docs/Electronics/Advanced/UC2-ESP32/Setup_Buildenvironment"}},s={},u=[{value:"Overview",id:"overview",level:2},{value:"Available Documentation",id:"available-documentation",level:2},{value:"Getting Started",id:"getting-started",level:3},{value:"Development",id:"development",level:3},{value:"Control and Integration",id:"control-and-integration",level:3},{value:"Advanced Topics",id:"advanced-topics",level:3},{value:"Quick Reference",id:"quick-reference",level:2},{value:"Basic Commands",id:"basic-commands",level:3},{value:"Module Configuration",id:"module-configuration",level:3},{value:"Supported Hardware",id:"supported-hardware",level:2},{value:"Motor Control",id:"motor-control",level:3},{value:"Illumination",id:"illumination",level:3},{value:"Sensors",id:"sensors",level:3},{value:"Communication",id:"communication",level:3},{value:"Development Workflow",id:"development-workflow",level:2},{value:"1. Environment Setup",id:"1-environment-setup",level:3},{value:"2. Configuration",id:"2-configuration",level:3},{value:"3. Build and Flash",id:"3-build-and-flash",level:3},{value:"Architecture Overview",id:"architecture-overview",level:2},{value:"Module System",id:"module-system",level:3},{value:"Communication Flow",id:"communication-flow",level:3},{value:"Resource Management",id:"resource-management",level:3},{value:"Customization Examples",id:"customization-examples",level:2},{value:"Adding a Custom Sensor",id:"adding-a-custom-sensor",level:3},{value:"Custom Communication Protocol",id:"custom-communication-protocol",level:3},{value:"Performance Optimization",id:"performance-optimization",level:2},{value:"Memory Usage",id:"memory-usage",level:3},{value:"CPU Optimization",id:"cpu-optimization",level:3},{value:"Communication Speed",id:"communication-speed",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues",id:"common-issues",level:3},{value:"Debug Tools",id:"debug-tools",level:3},{value:"Contributing",id:"contributing",level:2},{value:"Development Guidelines",id:"development-guidelines",level:3},{value:"Submission Process",id:"submission-process",level:3},{value:"Related Resources",id:"related-resources",level:2}],m={toc:u};function c(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"uc2-esp32-firmware"},"UC2-ESP32 Firmware"),(0,o.kt)("p",null,"Advanced documentation for UC2-ESP32 firmware development, customization, and optimization."),(0,o.kt)("h2",{id:"overview"},"Overview"),(0,o.kt)("p",null,"The UC2-ESP32 firmware is a modular, real-time control system for UC2 hardware components. It provides:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Modular Architecture"),": Compile only the modules you need"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Real-time Control"),": Microsecond-precision hardware control"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Multi-Protocol Communication"),": Serial, WiFi, Bluetooth, I2C"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Extensible Design"),": Easy to add new hardware modules"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Resource Optimization"),": Efficient memory and CPU usage")),(0,o.kt)("h2",{id:"available-documentation"},"Available Documentation"),(0,o.kt)("h3",{id:"getting-started"},"Getting Started"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("a",{parentName:"strong",href:"./Quick-Start.md"},"Quick Start Guide"))," - Flash firmware and basic setup"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("a",{parentName:"strong",href:"/docs/Electronics/Advanced/UC2-ESP32/Setup_Buildenvironment"},"Build Environment Setup"))," - Development environment configuration"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("a",{parentName:"strong",href:"/docs/Electronics/Advanced/UC2-ESP32/uc2e8"},"Firmware Flashing"))," - Flash firmware to ESP32")),(0,o.kt)("h3",{id:"development"},"Development"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("a",{parentName:"strong",href:"/docs/Electronics/Advanced/UC2-ESP32/UC2_Firmware_Description"},"Firmware Description"))," - Architecture and module system"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("a",{parentName:"strong",href:"./Hardware-Modules.md"},"Hardware Modules"))," - Creating custom hardware modules"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("a",{parentName:"strong",href:"./Communication.md"},"Communication Protocols"))," - Protocol implementation details")),(0,o.kt)("h3",{id:"control-and-integration"},"Control and Integration"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("a",{parentName:"strong",href:"/docs/Electronics/Advanced/UC2-ESP32/uc2e7"},"ESP32 Control"))," - Basic control methods"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("a",{parentName:"strong",href:"/docs/Electronics/Advanced/UC2-ESP32/Controlling_the_ESP32_APP"},"ESP32 App Control"))," - Mobile app integration"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("a",{parentName:"strong",href:"/docs/Electronics/Advanced/UC2-ESP32/uc2e5.2"},"Python Commands"))," - Python control interface")),(0,o.kt)("h3",{id:"advanced-topics"},"Advanced Topics"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("a",{parentName:"strong",href:"./APIDescription/"},"API Reference"))," - Complete firmware API"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("a",{parentName:"strong",href:"./Optimization.md"},"Performance Optimization"))," - Memory and speed optimization"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("a",{parentName:"strong",href:"./Custom-Modules.md"},"Custom Module Development"))," - Advanced module creation")),(0,o.kt)("h2",{id:"quick-reference"},"Quick Reference"),(0,o.kt)("h3",{id:"basic-commands"},"Basic Commands"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'// Get system status\n{"task": "/state_get"}\n\n// Control LED\n{"task": "/led_act", "led": 0, "intensity": 100}\n\n// Move motor\n{"task": "/motor_act", "motor": 0, "direction": 1, "steps": 1000}\n\n// Read sensors\n{"task": "/sensor_get"}\n')),(0,o.kt)("h3",{id:"module-configuration"},"Module Configuration"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"// Enable/disable modules in config.h\n#define MODULE_MOTOR 1\n#define MODULE_LED 1\n#define MODULE_LASER 1\n#define MODULE_WIFI 1\n#define MODULE_BLUETOOTH 0\n")),(0,o.kt)("h2",{id:"supported-hardware"},"Supported Hardware"),(0,o.kt)("h3",{id:"motor-control"},"Motor Control"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Stepper motors for XYZ stages"),(0,o.kt)("li",{parentName:"ul"},"DC motors with encoder feedback"),(0,o.kt)("li",{parentName:"ul"},"Servo motors for precise positioning"),(0,o.kt)("li",{parentName:"ul"},"Focus control systems")),(0,o.kt)("h3",{id:"illumination"},"Illumination"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Individual LEDs"),(0,o.kt)("li",{parentName:"ul"},"LED arrays and matrices"),(0,o.kt)("li",{parentName:"ul"},"Laser diodes with safety features"),(0,o.kt)("li",{parentName:"ul"},"Structured illumination patterns")),(0,o.kt)("h3",{id:"sensors"},"Sensors"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Temperature and humidity sensors"),(0,o.kt)("li",{parentName:"ul"},"Pressure sensors"),(0,o.kt)("li",{parentName:"ul"},"Optical encoders"),(0,o.kt)("li",{parentName:"ul"},"Custom analog/digital sensors")),(0,o.kt)("h3",{id:"communication"},"Communication"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"USB Serial (default)"),(0,o.kt)("li",{parentName:"ul"},"WiFi/HTTP"),(0,o.kt)("li",{parentName:"ul"},"Bluetooth Classic and BLE"),(0,o.kt)("li",{parentName:"ul"},"I2C for auxiliary devices")),(0,o.kt)("h2",{id:"development-workflow"},"Development Workflow"),(0,o.kt)("h3",{id:"1-environment-setup"},"1. Environment Setup"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"# Install PlatformIO\npip install platformio\n\n# Clone firmware repository\ngit clone https://github.com/youseetoo/uc2-esp32\ncd uc2-esp32\n")),(0,o.kt)("h3",{id:"2-configuration"},"2. Configuration"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"# Copy configuration template\ncp config_template.h config.h\n\n# Edit configuration for your hardware\nnano config.h\n")),(0,o.kt)("h3",{id:"3-build-and-flash"},"3. Build and Flash"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"# Build firmware\npio run\n\n# Flash to ESP32\npio run --target upload\n\n# Monitor serial output\npio device monitor\n")),(0,o.kt)("h2",{id:"architecture-overview"},"Architecture Overview"),(0,o.kt)("h3",{id:"module-system"},"Module System"),(0,o.kt)("p",null,"Each hardware module implements standard functions:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"setup()"),": Initialize hardware"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"loop()"),": Continuous background tasks"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"act()"),": Execute commands"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"get()"),": Return status/data")),(0,o.kt)("h3",{id:"communication-flow"},"Communication Flow"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Receive JSON command via Serial/WiFi"),(0,o.kt)("li",{parentName:"ol"},"Parse command and route to appropriate module"),(0,o.kt)("li",{parentName:"ol"},"Execute hardware action"),(0,o.kt)("li",{parentName:"ol"},"Return JSON response")),(0,o.kt)("h3",{id:"resource-management"},"Resource Management"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Modular compilation reduces memory usage"),(0,o.kt)("li",{parentName:"ul"},"Task scheduling optimizes CPU usage"),(0,o.kt)("li",{parentName:"ul"},"Interrupt-driven I/O minimizes latency"),(0,o.kt)("li",{parentName:"ul"},"Power management for battery operation")),(0,o.kt)("h2",{id:"customization-examples"},"Customization Examples"),(0,o.kt)("h3",{id:"adding-a-custom-sensor"},"Adding a Custom Sensor"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'// custom_sensor.h\nclass CustomSensor {\nprivate:\n    int sensor_pin;\n    float last_reading;\n    \npublic:\n    void setup() {\n        sensor_pin = 34;  // ADC pin\n        pinMode(sensor_pin, INPUT);\n    }\n    \n    void loop() {\n        // Background tasks if needed\n    }\n    \n    void act(JsonObject& json_in, JsonObject& json_out) {\n        // Handle action commands\n        if (json_in.containsKey("calibrate")) {\n            // Calibration logic\n            json_out["return"] = 1;\n        }\n    }\n    \n    void get(JsonObject& json_in, JsonObject& json_out) {\n        // Return sensor reading\n        float reading = analogRead(sensor_pin) * 3.3 / 4095.0;\n        json_out["return"] = 1;\n        json_out["voltage"] = reading;\n        json_out["last_reading"] = last_reading;\n        last_reading = reading;\n    }\n};\n')),(0,o.kt)("h3",{id:"custom-communication-protocol"},"Custom Communication Protocol"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"// Implement custom message format\nvoid handleCustomProtocol(String message) {\n    // Parse custom message format\n    // Execute corresponding actions\n    // Send response in custom format\n}\n")),(0,o.kt)("h2",{id:"performance-optimization"},"Performance Optimization"),(0,o.kt)("h3",{id:"memory-usage"},"Memory Usage"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Use ",(0,o.kt)("inlineCode",{parentName:"li"},"const")," for read-only data"),(0,o.kt)("li",{parentName:"ul"},"Minimize global variables"),(0,o.kt)("li",{parentName:"ul"},"Use appropriate data types"),(0,o.kt)("li",{parentName:"ul"},"Free unused resources")),(0,o.kt)("h3",{id:"cpu-optimization"},"CPU Optimization"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Minimize blocking operations"),(0,o.kt)("li",{parentName:"ul"},"Use interrupts for time-critical tasks"),(0,o.kt)("li",{parentName:"ul"},"Optimize loop frequencies"),(0,o.kt)("li",{parentName:"ul"},"Balance responsiveness vs. power consumption")),(0,o.kt)("h3",{id:"communication-speed"},"Communication Speed"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Use binary protocols for high-speed data"),(0,o.kt)("li",{parentName:"ul"},"Implement command queuing"),(0,o.kt)("li",{parentName:"ul"},"Optimize JSON parsing"),(0,o.kt)("li",{parentName:"ul"},"Consider UDP for real-time applications")),(0,o.kt)("h2",{id:"troubleshooting"},"Troubleshooting"),(0,o.kt)("h3",{id:"common-issues"},"Common Issues"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Boot loops"),": Check power supply and module configuration"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Communication failures"),": Verify baud rate and connection"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Memory errors"),": Reduce enabled modules or optimize code"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Timing issues"),": Adjust task priorities and frequencies")),(0,o.kt)("h3",{id:"debug-tools"},"Debug Tools"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Serial monitor for runtime debugging"),(0,o.kt)("li",{parentName:"ul"},"Logic analyzer for hardware signals"),(0,o.kt)("li",{parentName:"ul"},"Network analyzer for WiFi communication"),(0,o.kt)("li",{parentName:"ul"},"Memory profiler for optimization")),(0,o.kt)("h2",{id:"contributing"},"Contributing"),(0,o.kt)("h3",{id:"development-guidelines"},"Development Guidelines"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Follow existing code style"),(0,o.kt)("li",{parentName:"ul"},"Document all new modules"),(0,o.kt)("li",{parentName:"ul"},"Include unit tests where possible"),(0,o.kt)("li",{parentName:"ul"},"Update API documentation")),(0,o.kt)("h3",{id:"submission-process"},"Submission Process"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Fork the repository"),(0,o.kt)("li",{parentName:"ol"},"Create feature branch"),(0,o.kt)("li",{parentName:"ol"},"Implement and test changes"),(0,o.kt)("li",{parentName:"ol"},"Submit pull request"),(0,o.kt)("li",{parentName:"ol"},"Participate in code review")),(0,o.kt)("h2",{id:"related-resources"},"Related Resources"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("a",{parentName:"strong",href:"/docs/Electronics/Advanced/UC2-REST/"},"UC2-REST Python Interface"))," - Python control layer"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("a",{parentName:"strong",href:"../../05_ImSwitch/Advanced/02_Usage/UC2-REST.md"},"ImSwitch Integration"))," - Microscopy software integration"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("a",{parentName:"strong",href:"/docs/Electronics/Advanced/Hardware-Interfaces/"},"Hardware Interfaces"))," - Specialized hardware components")))}c.isMDXComponent=!0}}]);