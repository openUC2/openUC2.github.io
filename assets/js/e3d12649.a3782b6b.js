"use strict";(self.webpackChunkuc_2_docs=self.webpackChunkuc_2_docs||[]).push([[4055],{3905:(e,t,i)=>{i.d(t,{Zo:()=>p,kt:()=>g});var n=i(67294);function a(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function r(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function l(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?r(Object(i),!0).forEach((function(t){a(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):r(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function o(e,t){if(null==e)return{};var i,n,a=function(e,t){if(null==e)return{};var i,n,a={},r=Object.keys(e);for(n=0;n<r.length;n++)i=r[n],t.indexOf(i)>=0||(a[i]=e[i]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)i=r[n],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(a[i]=e[i])}return a}var s=n.createContext({}),c=function(e){var t=n.useContext(s),i=t;return e&&(i="function"==typeof e?e(t):l(l({},t),e)),i},p=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var i=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=c(i),g=a,d=u["".concat(s,".").concat(g)]||u[g]||m[g]||r;return i?n.createElement(d,l(l({ref:t},p),{},{components:i})):n.createElement(d,l({ref:t},p))}));function g(e,t){var i=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=i.length,l=new Array(r);l[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var c=2;c<r;c++)l[c]=i[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,i)}u.displayName="MDXCreateElement"},38103:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var n=i(87462),a=(i(67294),i(3905));const r={},l="ImSwitchClient Documentation",o={unversionedId:"ImSwitch/Advanced/Device-Specific/ImSwitch-Client",id:"ImSwitch/Advanced/Device-Specific/ImSwitch-Client",title:"ImSwitchClient Documentation",description:"Introduction",source:"@site/docs/05_ImSwitch/Advanced/05_Device-Specific/ImSwitch-Client.md",sourceDirName:"05_ImSwitch/Advanced/05_Device-Specific",slug:"/ImSwitch/Advanced/Device-Specific/ImSwitch-Client",permalink:"/docs/ImSwitch/Advanced/Device-Specific/ImSwitch-Client",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Install driver for Daheng Camera",permalink:"/docs/ImSwitch/Advanced/Device-Specific/Daheng-Camera"},next:{title:"Experimental Features",permalink:"/docs/ImSwitch/Advanced/Experimental/"}},s={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Features",id:"features",level:2},{value:"Installation",id:"installation",level:2},{value:"Getting Started",id:"getting-started",level:2},{value:"Initializing the Client",id:"initializing-the-client",level:3},{value:"Example: Moving a Stage and Acquiring an Image",id:"example-moving-a-stage-and-acquiring-an-image",level:3},{value:"Laser Control Example",id:"laser-control-example",level:3},{value:"Recording an Image",id:"recording-an-image",level:3},{value:"Setting Live View",id:"setting-live-view",level:3},{value:"API Overview",id:"api-overview",level:2},{value:"Positioners Manager",id:"positioners-manager",level:3},{value:"Lasers Manager",id:"lasers-manager",level:3},{value:"Recording Manager",id:"recording-manager",level:3},{value:"View Manager",id:"view-manager",level:3},{value:"Contributing",id:"contributing",level:2},{value:"License",id:"license",level:2}],p={toc:c};function m(e){let{components:t,...i}=e;return(0,a.kt)("wrapper",(0,n.Z)({},p,i,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"imswitchclient-documentation"},"ImSwitchClient Documentation"),(0,a.kt)("h2",{id:"introduction"},"Introduction"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"ImSwitchClient")," is a Python wrapper designed for interacting with the ImSwitch REST API, enabling remote control over ImSwitch functionalities, such as stage positioning, laser control, and image acquisition. This client simplifies API interactions and allows seamless integration into Python scripts and Jupyter Notebooks."),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://pypi.python.org/pypi/imswitchclient"},(0,a.kt)("img",{parentName:"a",src:"https://img.shields.io/pypi/v/imswitchclient.svg",alt:"PyPI Version"}))),(0,a.kt)("h2",{id:"features"},"Features"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Remote Control"),": Interface with ImSwitch through REST API endpoints."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Comprehensive API Access"),": Easily control positioners, lasers, detectors, and imaging settings."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Interactive API Exploration"),": Utilize the FastAPI Swagger UI at ",(0,a.kt)("inlineCode",{parentName:"li"},"http://localhost:8000/docs"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Modular Design"),": Includes managers for lasers, positioners, image acquisition, and more."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Open Source"),": Inspired by OpenFlexure Client, freely available under the MIT license.")),(0,a.kt)("h2",{id:"installation"},"Installation"),(0,a.kt)("p",null,"You can install ",(0,a.kt)("inlineCode",{parentName:"p"},"ImSwitchClient")," via pip:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"pip install imswitchclient\n")),(0,a.kt)("h2",{id:"getting-started"},"Getting Started"),(0,a.kt)("h3",{id:"initializing-the-client"},"Initializing the Client"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'import imswitchclient.ImSwitchClient as imc\n\n# Initialize the client\nclient = imc.ImSwitchClient(host="0.0.0.0", isHttps=True, port=8001)\n')),(0,a.kt)("h3",{id:"example-moving-a-stage-and-acquiring-an-image"},"Example: Moving a Stage and Acquiring an Image"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'import numpy as np\nimport matplotlib.pyplot as plt\nimport time\n\n# Retrieve positioner names\npositioner_names = client.positionersManager.getAllDeviceNames()\npositioner_name = positioner_names[0]\n\n# Get current position\ncurrent_positions = client.positionersManager.getPositionerPositions()[positioner_name]\ninitial_position = (current_positions["X"], current_positions["Y"])\n\n# Turn on illumination\nlaser_name = client.lasersManager.getLaserNames()[0]\nclient.lasersManager.setLaserActive(laser_name, True)\nclient.lasersManager.setLaserValue(laser_name, 512)\n\n# Move the stage and capture an image\ndef capture_image_at_position(x, y):\n    client.positionersManager.movePositioner(positioner_name, "X", x, is_absolute=True, is_blocking=True)\n    client.positionersManager.movePositioner(positioner_name, "Y", y, is_absolute=True, is_blocking=True)\n    last_frame = client.recordingManager.snapNumpyToFastAPI()\n    plt.imshow(last_frame)\n    plt.show()\n\n# Example scanning\nfor ix in range(5):\n    for iy in range(5):\n        new_x = initial_position[0] + ix * 50\n        new_y = initial_position[1] + iy * 50\n        capture_image_at_position(new_x, new_y)\n\n# Return stage to initial position\nclient.positionersManager.movePositioner(positioner_name, "X", initial_position[0], is_absolute=True, is_blocking=True)\nclient.positionersManager.movePositioner(positioner_name, "Y", initial_position[1], is_absolute=True, is_blocking=True)\n')),(0,a.kt)("h3",{id:"laser-control-example"},"Laser Control Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"laser_name = client.lasersManager.getLaserNames()[0]\nclient.lasersManager.setLaserActive(laser_name, True)\nclient.lasersManager.setLaserValue(laser_name, 800)\n\n# Verify laser status\nprint(client.lasersManager.getLaserNames())\nclient.lasersManager.setLaserActive(laser_name, False)\n")),(0,a.kt)("h3",{id:"recording-an-image"},"Recording an Image"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"# Take a snapshot\nimage = client.recordingManager.snapNumpyToFastAPI()\nplt.imshow(image)\nplt.show()\n")),(0,a.kt)("h3",{id:"setting-live-view"},"Setting Live View"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"client.viewManager.setLiveViewActive(True)\nclient.viewManager.setLiveViewCrosshairVisible(True)\nclient.viewManager.setLiveViewGridVisible(False)\n")),(0,a.kt)("h2",{id:"api-overview"},"API Overview"),(0,a.kt)("p",null,"The ImSwitch API provides access to various components:"),(0,a.kt)("h3",{id:"positioners-manager"},"Positioners Manager"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"getAllDeviceNames()")," - Get all available positioners."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"getPositionerPositions()")," - Get current position."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"movePositioner(name, axis, value, is_absolute, is_blocking)")," - Move the stage."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"homeAxis(name, axis, is_blocking)")," - Home the positioner.")),(0,a.kt)("h3",{id:"lasers-manager"},"Lasers Manager"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"getLaserNames()")," - Get available lasers."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"setLaserActive(name, status)")," - Turn laser on/off."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"setLaserValue(name, value)")," - Set laser intensity.")),(0,a.kt)("h3",{id:"recording-manager"},"Recording Manager"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"snapNumpyToFastAPI()")," - Capture an image."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"startRecording()")," - Begin recording."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"stopRecording()")," - Stop recording.")),(0,a.kt)("h3",{id:"view-manager"},"View Manager"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"setLiveViewActive(status)")," - Enable live view."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"setLiveViewCrosshairVisible(status)")," - Show/hide crosshair."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"setLiveViewGridVisible(status)")," - Show/hide grid.")),(0,a.kt)("h2",{id:"contributing"},"Contributing"),(0,a.kt)("p",null,"Contributions are welcome! Visit the GitHub repository for details: ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/openUC2/imswitchclient"},"https://github.com/openUC2/imswitchclient")),(0,a.kt)("h2",{id:"license"},"License"),(0,a.kt)("p",null,"This project is licensed under the MIT License."))}m.isMDXComponent=!0}}]);