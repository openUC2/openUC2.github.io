"use strict";(self.webpackChunkuc_2_docs=self.webpackChunkuc_2_docs||[]).push([[6760],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=u(n),d=r,k=c["".concat(s,".").concat(d)]||c[d]||m[d]||o;return n?a.createElement(k,i(i({ref:t},p),{},{components:n})):a.createElement(k,i({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var u=2;u<o;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},41382:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var a=n(87462),r=(n(67294),n(3905));const o={},i="UC2-ESP32 Getting Started Tutorial",l={unversionedId:"ImSwitch/Advanced/Tutorials/UC2-ESP-Getting-Started",id:"ImSwitch/Advanced/Tutorials/UC2-ESP-Getting-Started",title:"UC2-ESP32 Getting Started Tutorial",description:"The UC2-ESP32 firmware is the low-level software that runs on ESP32 microcontrollers to control UC2 hardware components. This tutorial guides you through setting up, flashing, and using UC2-ESP32 firmware.",source:"@site/docs/05_ImSwitch/Advanced/04_Tutorials/UC2-ESP-Getting-Started.md",sourceDirName:"05_ImSwitch/Advanced/04_Tutorials",slug:"/ImSwitch/Advanced/Tutorials/UC2-ESP-Getting-Started",permalink:"/docs/ImSwitch/Advanced/Tutorials/UC2-ESP-Getting-Started",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Smart Microscopy Workflows with Jupyter Notebooks",permalink:"/docs/ImSwitch/Advanced/Tutorials/Jupyter-Workflows"},next:{title:"UC2-REST Getting Started Tutorial",permalink:"/docs/ImSwitch/Advanced/Tutorials/UC2-REST-Getting-Started"}},s={},u=[{value:"Overview",id:"overview",level:2},{value:"Supported Hardware Modules",id:"supported-hardware-modules",level:3},{value:"Firmware Resources and Tools",id:"firmware-resources-and-tools",level:2},{value:"Official Firmware Repository",id:"official-firmware-repository",level:3},{value:"Firmware Flashing Tools",id:"firmware-flashing-tools",level:3},{value:"Supported Images and Documentation",id:"supported-images-and-documentation",level:3},{value:"Firmware Architecture",id:"firmware-architecture",level:2},{value:"Module Structure",id:"module-structure",level:3},{value:"Communication Protocol",id:"communication-protocol",level:3},{value:"Installation and Setup",id:"installation-and-setup",level:2},{value:"Method 1: Web-Based Flashing (Recommended)",id:"method-1-web-based-flashing-recommended",level:3},{value:"Method 2: PlatformIO (Development)",id:"method-2-platformio-development",level:3},{value:"Basic Configuration",id:"basic-configuration",level:2},{value:"Serial Communication Setup",id:"serial-communication-setup",level:3},{value:"WiFi Configuration",id:"wifi-configuration",level:3},{value:"Module Configuration",id:"module-configuration",level:3},{value:"Hardware Control Examples",id:"hardware-control-examples",level:2},{value:"Motor Control",id:"motor-control",level:3},{value:"LED Control",id:"led-control",level:3},{value:"Laser Control",id:"laser-control",level:3},{value:"Web Interface Test",id:"web-interface-test",level:3},{value:"Python Test Script",id:"python-test-script",level:3},{value:"Advanced Configuration",id:"advanced-configuration",level:2},{value:"Custom Module Development",id:"custom-module-development",level:3},{value:"Network Configuration",id:"network-configuration",level:3},{value:"Performance Optimization",id:"performance-optimization",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues",id:"common-issues",level:3},{value:"Debug Output",id:"debug-output",level:3},{value:"Integration with ImSwitch",id:"integration-with-imswitch",level:2},{value:"UC2-REST Communication Layer",id:"uc2-rest-communication-layer",level:3},{value:"Configuration in ImSwitch",id:"configuration-in-imswitch",level:3},{value:"Next Steps",id:"next-steps",level:2},{value:"Resources",id:"resources",level:2}],p={toc:u};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"uc2-esp32-getting-started-tutorial"},"UC2-ESP32 Getting Started Tutorial"),(0,r.kt)("p",null,"The UC2-ESP32 firmware is the low-level software that runs on ESP32 microcontrollers to control UC2 hardware components. This tutorial guides you through setting up, flashing, and using UC2-ESP32 firmware."),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,"UC2-ESP32 firmware features:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Modular Architecture"),": Only compile modules you need"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Multi-Protocol Communication"),": Serial, WiFi, I2C support"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Real-time Control"),": Loop-based hardware management"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Resource Optimization"),": Minimal RAM and CPU usage"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Extensible Design"),": Easy to add new hardware modules")),(0,r.kt)("h3",{id:"supported-hardware-modules"},"Supported Hardware Modules"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Motors"),": Stepper motors for XYZ stages and focus control"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"LEDs"),": Individual LEDs and LED arrays/matrices"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Lasers"),": Laser diode control with safety features"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Sensors"),": Temperature, humidity, and other environmental sensors"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Communication"),": WiFi, Bluetooth, Serial interfaces"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Input Controllers"),": Joysticks, PS4 controllers, buttons")),(0,r.kt)("h2",{id:"firmware-resources-and-tools"},"Firmware Resources and Tools"),(0,r.kt)("h3",{id:"official-firmware-repository"},"Official Firmware Repository"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Main Repository"),": ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/youseetoo/uc2-esp32"},"UC2-ESP32 Firmware")," - Complete firmware source code and documentation"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Rework Branch"),": ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/youseetoo/uc2-esp32/tree/reworkBD"},"uc2-esp32/reworkBD")," - Latest development version with enhanced features")),(0,r.kt)("h3",{id:"firmware-flashing-tools"},"Firmware Flashing Tools"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Web-based Flashing"),": ",(0,r.kt)("a",{parentName:"li",href:"https://youseetoo.github.io/"},"youseetoo.github.io")," - Browser-based firmware flashing tool"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Firmware Testing Interface"),": ",(0,r.kt)("a",{parentName:"li",href:"https://youseetoo.github.io/indexWebSerialTest.html"},"WebSerial Test Tool")," - Browser-based testing and configuration")),(0,r.kt)("h3",{id:"supported-images-and-documentation"},"Supported Images and Documentation"),(0,r.kt)("p",null,"The UC2-ESP32 firmware supports various hardware configurations with corresponding images and setup guides available in the repository."),(0,r.kt)("h2",{id:"firmware-architecture"},"Firmware Architecture"),(0,r.kt)("h3",{id:"module-structure"},"Module Structure"),(0,r.kt)("p",null,"Each hardware module implements four standard functions:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class HardwareModule {\npublic:\n    void setup();     // Initialize hardware\n    void loop();      // Continuous background tasks\n    void act();       // Execute commands\n    void get();       // Return status/data\n};\n")),(0,r.kt)("h3",{id:"communication-protocol"},"Communication Protocol"),(0,r.kt)("p",null,"Commands use JSON format:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "task": "/motor_act",\n    "motor": 0,\n    "direction": 1,\n    "steps": 1000\n}\n')),(0,r.kt)("p",null,"Responses follow the same structure:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "return": 1,\n    "task": "/motor_act",\n    "motor": 0,\n    "position": 1000\n}\n')),(0,r.kt)("h2",{id:"installation-and-setup"},"Installation and Setup"),(0,r.kt)("h3",{id:"method-1-web-based-flashing-recommended"},"Method 1: Web-Based Flashing (Recommended)"),(0,r.kt)("p",null,"The easiest way to flash UC2-ESP32 firmware:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Visit the UC2 Firmware Page"),":"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Go to ",(0,r.kt)("a",{parentName:"li",href:"https://youseetoo.github.io/"},"youseetoo.github.io")),(0,r.kt)("li",{parentName:"ul"},"This provides a web-based ESP32 flashing interface"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Select Your Board"),":"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Choose your specific ESP32 board type"),(0,r.kt)("li",{parentName:"ul"},"Common options: ESP32-WROOM, ESP32-CAM, Custom UC2 boards"),(0,r.kt)("li",{parentName:"ul"},"If unsure, check your hardware documentation"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Connect ESP32"),":"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Connect ESP32 to computer via USB"),(0,r.kt)("li",{parentName:"ul"},"Ensure proper USB drivers are installed"),(0,r.kt)("li",{parentName:"ul"},"Press and hold BOOT button (if required)"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Flash Firmware"),":"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},'Click "Connect" and select the correct COM port'),(0,r.kt)("li",{parentName:"ul"},'Click "Flash Firmware"'),(0,r.kt)("li",{parentName:"ul"},"Wait for completion (usually 1-2 minutes)"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Test Installation"),":"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Visit ",(0,r.kt)("a",{parentName:"li",href:"https://youseetoo.github.io/indexWebSerialTest.html"},"UC2 Web Serial Test Page")),(0,r.kt)("li",{parentName:"ul"},"Connect to your ESP32"),(0,r.kt)("li",{parentName:"ul"},"Send test commands to verify functionality")))),(0,r.kt)("h3",{id:"method-2-platformio-development"},"Method 2: PlatformIO (Development)"),(0,r.kt)("p",null,"For development and customization:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Install PlatformIO"),":"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# Install PlatformIO Core\npip install platformio\n\n# Or use PlatformIO IDE extension in VS Code\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Clone Firmware Repository"),":"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/youseetoo/uc2-esp32\ncd uc2-esp32\n\n# Switch to development branch for latest features\ngit checkout main\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Configure Build"),":"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# Edit platformio.ini for your board and modules\nnano platformio.ini\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Build and Flash"),":"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# Build firmware\npio run\n\n# Flash to ESP32\npio run --target upload\n\n# Monitor serial output\npio device monitor\n")))),(0,r.kt)("h2",{id:"basic-configuration"},"Basic Configuration"),(0,r.kt)("h3",{id:"serial-communication-setup"},"Serial Communication Setup"),(0,r.kt)("p",null,"Default serial parameters:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Baud Rate"),": 115200"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Data Bits"),": 8"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Stop Bits"),": 1"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Parity"),": None"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Flow Control"),": None")),(0,r.kt)("h3",{id:"wifi-configuration"},"WiFi Configuration"),(0,r.kt)("p",null,"Configure WiFi for network communication (right now this is untested and barely documented ):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'// WiFi credentials (set in firmware or via serial)\nconst char* ssid = "your_wifi_network";\nconst char* password = "your_wifi_password";\n\n// Static IP configuration (optional)\nIPAddress local_IP(192, 168, 1, 100);\nIPAddress gateway(192, 168, 1, 1);\nIPAddress subnet(255, 255, 255, 0);\n')),(0,r.kt)("p",null,"Set WiFi via serial commands:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "task": "/wifi_act",\n    "ssid": "your_network",\n    "password": "your_password"\n}\n')),(0,r.kt)("h3",{id:"module-configuration"},"Module Configuration"),(0,r.kt)("h2",{id:"hardware-control-examples"},"Hardware Control Examples"),(0,r.kt)("h3",{id:"motor-control"},"Motor Control"),(0,r.kt)("p",null,"Based on the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/youseetoo/uc2-esp32/blob/main/main/json_api_BD.txt"},"JSON API specification"),", here are the correct motor control commands:"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Move Stepper Motor:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "task": "/motor_act",\n    "motor": {\n        "steppers": [\n            {\n                "stepperid": 1,\n                "position": 1000,\n                "speed": 15000,\n                "isabs": true,\n                "isblocking": false\n            }\n        ]\n    }\n}\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Home Stepper Motor:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "task": "/home_act",\n    "home": {\n        "steppers": [\n            {\n                "stepperid": 1,\n                "timeout": 20000,\n                "speed": 15000,\n                "direction": 1,\n                "endposrelease": 3000\n            }\n        ]\n    }\n}\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Get Motor Position:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "task": "/motor_get",\n    "motor": {\n        "steppers": [\n            {\n                "stepperid": 1\n            }\n        ]\n    }\n}\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Set Motor Position (Calibration):")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "task": "/motor_set",\n    "motor": {\n        "steppers": [\n            {\n                "stepperid": 1,\n                "position": 0\n            }\n        ]\n    }\n}\n')),(0,r.kt)("h3",{id:"led-control"},"LED Control"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Set Individual LED:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "task": "/led_act",\n    "led": {\n        "LEDArrMode": 1,\n        "led_array": [\n            {\n                "id": 1,\n                "r": 255,\n                "g": 0,\n                "b": 0\n            }\n        ]\n    }\n}\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Set LED Array Pattern:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "task": "/led_act",\n    "led": {\n        "LEDArrMode": 1,\n        "led_array": [\n            {"id": 1, "r": 255, "g": 0, "b": 0},\n            {"id": 2, "r": 0, "g": 255, "b": 0},\n            {"id": 3, "r": 0, "g": 0, "b": 255},\n            {"id": 4, "r": 255, "g": 255, "b": 255}\n        ]\n    }\n}\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Get LED Status:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "task": "/led_get"\n}\n')),(0,r.kt)("h3",{id:"laser-control"},"Laser Control"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Turn on Laser:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "task": "/laser_act",\n    "laser": {\n        "LASERid": 1,\n        "LASERval": 100\n    }\n}\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Turn off Laser (Safety):")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "task": "/laser_act",\n    "laser": {\n        "LASERid": 1,\n        "LASERval": 0\n    }\n}\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Get Laser Status:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "task": "/laser_get"\n}\n')),(0,r.kt)("h3",{id:"web-interface-test"},"Web Interface Test"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Access Web Test Page"),":"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Open ",(0,r.kt)("a",{parentName:"li",href:"https://youseetoo.github.io/indexWebSerialTest.html"},"youseetoo.github.io/indexWebSerialTest.html")),(0,r.kt)("li",{parentName:"ul"},"Connect to your ESP32"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Test Basic Commands"),":"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{"task": "/state_get"}\n{"task": "/led_act", "led": 0, "intensity": 100}\n{"task": "/led_act", "led": 0, "intensity": 0}\n'))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Verify Responses"),":"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Check that commands return proper JSON responses"),(0,r.kt)("li",{parentName:"ul"},"Observe physical hardware changes (LEDs, motor movement)")))),(0,r.kt)("h3",{id:"python-test-script"},"Python Test Script"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'import serial\nimport json\nimport time\n\ndef test_uc2_esp32(port="/dev/ttyUSB0", baudrate=115200):\n    """Test basic UC2-ESP32 communication"""\n    try:\n        # Open serial connection\n        ser = serial.Serial(port, baudrate, timeout=1)\n        time.sleep(2)  # Wait for connection\n        \n        # Test state command\n        command = {"task": "/state_get"}\n        ser.write((json.dumps(command) + \'\\n\').encode())\n        \n        response = ser.readline().decode().strip()\n        if response:\n            result = json.loads(response)\n            print(f"State response: {result}")\n            \n            if result.get("return") == 1:\n                print("\u2713 ESP32 communication successful")\n                return True\n            else:\n                print("\u2717 ESP32 returned error")\n                return False\n        else:\n            print("\u2717 No response from ESP32")\n            return False\n            \n    except Exception as e:\n        print(f"\u2717 Communication error: {e}")\n        return False\n    finally:\n        if \'ser\' in locals():\n            ser.close()\n\n# Run test\nif __name__ == "__main__":\n    test_uc2_esp32()\n')),(0,r.kt)("h2",{id:"advanced-configuration"},"Advanced Configuration"),(0,r.kt)("h3",{id:"custom-module-development"},"Custom Module Development"),(0,r.kt)("p",null,"Create a custom hardware module:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'// custom_module.h\n#ifndef CUSTOM_MODULE_H\n#define CUSTOM_MODULE_H\n\nclass CustomModule {\npublic:\n    void setup();\n    void loop();\n    void act(JsonObject& json_in, JsonObject& json_out);\n    void get(JsonObject& json_in, JsonObject& json_out);\n\nprivate:\n    int custom_value;\n    bool enabled;\n};\n\nextern CustomModule customModule;\n\n#endif\n\n// custom_module.cpp\n#include "custom_module.h"\n\nCustomModule customModule;\n\nvoid CustomModule::setup() {\n    // Initialize custom hardware\n    custom_value = 0;\n    enabled = true;\n    Serial.println("Custom module initialized");\n}\n\nvoid CustomModule::loop() {\n    // Background tasks (if needed)\n    if (enabled) {\n        // Continuous operations\n    }\n}\n\nvoid CustomModule::act(JsonObject& json_in, JsonObject& json_out) {\n    // Handle action commands\n    if (json_in.containsKey("value")) {\n        custom_value = json_in["value"];\n        json_out["return"] = 1;\n        json_out["value"] = custom_value;\n    }\n}\n\nvoid CustomModule::get(JsonObject& json_in, JsonObject& json_out) {\n    // Return status\n    json_out["return"] = 1;\n    json_out["custom_value"] = custom_value;\n    json_out["enabled"] = enabled;\n}\n')),(0,r.kt)("h3",{id:"network-configuration"},"Network Configuration"),(0,r.kt)("p",null,"Configure advanced networking (This is right now largely untested/undocumented):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'// Static IP configuration\nvoid setupStaticIP() {\n    if (!WiFi.config(local_IP, gateway, subnet, primaryDNS, secondaryDNS)) {\n        Serial.println("Static IP configuration failed");\n    }\n}\n\n// Access Point mode\nvoid setupAccessPoint() {\n    WiFi.softAP("UC2-ESP32", "password123");\n    IPAddress IP = WiFi.softAPIP();\n    Serial.print("AP IP address: ");\n    Serial.println(IP);\n}\n\n// Web server for HTTP API\nvoid setupWebServer() {\n    server.on("/api/motor", HTTP_POST, handleMotorAPI);\n    server.on("/api/led", HTTP_POST, handleLEDAPI);\n    server.on("/api/status", HTTP_GET, handleStatusAPI);\n    server.begin();\n}\n')),(0,r.kt)("h3",{id:"performance-optimization"},"Performance Optimization"),(0,r.kt)("p",null,"Optimize for specific applications:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'// Reduce motor loop frequency for power saving\n#define MOTOR_LOOP_INTERVAL 10  // ms\n\n// Buffer size optimization\n#define JSON_BUFFER_SIZE 512\n\n// Task priorities for multi-core ESP32\nvoid setupTaskPriorities() {\n    // High priority for motor control\n    xTaskCreatePinnedToCore(\n        motorTask, "MotorTask", 2048, NULL, 2, NULL, 1);\n    \n    // Low priority for WiFi communication\n    xTaskCreatePinnedToCore(\n        wifiTask, "WiFiTask", 4096, NULL, 1, NULL, 0);\n}\n')),(0,r.kt)("h2",{id:"troubleshooting"},"Troubleshooting"),(0,r.kt)("h3",{id:"common-issues"},"Common Issues"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"ESP32 not responding"),":"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Check USB cable and connection"),(0,r.kt)("li",{parentName:"ol"},"Verify correct COM port"),(0,r.kt)("li",{parentName:"ol"},"Press RESET button"),(0,r.kt)("li",{parentName:"ol"},"Try different baud rates (used to be higher, now it's 115200 BAUD)")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Firmware upload fails"),":"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Hold BOOT button during upload"),(0,r.kt)("li",{parentName:"ol"},"Check board selection in IDE"),(0,r.kt)("li",{parentName:"ol"},"Verify USB drivers installed"),(0,r.kt)("li",{parentName:"ol"},"Try different upload speed")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Motor not moving"),":"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Check power supply voltage"),(0,r.kt)("li",{parentName:"ol"},"Verify motor driver connections"),(0,r.kt)("li",{parentName:"ol"},"Test with manual commands"),(0,r.kt)("li",{parentName:"ol"},"Check current limits")),(0,r.kt)("h3",{id:"debug-output"},"Debug Output"),(0,r.kt)("p",null,"Enable debug output for troubleshooting:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#define DEBUG_SERIAL 1\n#define DEBUG_WIFI 1\n#define DEBUG_MOTOR 1\n\nvoid debugPrint(String message) {\n    #if DEBUG_SERIAL\n    Serial.println("[DEBUG] " + message);\n    #endif\n}\n')),(0,r.kt)("h2",{id:"integration-with-imswitch"},"Integration with ImSwitch"),(0,r.kt)("h3",{id:"uc2-rest-communication-layer"},"UC2-REST Communication Layer"),(0,r.kt)("p",null,"UC2-ESP32 communicates with ImSwitch through UC2-REST:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from UC2REST import UC2Client\n\n# Connect to ESP32\nclient = UC2Client(serialport="/dev/ttyUSB0")\n\n# Test communication\nif client.is_connected:\n    print("Connected to UC2-ESP32")\n    \n    # Send commands through UC2-REST\n    client.stage.move_x(1000)\n    client.led.set_led(channel=1, intensity=100)\n')),(0,r.kt)("h3",{id:"configuration-in-imswitch"},"Configuration in ImSwitch"),(0,r.kt)("p",null,"Configure ESP32 device in ImSwitch:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "rs232devices": {\n    "ESP32": {\n      "managerName": "ESP32Manager",\n      "managerProperties": {\n        "serialport": "/dev/ttyUSB0",\n        "baudrate": 115200\n      }\n    }\n  }\n}\n')),(0,r.kt)("h2",{id:"next-steps"},"Next Steps"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("a",{parentName:"strong",href:"/docs/ImSwitch/Advanced/Tutorials/UC2-REST-Getting-Started"},"UC2-REST Integration"))," - Python interface setup"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("a",{parentName:"strong",href:"/docs/ImSwitch/Advanced/Configuration/"},"ImSwitch Configuration"))," - Configure ImSwitch for ESP32"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("a",{parentName:"strong",href:"../../04_Electronics/README.md"},"Hardware Assembly"))," - Physical hardware setup")),(0,r.kt)("h2",{id:"resources"},"Resources"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("a",{parentName:"strong",href:"https://github.com/youseetoo/uc2-esp32"},"UC2-ESP32 Repository"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("a",{parentName:"strong",href:"https://github.com/youseetoo/uc2-esp32/tree/main/docs"},"Firmware Documentation"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("a",{parentName:"strong",href:"https://youseetoo.github.io/"},"Web Flasher"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("a",{parentName:"strong",href:"https://openuc2.com"},"Community Forum")))))}m.isMDXComponent=!0}}]);