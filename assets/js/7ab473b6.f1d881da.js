"use strict";(self.webpackChunkuc_2_docs=self.webpackChunkuc_2_docs||[]).push([[4185],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>d});var i=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,i,o=function(e,n){if(null==e)return{};var t,i,o={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=i.createContext({}),p=function(e){var n=i.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},c=function(e){var n=p(e.components);return i.createElement(l.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},u=i.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(t),d=o,g=u["".concat(l,".").concat(d)]||u[d]||m[d]||r;return t?i.createElement(g,a(a({ref:n},c),{},{components:t})):i.createElement(g,a({ref:n},c))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,a=new Array(r);a[0]=u;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var p=2;p<r;p++)a[p]=t[p];return i.createElement.apply(null,a)}return i.createElement.apply(null,t)}u.displayName="MDXCreateElement"},47527:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>m,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var i=t(87462),o=(t(67294),t(3905));const r={},a="Smart Microscopy Using openUC2 and ImSwitch",s={unversionedId:"ARCHIVE/XYZMicroscope/SmartMicroscopy",id:"ARCHIVE/XYZMicroscope/SmartMicroscopy",title:"Smart Microscopy Using openUC2 and ImSwitch",description:"This tutorial will guide you through setting up a smart microscopy workflow using the openUC2 microscope and the ImSwitch software. We will perform a closed-loop experiment where the microscope follows a line based on image processing results.",source:"@site/docs/30_ARCHIVE/02_XYZMicroscope/SmartMicroscopy.md",sourceDirName:"30_ARCHIVE/02_XYZMicroscope",slug:"/ARCHIVE/XYZMicroscope/SmartMicroscopy",permalink:"/docs/ARCHIVE/XYZMicroscope/SmartMicroscopy",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"openUC2 Setting up the tube lens",permalink:"/docs/ARCHIVE/XYZMicroscope/SetupTubelens"},next:{title:"Stage Mapping and Stage Calibration",permalink:"/docs/ARCHIVE/XYZMicroscope/StageCalibration"}},l={},p=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Closed-Loop Feedback Pipeline",id:"closed-loop-feedback-pipeline",level:2},{value:"Installation",id:"installation",level:3},{value:"Code Implementation",id:"code-implementation",level:3},{value:"Result",id:"result",level:3}],c={toc:p};function m(e){let{components:n,...r}=e;return(0,o.kt)("wrapper",(0,i.Z)({},c,r,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"smart-microscopy-using-openuc2-and-imswitch"},"Smart Microscopy Using openUC2 and ImSwitch"),(0,o.kt)("p",null,"This tutorial will guide you through setting up a smart microscopy workflow using the openUC2 microscope and the ImSwitch software. We will perform a closed-loop experiment where the microscope follows a line based on image processing results."),(0,o.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"ImSwitch Software"),": Ensure that ImSwitch is running and accessible. For example, if running on the same computer, the URL might be ",(0,o.kt)("inlineCode",{parentName:"li"},"https://localhost:8002")," (check logs for the exact port)."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"SSL Certificate"),": Access the REST API (e.g., https://localhost:8002/docs) in a browser and accept the security warning to use the web viewer (",(0,o.kt)("a",{parentName:"li",href:"https://youseetoo.github.io/imswitch/index.html"},"https://youseetoo.github.io/imswitch/index.html"),"). Enter the URL and port under connections.")),(0,o.kt)("h2",{id:"closed-loop-feedback-pipeline"},"Closed-Loop Feedback Pipeline"),(0,o.kt)("p",null,"The pipeline will:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Snap an image"),(0,o.kt)("li",{parentName:"ol"},"Create a background image"),(0,o.kt)("li",{parentName:"ol"},"Subtract the background"),(0,o.kt)("li",{parentName:"ol"},"Compute edges using the Canny filter"),(0,o.kt)("li",{parentName:"ol"},"Perform Hough transform to find straight lines"),(0,o.kt)("li",{parentName:"ol"},"Determine the mean orientation of the lines"),(0,o.kt)("li",{parentName:"ol"},"Compute the next XY coordinate to move"),(0,o.kt)("li",{parentName:"ol"},"Return to the initial position")),(0,o.kt)("h3",{id:"installation"},"Installation"),(0,o.kt)("p",null,"Install the necessary package:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"pip install https://github.com/openUC2/imswitchclient/archive/refs/heads/main.zip\n")),(0,o.kt)("h3",{id:"code-implementation"},"Code Implementation"),(0,o.kt)("p",null,"You can run the following code in a Jupyter notebook or Visual Studio Code. Adjust the client initialization to match your setup."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'# Load dependencies\nimport cv2\nimport numpy as np\nimport tifffile as tif\nimport matplotlib.pyplot as plt\nimport os\nimport imswitchclient.ImSwitchClient as imc\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport time\nfrom simple_pid import PID\n\n# Setup PID controller\ncontroller = PID(2, 0.1, 2)\ncontroller.send(None)\n\n# Initialize the client\nclient = imc.ImSwitchClient(host="192.168.137.1", port=8002)\n\n# Retrieve the first positioner\'s name and current position\npositioner_names = client.positionersManager.getAllDeviceNames()\npositioner_name = positioner_names[0]\ncurrentPositions = client.positionersManager.getPositionerPositions()[positioner_name]\ninitialPosition = (currentPositions["X"], currentPositions["Y"])\n\n# Loop through the process\nfor iimage in range(10):\n    # Snap image\n    scalingFactor = .5\n    pixel_to_stage = 1 / scalingFactor\n    gaussianKernel = 201\n    print("Taking image")\n    iImage = client.recordingManager.snapNumpyToFastAPI(scalingFactor)\n    mCrop = np.max(iImage.shape)\n    Ny, Nx = iImage.shape\n\n    # Remove background\n    mBackground = cv2.GaussianBlur(iImage, (gaussianKernel, gaussianKernel), 0)\n    iImage = iImage / mBackground\n    iImage = iImage[Nx//2-mCrop:Nx//2+mCrop, Ny//2-mCrop:Ny//2+mCrop]\n\n    # Process image\n    image = np.uint8(iImage * 255)[:, :, np.newaxis]\n    image[image > 100] = 0\n    edges = cv2.Canny(image, 50, 150, apertureSize=3)\n    lines = cv2.HoughLines(edges, 1, np.pi / 180, 100)\n\n    # Calculate main orientation\n    angles = [np.degrees(theta) for rho, theta in lines[:, 0]] if lines is not None else []\n    main_orientation = np.mean(angles)\n    dy = np.cos(np.radians(main_orientation)) * Nx / 2\n    dx = np.sin(np.radians(main_orientation)) * Ny / 2\n\n    # Handle NaN values\n    dx = dx if not np.isnan(dx) else np.random.randint(-100, 100)\n    dy = dy if not np.isnan(dy) else np.random.randint(-100, 100)\n\n    newPosition = (dx * pixel_to_stage, dy * pixel_to_stage)\n    print(f"We are moving the microscope in x:/y: {round(newPosition[0], 2)} / {round(newPosition[1], 2)}")\n\n    client.positionersManager.movePositioner(positioner_name, "X", newPosition[0], is_absolute=False, is_blocking=True)\n    client.positionersManager.movePositioner(positioner_name, "Y", newPosition[1], is_absolute=False, is_blocking=True)\n\n# Return to the initial position\nclient.positionersManager.movePositioner(positioner_name, "X", initialPosition[0], is_absolute=True, is_blocking=True)\nclient.positionersManager.movePositioner(positioner_name, "Y", initialPosition[1], is_absolute=True, is_blocking=True)\n')),(0,o.kt)("h3",{id:"result"},"Result"),(0,o.kt)("p",null,"The microscope will follow a line for 10 steps and then return to the initial position."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Result",src:t(91487).Z,width:"800",height:"518"})),(0,o.kt)("p",null,"This workflow demonstrates a basic smart microscopy setup using openUC2 and ImSwitch, allowing for closed-loop experiments based on real-time image processing. Adapt and expand this pipeline for your specific experiments and applications."))}m.isMDXComponent=!0},91487:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/trackpen-9cf48bfcc00e098078e888fd3f448fa2.gif"}}]);