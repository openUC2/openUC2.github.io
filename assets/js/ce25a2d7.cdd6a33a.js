"use strict";(self.webpackChunkuc_2_docs=self.webpackChunkuc_2_docs||[]).push([[5331],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>c});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},m=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),u=p(a),c=r,k=u["".concat(s,".").concat(c)]||u[c]||d[c]||l;return a?n.createElement(k,i(i({ref:t},m),{},{components:a})):n.createElement(k,i({ref:t},m))}));function c(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var p=2;p<l;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},37463:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var n=a(87462),r=(a(67294),a(3905));const l={},i=void 0,o={unversionedId:"Toolboxes/GalvoBox/GalvoIntro",id:"Toolboxes/GalvoBox/GalvoIntro",title:"GalvoIntro",description:"mAIkroscope Galvo Interface Board \u2013 Extended Hardware & Firmware Documentation",source:"@site/docs/02_Toolboxes/10_GalvoBox/01_GalvoIntro.md",sourceDirName:"02_Toolboxes/10_GalvoBox",slug:"/Toolboxes/GalvoBox/GalvoIntro",permalink:"/docs/Toolboxes/GalvoBox/GalvoIntro",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"openUC2 Xiao AI Microscope Android APP",permalink:"/docs/Toolboxes/SeeedMicroscope/04_4_seeedmicroscopeapp"},next:{title:"Professional Line",permalink:"/docs/Investigator/"}},s={},p=[{value:"1  Purpose &amp; Key Features",id:"1--purpose--key-features",level:3},{value:"2  System Architecture",id:"2--system-architecture",level:3},{value:"3  Electrical Specifications",id:"3--electrical-specifications",level:3},{value:"4  Connectors &amp; Pinouts (summary)",id:"4--connectors--pinouts-summary",level:3},{value:"5  Analog Signal Chain",id:"5--analog-signal-chain",level:3},{value:"6  Power Subsystem",id:"6--power-subsystem",level:3},{value:"7  Firmware Overview",id:"7--firmware-overview",level:3},{value:"8  Typical Operating Procedure",id:"8--typical-operating-procedure",level:3},{value:"9 iBOM",id:"9-ibom",level:3},{value:"10  Firmware Architecture (openUC2-LaserScanner)",id:"10--firmware-architecture-openuc2-laserscanner",level:3},{value:"11.1  File structure",id:"111--file-structure",level:4},{value:"11.2  Build flow (PlatformIO)",id:"112--build-flow-platformio",level:4},{value:"11.3  Runtime tasks",id:"113--runtime-tasks",level:4},{value:"11.4  SPIRenderer workflow",id:"114--spirenderer-workflow",level:4},{value:"11.5  Customisation hooks",id:"115--customisation-hooks",level:4},{value:"11.6  Pin map (compile-time)",id:"116--pin-map-compile-time",level:4},{value:"11.7  Extending the firmware",id:"117--extending-the-firmware",level:4}],m={toc:p};function d(e){let{components:t,...l}=e;return(0,r.kt)("wrapper",(0,n.Z)({},m,l,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"mAIkroscope Galvo Interface Board \u2013 ",(0,r.kt)("strong",{parentName:"p"},"Extended Hardware & Firmware Documentation"),"\nRev A \u2013 26 May 2025"),(0,r.kt)("h3",{id:"1--purpose--key-features"},"1  Purpose & Key Features"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Dual-axis galvo driver interface for UC2 microscopes."),(0,r.kt)("li",{parentName:"ul"},"Seeed XIAO ESP32-S3 MCU handles scan synthesis and trigger generation."),(0,r.kt)("li",{parentName:"ul"},"On-board 12-bit SPI DAC (MCP4822) creates \xb110 V differential XY signals for low-cost Chinese galvo drivers."),(0,r.kt)("li",{parentName:"ul"},"Three independent 50 \u03a9 trigger outputs (pixel, line, frame)."),(0,r.kt)("li",{parentName:"ul"},"CAN 2.0B bus for remote control via UC2-CAN protocol."),(0,r.kt)("li",{parentName:"ul"},"Integrated \xb112 V/3.3 V/5 V analog rails, 2 A output budget for external driver modules."," ")),(0,r.kt)("p",null,"This is a scan using the Flimlabs.com software, their detector and their pulsed lasers. This is a 512x512 pixel^2 area"),(0,r.kt)("p",null,(0,r.kt)("img",{src:a(99448).Z,width:"848",height:"476"})),(0,r.kt)("h3",{id:"2--system-architecture"},"2  System Architecture"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"ESP32-S3  \u2194  SPI  \u2194  MCP4822  \u2192  LM324 diff amps  \u2192  SMA L\xb1 / R\xb1\n            \u2502              \u2502                     \u251c\u2500 pixel/line/frame triggers\n            \u2502              \u2502                     \u2514\u2500 U.FL laser blanking\n            \u2514\u2500 TWAI CAN bus \u2192 SN65HVD230 \u2192 JST-XH backbone\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Two-phase DAC update:")," write 12-bit sample into DAC register (CS low), then pulse ",(0,r.kt)("strong",{parentName:"li"},"LDAC")," to latch both channels simultaneously; saves one SPI transaction per point."," ")),(0,r.kt)("p",null,(0,r.kt)("img",{src:a(63597).Z,width:"3620",height:"2511"})),(0,r.kt)("h3",{id:"3--electrical-specifications"},"3  Electrical Specifications"),(0,r.kt)("p",null,"| Parameter              | Value                            | Comment                              |   |\n| - | -- |  | - |\n| Backbone input         | 12 V \xb15 %                        | via J1001-1                          |   |\n| Board self-consumption | \u2248 50 mA                          | excludes external galvo drivers      |   |\n| Galvo supply pass-thru | \xb112 V, 2 A max                   | J1004/J1007/J1008                    |   |\n| DAC resolution / range | 12 bit, 0 \u2013 3.3V at 4096 steps               | converted to \xb110 V diff              |   |\n| Output bandwidth       | \u2248 25 kHz (-3 dB)                 | limited by LM324 stage               |   |\n| Trigger level          | 3.3 V CMOS, 50 \u03a9 back-terminated | SMA J1009-J1011                      |   |\n| CAN bus                | ISO11898-2, 1 Mbit/s default     | 120 \u03a9 terminator selectable (JP2001) |   |"),(0,r.kt)("p",null,(0,r.kt)("img",{src:a(60319).Z,width:"3648",height:"2736"})),(0,r.kt)("h3",{id:"4--connectors--pinouts-summary"},"4  Connectors & Pinouts (summary)"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Power + CAN (J1001, JST-XH-4):"),"  GND, +12 V,  CAN","_","H - CAN","_","L"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Galvo power out (J1004 big Molex 3.96 mm, J1007/J1008 KF2510):"),"  \xb112 V, GND \u2013 pin order matches driver boards."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Differential XY (J1005/J1006, SMA-3):"),"  L+, L-, GND and R+, R-, GND."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Triggers (SMA-2):"),"  Pixel (J1009), Line (J1010), Frame (J1011)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Laser blanking (J10001, U.FL):")," single-ended 50 \u03a9."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"XIAO headers (J1002/J1003):")," break out all ESP32-S3 I/O; see GPIO map in \xa77."," ")),(0,r.kt)("h3",{id:"5--analog-signal-chain"},"5  Analog Signal Chain"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"MCP4822-E/SN")," generates 0-3.3 V (12-bit)."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Gain/offset network (LM324)")," maps 0 V\u21920 V, \xb12.048 V\u2192\xb110 V."),(0,r.kt)("li",{parentName:"ol"},"Second LM324 stage inverts each leg, giving true differential L\xb1 and R\xb1."),(0,r.kt)("li",{parentName:"ol"},"Outputs drive \u2265 20 mA into the 10 k\u03a9 inputs of typical galvo amps."),(0,r.kt)("li",{parentName:"ol"},"LC filters on \xb112 VA rails set 50 Hz cutoff to suppress switching noise."," ")),(0,r.kt)("h3",{id:"6--power-subsystem"},"6  Power Subsystem"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"TPS5430 buck:")," 12 V \u2192 3.3 V @ 0.8 A for MCU/CAN."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"TPS5430 inverting buck-boost:")," 12 V \u2192 \u221212 V @ 1.5 A for op-amps."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"78L05 linear:")," 5 V A for DAC/reference."),(0,r.kt)("li",{parentName:"ul"},"All rails filtered by \u03c0-LC networks; testpoints TP400x provided for bring-up."," ")),(0,r.kt)("h3",{id:"7--firmware-overview"},"7  Firmware Overview"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"// Default pin mapping (Arduino style) on XIAO systems\n#define PIN_DAC_CS       8   // J1003-10 / GPIO8\n#define PIN_DAC_SCK      7   // J1003-9 / GPIO7\n#define PIN_DAC_SDI      9   // J1003-11 / GPIO9\n#define PIN_DAC_LDAC     6   // J1002-6 / GPIO6\n#define PIN_TRIG_PIXEL   2   // GPIO2\n#define PIN_TRIG_LINE    3   // GPIO3\n#define PIN_TRIG_FRAME   4   // GPIO4\n#define PIN_CAN_TX       5   // GPIO5\n#define PIN_CAN_RX       44  // GPIO44\n#define PIN_LASER        43  // GPIO43\n#define PIN_PUSHBUTTON   1   // GPIO1 (enable internal pull-up)\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Loop structure:")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-text"},"for each Y line:\n    for each X pixel:\n        write X,Y to DAC; assert TRIG_PIXEL\n    assert TRIG_LINE\nassert TRIG_FRAME\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Coordinate depth:")," 12 bit full-scale \u2192 map image size (e.g. 512 \xd7 512) by ",(0,r.kt)("inlineCode",{parentName:"p"},"coord = (pixel * 4095) / (size-1)"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"PlatformIO project:")," clone ",(0,r.kt)("inlineCode",{parentName:"p"},"openUC2/galvo-interface-fw"),", select ",(0,r.kt)("inlineCode",{parentName:"p"},"env:xiao_esp32s3"),", build & upload via USB-C.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"UC2-CAN commands:"),"\n",(0,r.kt)("em",{parentName:"p"},"Coming soon")))),(0,r.kt)("h3",{id:"8--typical-operating-procedure"},"8  Typical Operating Procedure"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Feed 12 V from microscope backbone into J1001-1 (CAN connecotr); connect CAN (optional), you can supply 12v/GND via the JST 4 Pin sconnector."),(0,r.kt)("li",{parentName:"ol"},"Connect each galvo driver board with 3-pin power and SMA signal leads."),(0,r.kt)("li",{parentName:"ol"},"Flash firmware; set parameters in firmware for min/max pixel and stepsize as well as pixel dwell time"),(0,r.kt)("li",{parentName:"ol"},"Monitor pixel trigger on oscilloscope"),(0,r.kt)("li",{parentName:"ol"},"Tune galvo PID on driver boards for minimal overshoot")),(0,r.kt)("h3",{id:"9-ibom"},"9 iBOM"),(0,r.kt)("iframe",{width:"100%",style:{"aspect-ratio":"16 / 9"},src:"https://openuc2.github.io/kicad/ibom-galvo.html",title:"iBOM",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share",referrerpolicy:"strict-origin-when-cross-origin",allowfullscreen:!0}),(0,r.kt)("h3",{id:"10--firmware-architecture-openuc2-laserscanner"},"10  Firmware Architecture (openUC2-LaserScanner)"),(0,r.kt)("p",null,"You can find the files here ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/openUC2/openUC2-LaserScanner/blob/main/src/main.cpp"},"https://github.com/openUC2/openUC2-LaserScanner/blob/main/src/main.cpp")),(0,r.kt)("p",null,"The UC2-ESP Firmware also has the CAN-enabled version of it in its code base here: ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/youseetoo/uc2-esp32/blob/main/main/src/scanner/GalvoController.cpp"},"https://github.com/youseetoo/uc2-esp32/blob/main/main/src/scanner/GalvoController.cpp")),(0,r.kt)("p",null,":::warn\nSometimes the XIAO cannot be flashed immediately, for this you have to press boot and reset while firmware is flashed - or erase the firmware first using this tool: ",(0,r.kt)("a",{parentName:"p",href:"https://espressif.github.io/esptool-js/"},"https://espressif.github.io/esptool-js/"),"\n:::"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Layer"),(0,r.kt)("th",{parentName:"tr",align:null},"Key files"),(0,r.kt)("th",{parentName:"tr",align:null},"Function"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Application")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"src/main.cpp")),(0,r.kt)("td",{parentName:"tr",align:null},"Instantiates ",(0,r.kt)("inlineCode",{parentName:"td"},"SPIRenderer"),", updates parameters in a ",(0,r.kt)("inlineCode",{parentName:"td"},"while(1)")," loop, and calls ",(0,r.kt)("inlineCode",{parentName:"td"},"start()"),"; disables the watchdog and raises log level to warn for GPIO. (",(0,r.kt)("a",{parentName:"td",href:"https://raw.githubusercontent.com/openUC2/openUC2-LaserScanner/main/src/main.cpp",title:"raw.githubusercontent.com"},"GitHub"),")")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Render Engine")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"src/SPIRenderer.{h,cpp}")),(0,r.kt)("td",{parentName:"tr",align:null},"Converts image geometry into DAC samples, handles SPI transfers, and asserts pixel/line/frame triggers with single\u2013cycle GPIO writes. Implements ",(0,r.kt)("inlineCode",{parentName:"td"},"setParameters()"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"draw()"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"start()"),". (",(0,r.kt)("a",{parentName:"td",href:"https://raw.githubusercontent.com/openUC2/openUC2-LaserScanner/main/src/SPIRenderer.cpp",title:"raw.githubusercontent.com"},"GitHub"),")")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Board-select macros")),(0,r.kt)("td",{parentName:"tr",align:null},"same header"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"IS_XIAO"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"IS_XIAO_UC2GALVOBOARD")," choose the correct pin map at compile time. (",(0,r.kt)("a",{parentName:"td",href:"https://raw.githubusercontent.com/openUC2/openUC2-LaserScanner/main/src/SPIRenderer.h",title:"raw.githubusercontent.com"},"GitHub"),")")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Build system")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"platformio.ini")),(0,r.kt)("td",{parentName:"tr",align:null},"Two build environments: ",(0,r.kt)("strong",{parentName:"td"},"esp32dev")," (generic) and ",(0,r.kt)("strong",{parentName:"td"},"UC2","_","3","_","Xiao")," (Seeed XIAO ESP32-S3). Both use ESP-IDF with Arduino component; UART at 921 kbit s\u207b\xb9. (",(0,r.kt)("a",{parentName:"td",href:"https://raw.githubusercontent.com/openUC2/openUC2-LaserScanner/main/platformio.ini",title:"raw.githubusercontent.com"},"GitHub"),")")))),(0,r.kt)("h4",{id:"111--file-structure"},"11.1  File structure"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"openUC2-LaserScanner\n\u251c\u2500\u2500 src/                 # C++ sources\n\u2502   \u251c\u2500\u2500 main.cpp         # app_main() entry point\n\u2502   \u251c\u2500\u2500 SPIRenderer.cpp  # raster engine\n\u2502   \u2514\u2500\u2500 SPIRenderer.h\n\u251c\u2500\u2500 include/             # (optional) extra headers\n\u251c\u2500\u2500 lib/                 # third-party libs, e.g. UC2-CAN\n\u251c\u2500\u2500 python/              # helper scripts (ILDA, LUT generation)\n\u251c\u2500\u2500 KICAD/               # electrical design\n\u251c\u2500\u2500 platformio.ini       # build targets\n\u2514\u2500\u2500 sdkconfig.*          # pre-tuned IDF configs\n")),(0,r.kt)("h4",{id:"112--build-flow-platformio"},"11.2  Build flow (PlatformIO)"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Select ",(0,r.kt)("strong",{parentName:"li"},"UC2","_","3","_","Xiao"),"  in ",(0,r.kt)("em",{parentName:"li"},"platformio.ini"),"."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"pio run")," \u2192 ESP-IDF CMake \u2192 compile + link with Arduino component."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"pio run -t upload")," flashes over USB-CDC (921 kbit s\u207b\xb9)."),(0,r.kt)("li",{parentName:"ol"},"Partition scheme ",(0,r.kt)("inlineCode",{parentName:"li"},"custom_partition_esp32s3.csv")," reserves PSRAM cache and 1 MiB for OTA.")),(0,r.kt)("h4",{id:"113--runtime-tasks"},"11.3  Runtime tasks"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Task"),(0,r.kt)("th",{parentName:"tr",align:null},"Core affinity"),(0,r.kt)("th",{parentName:"tr",align:null},"Duty"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"mainTask (app","_","main)")),(0,r.kt)("td",{parentName:"tr",align:null},"core 0"),(0,r.kt)("td",{parentName:"tr",align:null},"parameter sweep, calls renderer, yields 10 ms to scheduler.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"IDF idle0/1")),(0,r.kt)("td",{parentName:"tr",align:null},"core 0/1"),(0,r.kt)("td",{parentName:"tr",align:null},"housekeeping (watchdog disabled for main).")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Additional tasks (",(0,r.kt)("em",{parentName:"td"},"optional"),")"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2014"),(0,r.kt)("td",{parentName:"tr",align:null},"CAN listener, WebSocket, or CLI can be added; use ",(0,r.kt)("inlineCode",{parentName:"td"},"xTaskCreatePinnedToCore"),".")))),(0,r.kt)("p",null,"The code presently runs everything in the foreground; heavy processing (e.g. CAN command parsing) should be off-loaded to a FreeRTOS task to keep the raster loop deterministic."),(0,r.kt)("h4",{id:"114--spirenderer-workflow"},"11.4  SPIRenderer workflow"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"constructor()\n  \u251c\u2500 configure GPIO for laser, LDAC, triggers\n  \u251c\u2500 initialise SPI3 @20 MHz (XIAO) or HSPI (generic)\n  \u2514\u2500 pre-compute nX, nY from (X_MIN\u2026X_MAX)/STEP\n\nstart()\n  \u2514\u2500 draw()\n\ndraw()\n  for each frame\n    assert all triggers high    \u2190 frame start\n    for X = X_MIN\u2026X_MAX\n      for Y = Y_MIN\u2026Y_MAX\n        clear triggers\n        hold LDAC low\n        SPI out 16-bit word to DAC-A (X)\n        SPI out 16-bit word to DAC-B (Y)\n        release LDAC                \u2190 both axes latch simultaneously\n        set pixel trigger, delay tPixelDwelltime \xb5s\n    issue line trigger each X-loop\n  clear all triggers              \u2190 frame end\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Timing")," \u2013 ",(0,r.kt)("inlineCode",{parentName:"li"},"esp_rom_delay_us()")," delivers sub-\xb5s waits; replace with a hardware timer ISR for dwell times <5 \xb5s."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Throughput")," \u2013 one SPI transaction per axis, LDAC latched once per pixel \u2192 2 \xd7 16 bits @ 20 MHz \u2248 1.6 \xb5s transfer; 512\xd7512 raster \u2248 0.42 s per frame exclusive of galvo settling."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Triggers")," \u2013 50 \u03a9 back-termination; rising edge marks ",(0,r.kt)("em",{parentName:"li"},"start")," of integration for FLIM/PMT cards.")),(0,r.kt)("h4",{id:"115--customisation-hooks"},"11.5  Customisation hooks"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Use case"),(0,r.kt)("th",{parentName:"tr",align:null},"Modification"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Different image size")),(0,r.kt)("td",{parentName:"tr",align:null},"call ",(0,r.kt)("inlineCode",{parentName:"td"},"setParameters()")," with new limits/step; renderer recomputes nX/nY without reallocating.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"External control")),(0,r.kt)("td",{parentName:"tr",align:null},"add a CAN listener task that writes into a shared parameters struct guarded by a mutex; call ",(0,r.kt)("inlineCode",{parentName:"td"},"renderer->start()")," from that task.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Scan patterns")),(0,r.kt)("td",{parentName:"tr",align:null},"replace the two nested ",(0,r.kt)("inlineCode",{parentName:"td"},"for")," loops with a lookup table of ",(0,r.kt)("inlineCode",{parentName:"td"},"(x,y)")," pairs (e.g. spiral, Lissajous).")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Higher speed")),(0,r.kt)("td",{parentName:"tr",align:null},"use queued (",(0,r.kt)("inlineCode",{parentName:"td"},"spi_device_queue_trans"),") DMA transfers and toggle LDAC from SPI post-trans callback to overlap SPI and galvo settling.")))),(0,r.kt)("h4",{id:"116--pin-map-compile-time"},"11.6  Pin map (compile-time)"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Signal"),(0,r.kt)("th",{parentName:"tr",align:null},"GPIO (UC2-Galvo)"),(0,r.kt)("th",{parentName:"tr",align:null},"GPIO (bare XIAO)"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"MOSI")),(0,r.kt)("td",{parentName:"tr",align:null},"9"),(0,r.kt)("td",{parentName:"tr",align:null},"7")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"SCK")),(0,r.kt)("td",{parentName:"tr",align:null},"7"),(0,r.kt)("td",{parentName:"tr",align:null},"8")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"CS")),(0,r.kt)("td",{parentName:"tr",align:null},"8"),(0,r.kt)("td",{parentName:"tr",align:null},"9")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"LDAC")),(0,r.kt)("td",{parentName:"tr",align:null},"6"),(0,r.kt)("td",{parentName:"tr",align:null},"6")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"TRIG PIXEL")),(0,r.kt)("td",{parentName:"tr",align:null},"2"),(0,r.kt)("td",{parentName:"tr",align:null},"2")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"TRIG LINE")),(0,r.kt)("td",{parentName:"tr",align:null},"3"),(0,r.kt)("td",{parentName:"tr",align:null},"3")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"TRIG FRAME")),(0,r.kt)("td",{parentName:"tr",align:null},"4"),(0,r.kt)("td",{parentName:"tr",align:null},"4")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"LASER blank")),(0,r.kt)("td",{parentName:"tr",align:null},"43"),(0,r.kt)("td",{parentName:"tr",align:null},"43")))),(0,r.kt)("p",null,"Defined in ",(0,r.kt)("inlineCode",{parentName:"p"},"SPIRenderer.h"),"; switch boards via ",(0,r.kt)("inlineCode",{parentName:"p"},"-DIS_XIAO_UC2GALVOBOARD")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"-DIS_XIAO")," build flag. (",(0,r.kt)("a",{parentName:"p",href:"https://raw.githubusercontent.com/openUC2/openUC2-LaserScanner/main/src/SPIRenderer.h",title:"raw.githubusercontent.com"},"GitHub"),")"),(0,r.kt)("h4",{id:"117--extending-the-firmware"},"11.7  Extending the firmware"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Finite-state machine")," \u2013 wrap the renderer in a state class (IDLE, SCANNING, PAUSED)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Streaming points")," \u2013 replace the nested loops by a ring buffer filled by CAN/UART for arbitrary point lists."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Persistent settings")," \u2013 store last used scan parameters to NVS (",(0,r.kt)("inlineCode",{parentName:"li"},"nvs_flash.h"),") and recall on boot."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Web OTA")," \u2013 enable ",(0,r.kt)("inlineCode",{parentName:"li"},"esp_https_ota")," component and reserve second app partition (already present in ",(0,r.kt)("inlineCode",{parentName:"li"},"custom_partition_esp32s3.csv"),").")),(0,r.kt)("hr",null))}d.isMDXComponent=!0},63597:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/galvo-06e1a38b4b35efd0c32dfe0e4016800f.png"},60319:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/galvo_1-44552aa79a4e6597aab4792e89703277.jpg"},99448:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/scan-437b17687dd54e02f7974162509804df.gif"}}]);