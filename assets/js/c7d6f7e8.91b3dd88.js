"use strict";(self.webpackChunkuc_2_docs=self.webpackChunkuc_2_docs||[]).push([[815],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>d});var o=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=o.createContext({}),p=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=p(e.components);return o.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},c=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),c=p(n),d=a,g=c["".concat(s,".").concat(d)]||c[d]||u[d]||r;return n?o.createElement(g,i(i({ref:t},m),{},{components:n})):o.createElement(g,i({ref:t},m))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var p=2;p<r;p++)i[p]=n[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}c.displayName="MDXCreateElement"},82112:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var o=n(87462),a=(n(67294),n(3905));const r={},i="UC2-REST: Motor",l={unversionedId:"Electronics/Advanced/UC2-REST/ESP32_Motor",id:"Electronics/Advanced/UC2-REST/ESP32_Motor",title:"UC2-REST: Motor",description:"This section provides detailed documentation on the Motor class designed for controlling motors via the firmware. The Motor class includes functionality for motor movement, triggering, position tracking, and stage scanning, among other features.",source:"@site/docs/04_Electronics/10_Advanced/UC2-REST/ESP32_Motor.md",sourceDirName:"04_Electronics/10_Advanced/UC2-REST",slug:"/Electronics/Advanced/UC2-REST/ESP32_Motor",permalink:"/docs/Electronics/Advanced/UC2-REST/ESP32_Motor",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"UC2-REST: Messaging",permalink:"/docs/Electronics/Advanced/UC2-REST/ESP32_Messaging_Callback"},next:{title:"Tutorial: UC2-REST",permalink:"/docs/Electronics/Advanced/UC2-REST/UC2-REST/"}},s={},p=[{value:"Motor Class Overview",id:"motor-class-overview",level:2},{value:"Constructor",id:"constructor",level:3},{value:"Motor Movement Methods",id:"motor-movement-methods",level:3},{value:"Moving Steppers",id:"moving-steppers",level:4},{value:"Stopping Motors",id:"stopping-motors",level:4},{value:"Moving in AZ Configuration",id:"moving-in-az-configuration",level:4},{value:"Example Usage",id:"example-usage",level:3},{value:"Stage Scanning",id:"stage-scanning",level:3},{value:"Trigger Configuration",id:"trigger-configuration",level:3},{value:"Position Tracking and Configuration",id:"position-tracking-and-configuration",level:3},{value:"Motor Configuration",id:"motor-configuration",level:3},{value:"Example Usage",id:"example-usage-1",level:3}],m={toc:p};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,o.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"uc2-rest-motor"},"UC2-REST: Motor"),(0,a.kt)("p",null,"This section provides detailed documentation on the ",(0,a.kt)("inlineCode",{parentName:"p"},"Motor")," class designed for controlling motors via the firmware. The ",(0,a.kt)("inlineCode",{parentName:"p"},"Motor")," class includes functionality for motor movement, triggering, position tracking, and stage scanning, among other features."),(0,a.kt)("h2",{id:"motor-class-overview"},"Motor Class Overview"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"Motor")," class is responsible for managing motor operations, including movement commands, position tracking, stage scanning, and trigger setting. This class interacts directly with the ESP32 hardware to perform these actions."),(0,a.kt)("h3",{id:"constructor"},"Constructor"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def __init__(self, parent=None):\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Parameters:")),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"parent")," (optional): A reference to the parent object for accessing shared methods or resources."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Description:")),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Initializes the motor controller with default settings, including motor configuration and position tracking.")))),(0,a.kt)("h3",{id:"motor-movement-methods"},"Motor Movement Methods"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"move_x"),", ",(0,a.kt)("inlineCode",{parentName:"strong"},"move_y"),", ",(0,a.kt)("inlineCode",{parentName:"strong"},"move_z"),", ",(0,a.kt)("inlineCode",{parentName:"strong"},"move_a"),", ",(0,a.kt)("inlineCode",{parentName:"strong"},"move_xy"),", ",(0,a.kt)("inlineCode",{parentName:"strong"},"move_xyz"),", ",(0,a.kt)("inlineCode",{parentName:"strong"},"move_xyza"),", ",(0,a.kt)("inlineCode",{parentName:"strong"},"move_az"),":")," Move motors in specified directions or to specific positions."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"move_forever"),":")," Continuously moves the motor until a stop command is issued."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"stop"),":")," Stops motor movement.")),(0,a.kt)("p",null,"Continuing from the previous section, let's extend the documentation to include ",(0,a.kt)("inlineCode",{parentName:"p"},"move_stepper"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"stop"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"move_az")," methods from the ",(0,a.kt)("inlineCode",{parentName:"p"},"Motor")," class. This will provide a comprehensive guide on how these methods can be utilized within the firmware to control motor movements, including stopping the motors and moving them in the AZ (A and Z axis) configuration."),(0,a.kt)("h4",{id:"moving-steppers"},"Moving Steppers"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def move_stepper(steps, speed, is_absolute=False, timeout=gTIMEOUT, acceleration=None, is_blocking=True, is_enabled=True):\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Parameters:")),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"steps"),": A tuple specifying the number of steps to move for each motor (A, X, Y, Z)."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"speed"),": A tuple indicating the speed for each motor's movement."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"is_absolute")," (optional): Indicates if the movement is absolute or relative to the current position."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"timeout")," (optional): The timeout for the operation."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"acceleration")," (optional): A tuple specifying the acceleration for each motor."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"is_blocking")," (optional): If ",(0,a.kt)("inlineCode",{parentName:"li"},"True"),", the method waits for the movement to complete before returning."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"is_enabled")," (optional): If ",(0,a.kt)("inlineCode",{parentName:"li"},"True"),", enables the motor before moving."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Description:")),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Moves the stepper motors according to the specified parameters. This method allows for precise control over each motor's movement, including direction, speed, and acceleration.")))),(0,a.kt)("h4",{id:"stopping-motors"},"Stopping Motors"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def stop(axis=None):\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Parameters:")),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"axis")," (optional): The axis or axes to stop. If ",(0,a.kt)("inlineCode",{parentName:"li"},"None"),", all motors are stopped."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Description:")),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Stops movement of one or more motors immediately. If no axis is specified, all motors are stopped.")))),(0,a.kt)("h4",{id:"moving-in-az-configuration"},"Moving in AZ Configuration"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def move_az(steps, speed, acceleration=None, is_blocking=False, is_absolute=False, is_enabled=True, timeout=gTIMEOUT):\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Parameters:")),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"steps"),": A tuple specifying the number of steps to move for the A and Z motors."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"speed"),": A tuple indicating the speed for the A and Z motors' movement."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"acceleration")," (optional): A tuple specifying the acceleration for the A and Z motors."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"is_blocking")," (optional): If ",(0,a.kt)("inlineCode",{parentName:"li"},"True"),", the method waits for the movement to complete before returning."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"is_absolute")," (optional): Indicates if the movement is absolute or relative to the current position."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"is_enabled")," (optional): If ",(0,a.kt)("inlineCode",{parentName:"li"},"True"),", enables the motor before moving."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"timeout")," (optional): The timeout for the operation."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Description:")),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Moves the A and Z motors according to the specified parameters. This method is useful for systems that require simultaneous control over the A and Z axes.")))),(0,a.kt)("h3",{id:"example-usage"},"Example Usage"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'# Move the stepper motors in a relative manner\nESP32.motor.move_stepper(steps=(100, 100, 0, 0), speed=(1000, 1000, 0, 0))\n\n# Stop the X and Y motors\nESP32.motor.stop(axis="XY")\n\n# Move in AZ configuration with blocking mode enabled\nESP32.motor.move_az(steps=(50, 50), speed=(500, 500), is_blocking=True)\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Description:"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"The first example demonstrates moving the A and X motors by 100 steps at a speed of 1000. The second example stops the X and Y motors, and the last example moves the A and Z motors by 50 steps at a speed of 500, waiting for the movement to complete before proceeding.")))),(0,a.kt)("h3",{id:"stage-scanning"},"Stage Scanning"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def startStageScanning(nStepsLine, dStepsLine, nTriggerLine, nStepsPixel, dStepsPixel, nTriggerPixel, delayTimeStep, nFrames):\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Description:"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Starts a stage scanning operation with configurable parameters for line steps, pixel steps, triggers, and frame count.")))),(0,a.kt)("h3",{id:"trigger-configuration"},"Trigger Configuration"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def setTrigger(axis, pin, offset, period):\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Parameters:")),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"axis"),": The motor axis (X, Y, Z, A) to set the trigger for."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"pin"),": The pin number to use for the trigger."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"offset"),": The offset for the trigger signal."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"period"),": The period for the trigger signal."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Description:")),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Configures a trigger for a specific motor axis.")))),(0,a.kt)("h3",{id:"position-tracking-and-configuration"},"Position Tracking and Configuration"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"get_position"),":")," Retrieves the current position of the motors."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"set_position"),":")," Sets the position of a specific motor."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"set_motor_currentPosition"),":")," Updates the current position for a specified motor."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"set_motor_acceleration"),":")," Sets the acceleration for a specified motor.")),(0,a.kt)("h3",{id:"motor-configuration"},"Motor Configuration"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"setup_motor"),":")," Configures the motor limits, step size, and backlash."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"setIsCoreXY"),":")," Configures the system to use a CoreXY setup."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"set_motor_axis_order"),":")," Sets the order of the motor axes.")),(0,a.kt)("h3",{id:"example-usage-1"},"Example Usage"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'import uc2rest\n\n# Initialize the UC2 client with the ESP32 serial port\nESP32 = uc2rest.UC2Client(serialport="COM3", baudrate=500000, DEBUG=True)\n\n# Start stage scanning with specified parameters\nESP32.motor.startStageScanning(nStepsLine=100, dStepsLine=1, nTriggerLine=1, nStepsPixel=100, dStepsPixel=1, nTriggerPixel=1, delayTimeStep=10, nFrames=50)\n\n# Set a trigger on the X axis\nESP32.motor.setTrigger(axis="X", pin=1, offset=0, period=1)\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Description:"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"This example demonstrates initializing the motor control system, starting a stage scanning operation, and setting a trigger for motor movement.")))))}u.isMDXComponent=!0}}]);