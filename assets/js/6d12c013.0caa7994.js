"use strict";(self.webpackChunkuc_2_docs=self.webpackChunkuc_2_docs||[]).push([[6089],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>d});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),u=p(n),d=r,g=u["".concat(s,".").concat(d)]||u[d]||c[d]||i;return n?a.createElement(g,l(l({ref:t},m),{},{components:n})):a.createElement(g,l({ref:t},m))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var p=2;p<i;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},7968:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const i={},l="ImSwitch Jupyter Integration with extipy",o={unversionedId:"ImSwitch/Advanced/Experimental/JUPYTER_INTEGRATION",id:"ImSwitch/Advanced/Experimental/JUPYTER_INTEGRATION",title:"ImSwitch Jupyter Integration with extipy",description:"This document provides comprehensive documentation for integrating Jupyter notebooks with ImSwitch using the extipy package. This integration allows you to connect Jupyter Lab/Notebook to a running ImSwitch instance for live hardware control, data analysis, and debugging.",source:"@site/docs/05_ImSwitch/Advanced/06_Experimental/JUPYTER_INTEGRATION.md",sourceDirName:"05_ImSwitch/Advanced/06_Experimental",slug:"/ImSwitch/Advanced/Experimental/JUPYTER_INTEGRATION",permalink:"/docs/ImSwitch/Advanced/Experimental/JUPYTER_INTEGRATION",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"ImSwitch Jupyter Integration with extipy",permalink:"/docs/ImSwitch/Advanced/Experimental/ImSwitch_Jupyter_Integration_README"},next:{title:"openUC2 Workshops",permalink:"/docs/WORKSHOPS/"}},s={},p=[{value:"Quick Start",id:"quick-start",level:2},{value:"Installation",id:"installation",level:2},{value:"Install extipy",id:"install-extipy",level:3},{value:"Command Line Arguments",id:"command-line-arguments",level:2},{value:"Example Commands",id:"example-commands",level:3},{value:"Usage Examples",id:"usage-examples",level:2},{value:"Accessing Hardware Managers",id:"accessing-hardware-managers",level:3},{value:"Laser Control",id:"laser-control",level:3},{value:"Camera/Detector Control",id:"cameradetector-control",level:3},{value:"Stage/Positioner Control",id:"stagepositioner-control",level:3},{value:"Data Analysis and Visualization",id:"data-analysis-and-visualization",level:3},{value:"Safety and Best Practices",id:"safety-and-best-practices",level:2},{value:"Safety Considerations",id:"safety-considerations",level:3},{value:"Safe Hardware Operation Template",id:"safe-hardware-operation-template",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues and Solutions",id:"common-issues-and-solutions",level:3},{value:"Debugging Commands",id:"debugging-commands",level:3},{value:"Technical Details",id:"technical-details",level:2},{value:"How It Works",id:"how-it-works",level:3},{value:"Architecture",id:"architecture",level:3},{value:"Contributing",id:"contributing",level:2},{value:"License",id:"license",level:2},{value:"Acknowledgments",id:"acknowledgments",level:2}],m={toc:p};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"imswitch-jupyter-integration-with-extipy"},"ImSwitch Jupyter Integration with extipy"),(0,r.kt)("p",null,"This document provides comprehensive documentation for integrating Jupyter notebooks with ImSwitch using the ",(0,r.kt)("inlineCode",{parentName:"p"},"extipy")," package. This integration allows you to connect Jupyter Lab/Notebook to a running ImSwitch instance for live hardware control, data analysis, and debugging."),(0,r.kt)("p",null,"\u26a0\ufe0f ",(0,r.kt)("strong",{parentName:"p"},"Important Warning"),": When using this integration, the ImSwitch application cannot be stopped with ordinary means (Ctrl+C) because the embedded kernel takes control of the main thread. Use this feature carefully in production environments."),(0,r.kt)("h2",{id:"quick-start"},"Quick Start"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# 1. Install extipy\npip install git+https://github.com/ebanner/extipy.git\n\n# 2. Start ImSwitch with embedded kernel\npython -m imswitch --with-kernel\n\n# 3. In a separate terminal, start Jupyter Lab with extipy provisioner\njupyter lab --KernelProvisionerFactory.default_provisioner_name=extipy-provisioner\n\n# 4. Create a new notebook and connect to the ImSwitch kernel\n")),(0,r.kt)("h2",{id:"installation"},"Installation"),(0,r.kt)("h3",{id:"install-extipy"},"Install extipy"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# From GitHub (recommended)\npip install git+https://github.com/ebanner/extipy.git\n\n# Or from source\ngit clone https://github.com/ebanner/extipy.git\ncd extipy\npip install -e .\n")),(0,r.kt)("h2",{id:"command-line-arguments"},"Command Line Arguments"),(0,r.kt)("p",null,"ImSwitch supports the following command-line arguments for Jupyter integration:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Flag"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"--with-kernel")),(0,r.kt)("td",{parentName:"tr",align:null},"Start with embedded Jupyter kernel"),(0,r.kt)("td",{parentName:"tr",align:null},"False")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"--headless")),(0,r.kt)("td",{parentName:"tr",align:null},"Run without GUI"),(0,r.kt)("td",{parentName:"tr",align:null},"False")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"--config-file")),(0,r.kt)("td",{parentName:"tr",align:null},"Path to setup configuration file"),(0,r.kt)("td",{parentName:"tr",align:null},"None")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"--config-folder")),(0,r.kt)("td",{parentName:"tr",align:null},"Path to config folder"),(0,r.kt)("td",{parentName:"tr",align:null},"None")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"--ext-data-folder")),(0,r.kt)("td",{parentName:"tr",align:null},"Path for data storage"),(0,r.kt)("td",{parentName:"tr",align:null},"None")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"--http-port")),(0,r.kt)("td",{parentName:"tr",align:null},"HTTP server port"),(0,r.kt)("td",{parentName:"tr",align:null},"8001")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"--socket-port")),(0,r.kt)("td",{parentName:"tr",align:null},"WebSocket port"),(0,r.kt)("td",{parentName:"tr",align:null},"8002")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"--no-ssl")),(0,r.kt)("td",{parentName:"tr",align:null},"Disable SSL"),(0,r.kt)("td",{parentName:"tr",align:null},"False")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"--scan-ext-drive-mount")),(0,r.kt)("td",{parentName:"tr",align:null},"Scan for external USB drives"),(0,r.kt)("td",{parentName:"tr",align:null},"False")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"--ext-drive-mount")),(0,r.kt)("td",{parentName:"tr",align:null},"External drive mount point"),(0,r.kt)("td",{parentName:"tr",align:null},"None")))),(0,r.kt)("h3",{id:"example-commands"},"Example Commands"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# Basic usage with kernel\npython -m imswitch --with-kernel\n\n# Headless mode with kernel (recommended for servers)\npython -m imswitch --headless --with-kernel\n\n# Full configuration example\npython -m imswitch --headless --with-kernel \\\n    --config-file /path/to/your/config.json \\\n    --config-folder /path/to/config \\\n    --ext-data-folder /path/to/data \\\n    --http-port 8001 \\\n    --socket-port 8002\n")),(0,r.kt)("h2",{id:"usage-examples"},"Usage Examples"),(0,r.kt)("h3",{id:"accessing-hardware-managers"},"Accessing Hardware Managers"),(0,r.kt)("p",null,"Once connected to the ImSwitch kernel, you have direct access to all hardware managers:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# Check available variables\nprint(\"Available variables:\")\nfor var_name in sorted(dir()):\n    if not var_name.startswith('_'):\n        print(f\"  {var_name}: {type(globals().get(var_name, 'Not found'))}\")\n\n# Access the master controller\nprint(\"Master Controller:\", master)\n\n# List available managers\nmanagers = [attr for attr in dir(master) if attr.endswith('Manager') and not attr.startswith('_')]\nprint(\"Available Managers:\")\nfor manager in managers:\n    print(f\"  {manager}: {getattr(master, manager, 'Not available')}\")\n")),(0,r.kt)("h3",{id:"laser-control"},"Laser Control"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# Check available lasers\nif \'lasersManager\' in globals():\n    print("Available lasers:")\n    for laser_name in lasersManager.getAllDeviceNames():\n        print(f"  - {laser_name}")\n        \n    # Control first laser\n    laser_names = lasersManager.getAllDeviceNames()\n    if laser_names:\n        first_laser = laser_names[0]\n        current_power = lasersManager[first_laser].power\n        print(f"Current power: {current_power}")\n        \n        # Set new power (be careful!)\n        # lasersManager[first_laser].setPower(50)\n')),(0,r.kt)("h3",{id:"cameradetector-control"},"Camera/Detector Control"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# Check available detectors\nif \'detectorsManager\' in globals():\n    print("Available detectors:")\n    for detector_name in detectorsManager.getAllDeviceNames():\n        print(f"  - {detector_name}")\n        \n    # Capture an image\n    detector_names = detectorsManager.getAllDeviceNames()\n    if detector_names:\n        detector = detectorsManager[detector_names[0]]\n        image = detector.getLatestFrame()\n        print(f"Image shape: {image.shape if image is not None else \'No image captured\'}")\n')),(0,r.kt)("h3",{id:"stagepositioner-control"},"Stage/Positioner Control"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# Check available positioners\nif \'positionersManager\' in globals():\n    print("Available positioners:")\n    for positioner_name in positionersManager.getAllDeviceNames():\n        print(f"  - {positioner_name}")\n        \n    # Get current position\n    positioner_names = positionersManager.getAllDeviceNames()\n    if positioner_names:\n        positioner = positionersManager[positioner_names[0]]\n        current_pos = positioner.position\n        print(f"Current position: {current_pos}")\n        \n        # Move relatively (be careful!)\n        # positioner.move(value=10, axis=\'X\', is_absolute=False, is_blocking=True)\n')),(0,r.kt)("h3",{id:"data-analysis-and-visualization"},"Data Analysis and Visualization"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import numpy as np\nimport matplotlib.pyplot as plt\n\n# Capture and analyze an image\nif 'detectorsManager' in globals():\n    detector_names = detectorsManager.getAllDeviceNames()\n    if detector_names:\n        detector = detectorsManager[detector_names[0]]\n        image = detector.getLatestFrame()\n        \n        if image is not None:\n            # Display image\n            plt.figure(figsize=(10, 8))\n            plt.imshow(image, cmap='gray')\n            plt.title('Latest Frame')\n            plt.colorbar()\n            plt.show()\n            \n            # Print statistics\n            print(f\"Image shape: {image.shape}\")\n            print(f\"Min: {np.min(image)}, Max: {np.max(image)}\")\n            print(f\"Mean: {np.mean(image):.2f}, Std: {np.std(image):.2f}\")\n")),(0,r.kt)("h2",{id:"safety-and-best-practices"},"Safety and Best Practices"),(0,r.kt)("h3",{id:"safety-considerations"},"Safety Considerations"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Hardware Safety"),": Always be cautious when controlling hardware remotely:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Start with low power settings for lasers"),(0,r.kt)("li",{parentName:"ul"},"Make small movements for stages/positioners"),(0,r.kt)("li",{parentName:"ul"},"Monitor equipment during remote operations"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Application Control"),": Remember that the kernel integration affects application lifecycle:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"The application cannot be stopped normally with Ctrl+C"),(0,r.kt)("li",{parentName:"ul"},"Plan for proper shutdown procedures"),(0,r.kt)("li",{parentName:"ul"},"Use this feature primarily for development and testing"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Network Security"),": When running in headless mode:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Ensure proper network security"),(0,r.kt)("li",{parentName:"ul"},"Use VPN or secure networks for remote access"),(0,r.kt)("li",{parentName:"ul"},"Consider authentication mechanisms")))),(0,r.kt)("h3",{id:"safe-hardware-operation-template"},"Safe Hardware Operation Template"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'def safe_laser_operation(laser_name, target_power, max_power=100):\n    """\n    Safely control laser power with checks and limits.\n    \n    Args:\n        laser_name: Name of the laser to control\n        target_power: Desired power setting\n        max_power: Maximum allowed power for safety\n    """\n    if \'lasersManager\' not in globals():\n        print("Error: Lasers manager not available")\n        return False\n        \n    if laser_name not in lasersManager.getAllDeviceNames():\n        print(f"Error: Laser \'{laser_name}\' not found")\n        return False\n        \n    if target_power > max_power:\n        print(f"Error: Target power {target_power} exceeds maximum {max_power}")\n        return False\n        \n    try:\n        laser = lasersManager[laser_name]\n        current_power = laser.power\n        print(f"Current power: {current_power}")\n        print(f"Setting power to: {target_power}")\n        \n        # Uncomment to actually set power\n        # laser.setPower(target_power)\n        # new_power = laser.power\n        # print(f"New power: {new_power}")\n        \n        return True\n        \n    except Exception as e:\n        print(f"Error controlling laser: {e}")\n        return False\n\n# Example usage (commented for safety)\n# safe_laser_operation(\'Laser_1\', 25, max_power=50)\n')),(0,r.kt)("h2",{id:"troubleshooting"},"Troubleshooting"),(0,r.kt)("h3",{id:"common-issues-and-solutions"},"Common Issues and Solutions"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Connection Issues"),": If Jupyter Lab cannot connect to the kernel:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Ensure ImSwitch is running with ",(0,r.kt)("inlineCode",{parentName:"li"},"--with-kernel")," flag"),(0,r.kt)("li",{parentName:"ul"},"Check that extipy is properly installed"),(0,r.kt)("li",{parentName:"ul"},"Verify that no firewall is blocking the connection"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Kernel Not Responding"),": If the kernel becomes unresponsive:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"The ImSwitch application cannot be stopped with Ctrl+C when kernel is active"),(0,r.kt)("li",{parentName:"ul"},"You may need to force-quit the ImSwitch process"),(0,r.kt)("li",{parentName:"ul"},"Restart both ImSwitch and Jupyter Lab"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Hardware Manager Not Available"),": If managers are not accessible:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Check that ImSwitch loaded the hardware configuration correctly"),(0,r.kt)("li",{parentName:"ul"},"Verify that hardware devices are connected and configured"),(0,r.kt)("li",{parentName:"ul"},"Check the ImSwitch logs for initialization errors")))),(0,r.kt)("h3",{id:"debugging-commands"},"Debugging Commands"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# Check ImSwitch module structure\nprint("Module Main Controllers:")\nif \'moduleMainControllers\' in globals():\n    for name, controller in moduleMainControllers.mapping.items():\n        print(f"  {name}: {type(controller)}")\n\n# Check kernel connection info\nimport json\nimport glob\nimport subprocess\n\ntry:\n    result = subprocess.run([\'jupyter\', \'--runtime-dir\'], \n                          capture_output=True, text=True, check=True)\n    runtime_dir = result.stdout.strip()\n    print(f"Jupyter runtime directory: {runtime_dir}")\n    \n    # List connection files\n    connection_files = glob.glob(f"{runtime_dir}/kernel-*.json")\n    print(f"Active kernel connection files:")\n    for file in connection_files:\n        print(f"  {file}")\n        \nexcept Exception as e:\n    print(f"Error getting runtime info: {e}")\n')),(0,r.kt)("h2",{id:"technical-details"},"Technical Details"),(0,r.kt)("h3",{id:"how-it-works"},"How It Works"),(0,r.kt)("p",null,"The integration uses the ",(0,r.kt)("inlineCode",{parentName:"p"},"extipy")," package, which provides a custom Jupyter kernel provisioner that can connect to existing IPython kernels. When ImSwitch starts with the ",(0,r.kt)("inlineCode",{parentName:"p"},"--with-kernel")," flag:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"ImSwitch creates an embedded IPython kernel in its main process"),(0,r.kt)("li",{parentName:"ol"},"The kernel has access to all ImSwitch managers and controllers"),(0,r.kt)("li",{parentName:"ol"},"extipy's provisioner detects the latest kernel connection file"),(0,r.kt)("li",{parentName:"ol"},"Jupyter Lab/Notebook connects to the existing kernel instead of starting a new one")),(0,r.kt)("h3",{id:"architecture"},"Architecture"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Jupyter Lab   \u2502\u25c4\u2500\u2500\u25ba\u2502   extipy         \u2502\u25c4\u2500\u2500\u25ba\u2502   ImSwitch      \u2502\n\u2502   /Notebook     \u2502    \u2502   provisioner    \u2502    \u2502   + IPython     \u2502\n\u2502                 \u2502    \u2502                  \u2502    \u2502   kernel        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"contributing"},"Contributing"),(0,r.kt)("p",null,"If you find issues or have suggestions for improvements:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Check the existing issues in the ImSwitch repository"),(0,r.kt)("li",{parentName:"ol"},"Create a new issue with detailed description"),(0,r.kt)("li",{parentName:"ol"},"Include relevant error messages and system information"),(0,r.kt)("li",{parentName:"ol"},"Consider submitting a pull request with fixes")),(0,r.kt)("h2",{id:"license"},"License"),(0,r.kt)("p",null,"This integration follows the same license as ImSwitch (GNU General Public License v3.0)."),(0,r.kt)("h2",{id:"acknowledgments"},"Acknowledgments"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/ebanner/extipy"},"extipy")," - The package that makes this integration possible"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/pyxll/pyxll-jupyter"},"pyxll-jupyter")," - Original inspiration for the kernel provisioner approach"),(0,r.kt)("li",{parentName:"ul"},"ImSwitch development team - For creating the extensible architecture that enables this integration")))}c.isMDXComponent=!0}}]);