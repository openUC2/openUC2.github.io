"use strict";(self.webpackChunkuc_2_docs=self.webpackChunkuc_2_docs||[]).push([[6933],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>u});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),d=p(n),u=r,g=d["".concat(s,".").concat(u)]||d[u]||c[u]||i;return n?a.createElement(g,l(l({ref:t},m),{},{components:n})):a.createElement(g,l({ref:t},m))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var p=2;p<i;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},14798:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const i={},l="ImSwitch Jupyter Integration with extipy",o={unversionedId:"ImSwitch/Advanced/Experimental/ImSwitch_Jupyter_Integration_README",id:"ImSwitch/Advanced/Experimental/ImSwitch_Jupyter_Integration_README",title:"ImSwitch Jupyter Integration with extipy",description:"This notebook provides comprehensive documentation for integrating Jupyter notebooks with ImSwitch using the extipy package. This integration allows you to connect Jupyter Lab/Notebook to a running ImSwitch instance for live hardware control, data analysis, and debugging.",source:"@site/docs/05_ImSwitch/Advanced/06_Experimental/ImSwitch_Jupyter_Integration_README.md",sourceDirName:"05_ImSwitch/Advanced/06_Experimental",slug:"/ImSwitch/Advanced/Experimental/ImSwitch_Jupyter_Integration_README",permalink:"/docs/ImSwitch/Advanced/Experimental/ImSwitch_Jupyter_Integration_README",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"ImSwitch Experimental Features Documentation",permalink:"/docs/ImSwitch/Advanced/Experimental/Headless-Mode"},next:{title:"ImSwitch Jupyter Integration with extipy",permalink:"/docs/ImSwitch/Advanced/Experimental/JUPYTER_INTEGRATION"}},s={},p=[{value:"1. Installation and Setup",id:"1-installation-and-setup",level:2},{value:"Install extipy",id:"install-extipy",level:3},{value:"Alternative Installation (from source)",id:"alternative-installation-from-source",level:3},{value:"2. Starting ImSwitch with Jupyter Kernel",id:"2-starting-imswitch-with-jupyter-kernel",level:2},{value:"Command Line Flags",id:"command-line-flags",level:3},{value:"Available Command Line Arguments",id:"available-command-line-arguments",level:3},{value:"3. Connecting Jupyter Lab to ImSwitch",id:"3-connecting-jupyter-lab-to-imswitch",level:2},{value:"Alternative: Jupyter Notebook",id:"alternative-jupyter-notebook",level:3},{value:"4. Accessing ImSwitch Hardware Managers",id:"4-accessing-imswitch-hardware-managers",level:2},{value:"5. Hardware Control Examples",id:"5-hardware-control-examples",level:2},{value:"Laser Control",id:"laser-control",level:3},{value:"Camera/Detector Control",id:"cameradetector-control",level:3},{value:"Stage/Positioner Control",id:"stagepositioner-control",level:3},{value:"6. Data Analysis and Visualization",id:"6-data-analysis-and-visualization",level:2},{value:"7. Advanced: Recording and Automation",id:"7-advanced-recording-and-automation",level:2},{value:"8. Debugging and Troubleshooting",id:"8-debugging-and-troubleshooting",level:2},{value:"Common Issues and Solutions",id:"common-issues-and-solutions",level:3},{value:"9. Best Practices and Safety",id:"9-best-practices-and-safety",level:2},{value:"Safety Considerations",id:"safety-considerations",level:3},{value:"Performance Tips",id:"performance-tips",level:3},{value:"10. Summary",id:"10-summary",level:2},{value:"Quick Reference Commands",id:"quick-reference-commands",level:3}],m={toc:p};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"imswitch-jupyter-integration-with-extipy"},"ImSwitch Jupyter Integration with extipy"),(0,r.kt)("p",null,"This notebook provides comprehensive documentation for integrating Jupyter notebooks with ImSwitch using the ",(0,r.kt)("inlineCode",{parentName:"p"},"extipy")," package. This integration allows you to connect Jupyter Lab/Notebook to a running ImSwitch instance for live hardware control, data analysis, and debugging."),(0,r.kt)("p",null,"\u26a0\ufe0f ",(0,r.kt)("strong",{parentName:"p"},"Important Warning"),": When using this integration, the ImSwitch application cannot be stopped with ordinary means (Ctrl+C) because the embedded kernel takes control of the main thread. Use this feature carefully in production environments."),(0,r.kt)("h2",{id:"1-installation-and-setup"},"1. Installation and Setup"),(0,r.kt)("h3",{id:"install-extipy"},"Install extipy"),(0,r.kt)("p",null,"First, install the extipy package which enables connection to existing IPython kernels:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# Install extipy from GitHub\n!pip install git+https://github.com/ebanner/extipy.git\n")),(0,r.kt)("h3",{id:"alternative-installation-from-source"},"Alternative Installation (from source)"),(0,r.kt)("p",null,"If you prefer to install from source:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# Clone and install from source\n!git clone https://github.com/ebanner/extipy.git\n!cd extipy && pip install -e .\n")),(0,r.kt)("h2",{id:"2-starting-imswitch-with-jupyter-kernel"},"2. Starting ImSwitch with Jupyter Kernel"),(0,r.kt)("p",null,"ImSwitch now supports embedded Jupyter kernel integration through command-line flags. Here are the available options:"),(0,r.kt)("h3",{id:"command-line-flags"},"Command Line Flags"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# Start ImSwitch with embedded Jupyter kernel\npython -m imswitch --with-kernel\n\n# Start in headless mode with kernel (recommended for server deployments)\npython -m imswitch --headless --with-kernel\n\n# Full example with all relevant flags\npython -m imswitch --headless --with-kernel \\\n    --config-file /path/to/your/config.json \\\n    --config-folder /path/to/config \\\n    --ext-data-folder /path/to/data \\\n    --http-port 8001 \\\n    --socket-port 8002\n")),(0,r.kt)("h3",{id:"available-command-line-arguments"},"Available Command Line Arguments"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Flag"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"--with-kernel")),(0,r.kt)("td",{parentName:"tr",align:null},"Start with embedded Jupyter kernel"),(0,r.kt)("td",{parentName:"tr",align:null},"False")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"--headless")),(0,r.kt)("td",{parentName:"tr",align:null},"Run without GUI"),(0,r.kt)("td",{parentName:"tr",align:null},"False")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"--config-file")),(0,r.kt)("td",{parentName:"tr",align:null},"Path to setup configuration file"),(0,r.kt)("td",{parentName:"tr",align:null},"None")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"--config-folder")),(0,r.kt)("td",{parentName:"tr",align:null},"Path to config folder"),(0,r.kt)("td",{parentName:"tr",align:null},"None")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"--ext-data-folder")),(0,r.kt)("td",{parentName:"tr",align:null},"Path for data storage"),(0,r.kt)("td",{parentName:"tr",align:null},"None")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"--http-port")),(0,r.kt)("td",{parentName:"tr",align:null},"HTTP server port"),(0,r.kt)("td",{parentName:"tr",align:null},"8001")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"--socket-port")),(0,r.kt)("td",{parentName:"tr",align:null},"WebSocket port"),(0,r.kt)("td",{parentName:"tr",align:null},"8002")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"--no-ssl")),(0,r.kt)("td",{parentName:"tr",align:null},"Disable SSL"),(0,r.kt)("td",{parentName:"tr",align:null},"False")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"--scan-ext-drive-mount")),(0,r.kt)("td",{parentName:"tr",align:null},"Scan for external USB drives"),(0,r.kt)("td",{parentName:"tr",align:null},"False")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"--ext-drive-mount")),(0,r.kt)("td",{parentName:"tr",align:null},"External drive mount point"),(0,r.kt)("td",{parentName:"tr",align:null},"None")))),(0,r.kt)("h2",{id:"3-connecting-jupyter-lab-to-imswitch"},"3. Connecting Jupyter Lab to ImSwitch"),(0,r.kt)("p",null,"Once ImSwitch is running with the ",(0,r.kt)("inlineCode",{parentName:"p"},"--with-kernel")," flag, you can connect Jupyter Lab to the embedded kernel:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# Start Jupyter Lab with extipy provisioner\n# Run this in a separate terminal\n!jupyter lab --KernelProvisionerFactory.default_provisioner_name=extipy-provisioner\n")),(0,r.kt)("h3",{id:"alternative-jupyter-notebook"},"Alternative: Jupyter Notebook"),(0,r.kt)("p",null,"You can also use Jupyter Notebook instead of Jupyter Lab:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# Start Jupyter Notebook with extipy provisioner\n!jupyter notebook --KernelProvisionerFactory.default_provisioner_name=extipy-provisioner\n")),(0,r.kt)("h2",{id:"4-accessing-imswitch-hardware-managers"},"4. Accessing ImSwitch Hardware Managers"),(0,r.kt)("p",null,"When connected to the ImSwitch kernel, you have direct access to all hardware managers and controllers:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# Check available variables in the kernel namespace\nprint(\"Available variables:\")\nfor var_name in sorted(dir()):\n    if not var_name.startswith('_'):\n        print(f\"  {var_name}: {type(globals().get(var_name, 'Not found'))}\")\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# Access the master controller (main hardware interface)\nprint("Master Controller:", master)\nprint("Type:", type(master))\n\n# List available managers\nmanagers = [attr for attr in dir(master) if attr.endswith(\'Manager\') and not attr.startswith(\'_\')]\nprint("\\nAvailable Managers:")\nfor manager in managers:\n    print(f"  {manager}: {getattr(master, manager, \'Not available\')}")\n')),(0,r.kt)("h2",{id:"5-hardware-control-examples"},"5. Hardware Control Examples"),(0,r.kt)("h3",{id:"laser-control"},"Laser Control"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# Check available lasers\nif \'lasersManager\' in globals():\n    print("Available lasers:")\n    for laser_name in lasersManager.getAllDeviceNames():\n        print(f"  - {laser_name}")\n        \n    # Example: Control first laser\n    laser_names = lasersManager.getAllDeviceNames()\n    if laser_names:\n        first_laser = laser_names[0]\n        print(f"\\nControlling laser: {first_laser}")\n        \n        # Get current power\n        current_power = lasersManager[first_laser].power\n        print(f"Current power: {current_power}")\n        \n        # Set new power (be careful!)\n        # lasersManager[first_laser].setPower(50)  # Uncomment to set power to 50\n        # print(f"Power set to: {lasersManager[first_laser].power}")\nelse:\n    print("Lasers manager not available")\n')),(0,r.kt)("h3",{id:"cameradetector-control"},"Camera/Detector Control"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# Check available detectors/cameras\nif \'detectorsManager\' in globals():\n    print("Available detectors:")\n    for detector_name in detectorsManager.getAllDeviceNames():\n        print(f"  - {detector_name}")\n        \n    # Example: Get detector parameters\n    detector_names = detectorsManager.getAllDeviceNames()\n    if detector_names:\n        first_detector = detector_names[0]\n        print(f"\\nDetector info: {first_detector}")\n        \n        detector = detectorsManager[first_detector]\n        print(f"Model: {detector.model}")\n        print(f"Shape: {detector.shape}")\n        \n        # Capture an image\n        print("Capturing image...")\n        image = detector.getLatestFrame()\n        print(f"Image shape: {image.shape if image is not None else \'No image captured\'}")\nelse:\n    print("Detectors manager not available")\n')),(0,r.kt)("h3",{id:"stagepositioner-control"},"Stage/Positioner Control"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# Check available positioners\nif \'positionersManager\' in globals():\n    print("Available positioners:")\n    for positioner_name in positionersManager.getAllDeviceNames():\n        print(f"  - {positioner_name}")\n        \n    # Example: Get current position\n    positioner_names = positionersManager.getAllDeviceNames()\n    if positioner_names:\n        first_positioner = positioner_names[0]\n        print(f"\\nPositioner: {first_positioner}")\n        \n        positioner = positionersManager[first_positioner]\n        current_pos = positioner.position\n        print(f"Current position: {current_pos}")\n        \n        # Move relatively (be careful!)\n        # positioner.move(value=10, axis=\'X\', is_absolute=False, is_blocking=True)\n        # print(f"New position: {positioner.position}")\nelse:\n    print("Positioners manager not available")\n')),(0,r.kt)("h2",{id:"6-data-analysis-and-visualization"},"6. Data Analysis and Visualization"),(0,r.kt)("p",null,"You can perform real-time data analysis and visualization:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import numpy as np\nimport matplotlib.pyplot as plt\n\n# Example: Capture and analyze an image\nif 'detectorsManager' in globals():\n    detector_names = detectorsManager.getAllDeviceNames()\n    if detector_names:\n        detector = detectorsManager[detector_names[0]]\n        image = detector.getLatestFrame()\n        \n        if image is not None:\n            # Display image\n            plt.figure(figsize=(10, 8))\n            plt.subplot(2, 2, 1)\n            plt.imshow(image, cmap='gray')\n            plt.title('Latest Frame')\n            plt.colorbar()\n            \n            # Histogram\n            plt.subplot(2, 2, 2)\n            plt.hist(image.flatten(), bins=50, alpha=0.7)\n            plt.title('Intensity Histogram')\n            plt.xlabel('Intensity')\n            plt.ylabel('Count')\n            \n            # Profile along center row\n            plt.subplot(2, 2, 3)\n            center_row = image[image.shape[0]//2, :]\n            plt.plot(center_row)\n            plt.title('Center Row Profile')\n            plt.xlabel('Pixel')\n            plt.ylabel('Intensity')\n            \n            # Profile along center column\n            plt.subplot(2, 2, 4)\n            center_col = image[:, image.shape[1]//2]\n            plt.plot(center_col)\n            plt.title('Center Column Profile')\n            plt.xlabel('Pixel')\n            plt.ylabel('Intensity')\n            \n            plt.tight_layout()\n            plt.show()\n            \n            # Print statistics\n            print(f\"Image statistics:\")\n            print(f\"  Shape: {image.shape}\")\n            print(f\"  Min: {np.min(image)}\")\n            print(f\"  Max: {np.max(image)}\")\n            print(f\"  Mean: {np.mean(image):.2f}\")\n            print(f\"  Std: {np.std(image):.2f}\")\nelse:\n    print(\"No detector available for analysis\")\n")),(0,r.kt)("h2",{id:"7-advanced-recording-and-automation"},"7. Advanced: Recording and Automation"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# Example: Automated data collection\nif \'recordingManager\' in globals():\n    print("Recording Manager available")\n    print(f"Recording status: {recordingManager}")\n    \n    # Example: Start/stop recording\n    # recordingManager.startRecording()  # Uncomment to start recording\n    # time.sleep(5)  # Record for 5 seconds\n    # recordingManager.stopRecording()  # Uncomment to stop recording\nelse:\n    print("Recording manager not available")\n')),(0,r.kt)("h2",{id:"8-debugging-and-troubleshooting"},"8. Debugging and Troubleshooting"),(0,r.kt)("h3",{id:"common-issues-and-solutions"},"Common Issues and Solutions"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Connection Issues"),": If Jupyter Lab cannot connect to the kernel:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Ensure ImSwitch is running with ",(0,r.kt)("inlineCode",{parentName:"li"},"--with-kernel")," flag"),(0,r.kt)("li",{parentName:"ul"},"Check that extipy is properly installed"),(0,r.kt)("li",{parentName:"ul"},"Verify that no firewall is blocking the connection"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Kernel Not Responding"),": If the kernel becomes unresponsive:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"The ImSwitch application cannot be stopped with Ctrl+C when kernel is active"),(0,r.kt)("li",{parentName:"ul"},"You may need to force-quit the ImSwitch process"),(0,r.kt)("li",{parentName:"ul"},"Restart both ImSwitch and Jupyter Lab"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Hardware Manager Not Available"),": If managers are not accessible:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Check that ImSwitch loaded the hardware configuration correctly"),(0,r.kt)("li",{parentName:"ul"},"Verify that hardware devices are connected and configured"),(0,r.kt)("li",{parentName:"ul"},"Check the ImSwitch logs for initialization errors")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# Debugging: Check ImSwitch module structure\nprint("Module Main Controllers:")\nif \'moduleMainControllers\' in globals():\n    for name, controller in moduleMainControllers.mapping.items():\n        print(f"  {name}: {type(controller)}")\n        \n        # If it\'s the imcontrol module, show more details\n        if name == \'imcontrol\':\n            master_ctrl = controller._ImConMainController__masterController\n            print(f"    Master Controller: {type(master_ctrl)}")\n            \n            # List all managers\n            for attr_name in dir(master_ctrl):\n                if attr_name.endswith(\'Manager\') and not attr_name.startswith(\'_\'):\n                    manager = getattr(master_ctrl, attr_name)\n                    print(f"    {attr_name}: {type(manager)}")\nelse:\n    print("moduleMainControllers not available")\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# Debugging: Check kernel connection info\nimport json\nimport glob\nimport subprocess\n\n# Find Jupyter runtime directory\ntry:\n    result = subprocess.run([\'jupyter\', \'--runtime-dir\'], \n                          capture_output=True, text=True, check=True)\n    runtime_dir = result.stdout.strip()\n    print(f"Jupyter runtime directory: {runtime_dir}")\n    \n    # List connection files\n    connection_files = glob.glob(f"{runtime_dir}/kernel-*.json")\n    print(f"\\nActive kernel connection files:")\n    for file in connection_files:\n        print(f"  {file}")\n        \n        # Show connection details for latest file\n        if file == max(connection_files, key=lambda x: x):\n            with open(file, \'r\') as f:\n                conn_info = json.load(f)\n                print(f"  Connection info: {conn_info}")\n                \nexcept Exception as e:\n    print(f"Error getting runtime info: {e}")\n')),(0,r.kt)("h2",{id:"9-best-practices-and-safety"},"9. Best Practices and Safety"),(0,r.kt)("h3",{id:"safety-considerations"},"Safety Considerations"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Hardware Safety"),": Always be cautious when controlling hardware remotely:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Start with low power settings for lasers"),(0,r.kt)("li",{parentName:"ul"},"Make small movements for stages/positioners"),(0,r.kt)("li",{parentName:"ul"},"Monitor equipment during remote operations"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Application Control"),": Remember that the kernel integration affects application lifecycle:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"The application cannot be stopped normally with Ctrl+C"),(0,r.kt)("li",{parentName:"ul"},"Plan for proper shutdown procedures"),(0,r.kt)("li",{parentName:"ul"},"Use this feature primarily for development and testing"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Network Security"),": When running in headless mode:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Ensure proper network security"),(0,r.kt)("li",{parentName:"ul"},"Use VPN or secure networks for remote access"),(0,r.kt)("li",{parentName:"ul"},"Consider authentication mechanisms")))),(0,r.kt)("h3",{id:"performance-tips"},"Performance Tips"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Efficient Data Handling"),": For large datasets:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Use numpy arrays for image processing"),(0,r.kt)("li",{parentName:"ul"},"Consider data compression for storage"),(0,r.kt)("li",{parentName:"ul"},"Implement proper memory management"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Responsive Operations"),": To keep the interface responsive:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Use non-blocking operations when possible"),(0,r.kt)("li",{parentName:"ul"},"Implement progress indicators for long operations"),(0,r.kt)("li",{parentName:"ul"},"Consider threading for background tasks")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# Example: Safe hardware operation template\ndef safe_laser_operation(laser_name, target_power, max_power=100):\n    """\n    Safely control laser power with checks and limits.\n    \n    Args:\n        laser_name: Name of the laser to control\n        target_power: Desired power setting\n        max_power: Maximum allowed power for safety\n    """\n    if \'lasersManager\' not in globals():\n        print("Error: Lasers manager not available")\n        return False\n        \n    if laser_name not in lasersManager.getAllDeviceNames():\n        print(f"Error: Laser \'{laser_name}\' not found")\n        return False\n        \n    if target_power > max_power:\n        print(f"Error: Target power {target_power} exceeds maximum {max_power}")\n        return False\n        \n    try:\n        laser = lasersManager[laser_name]\n        current_power = laser.power\n        print(f"Current power: {current_power}")\n        print(f"Setting power to: {target_power}")\n        \n        # Uncomment to actually set power\n        # laser.setPower(target_power)\n        # new_power = laser.power\n        # print(f"New power: {new_power}")\n        \n        return True\n        \n    except Exception as e:\n        print(f"Error controlling laser: {e}")\n        return False\n\n# Example usage (commented for safety)\n# safe_laser_operation(\'Laser_1\', 25, max_power=50)\n')),(0,r.kt)("h2",{id:"10-summary"},"10. Summary"),(0,r.kt)("p",null,"The ImSwitch Jupyter integration using extipy provides powerful capabilities for:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Real-time Hardware Control"),": Direct access to all ImSwitch hardware managers"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Live Data Analysis"),": Process and visualize data as it's acquired"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Interactive Debugging"),": Debug ImSwitch applications in real-time"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Automation Scripts"),": Create complex experimental workflows"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Remote Operation"),": Control equipment from Jupyter notebooks")),(0,r.kt)("h3",{id:"quick-reference-commands"},"Quick Reference Commands"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# 1. Install extipy\npip install git+https://github.com/ebanner/extipy.git\n\n# 2. Start ImSwitch with kernel\npython -m imswitch --with-kernel\n\n# 3. Start Jupyter Lab with extipy provisioner\njupyter lab --KernelProvisionerFactory.default_provisioner_name=extipy-provisioner\n\n# 4. Connect to the running ImSwitch kernel and start experimenting!\n")),(0,r.kt)("p",null,"Remember to always prioritize safety when controlling hardware remotely and be aware that the application lifecycle is affected by the kernel integration."))}c.isMDXComponent=!0}}]);