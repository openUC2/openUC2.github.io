"use strict";(self.webpackChunkuc_2_docs=self.webpackChunkuc_2_docs||[]).push([[7290],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(n),h=i,u=d["".concat(s,".").concat(h)]||d[h]||m[h]||o;return n?a.createElement(u,r(r({ref:t},p),{},{components:n})):a.createElement(u,r({ref:t},p))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,r[1]=l;for(var c=2;c<o;c++)r[c]=n[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},15933:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var a=n(87462),i=(n(67294),n(3905));const o={},r=void 0,l={unversionedId:"ImSwitch/Advanced - for Programmers/ImSwitchInstallUbuntu",id:"ImSwitch/Advanced - for Programmers/ImSwitchInstallUbuntu",title:"ImSwitchInstallUbuntu",description:"ImSwitch Installation Ubuntu",source:"@site/docs/05_ImSwitch/Advanced - for Programmers/ImSwitchInstallUbuntu.md",sourceDirName:"05_ImSwitch/Advanced - for Programmers",slug:"/ImSwitch/Advanced - for Programmers/ImSwitchInstallUbuntu",permalink:"/docs/ImSwitch/Advanced - for Programmers/ImSwitchInstallUbuntu",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Install ImSwitch",permalink:"/docs/ImSwitch/Advanced - for Programmers/ImSwitchInstall"},next:{title:"ImSwitchInstallWindows",permalink:"/docs/ImSwitch/Advanced - for Programmers/ImSwitchInstallWindows"}},s={},c=[{value:"ImSwitch Installation Ubuntu",id:"imswitch-installation-ubuntu",level:3},{value:"Step 1: Install Visual Studio Code (VS Code)",id:"step-1-install-visual-studio-code-vs-code",level:4},{value:"Step 2: Install Miniconda",id:"step-2-install-miniconda",level:4},{value:"Step 3: Clone Necessary Repositories",id:"step-3-clone-necessary-repositories",level:4},{value:"Step 4: Install ImSwitch and Related Packages",id:"step-4-install-imswitch-and-related-packages",level:4},{value:"Step 5: Install Camera Drivers",id:"step-5-install-camera-drivers",level:4},{value:"Step 6: Clone ImSwitch Configuration and Set Permissions",id:"step-6-clone-imswitch-configuration-and-set-permissions",level:4},{value:"New way",id:"new-way",level:2},{value:"Step 3: Running the Microscope with ImSwitch",id:"step-3-running-the-microscope-with-imswitch",level:3}],p={toc:c};function m(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h3",{id:"imswitch-installation-ubuntu"},"ImSwitch Installation Ubuntu"),(0,i.kt)("h4",{id:"step-1-install-visual-studio-code-vs-code"},"Step 1: Install Visual Studio Code (VS Code)"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Open a web browser and navigate to the ",(0,i.kt)("a",{parentName:"li",href:"https://code.visualstudio.com/docs/?dv=linux64_deb"},"VS Code download page"),"."),(0,i.kt)("li",{parentName:"ol"},"Download the Debian package for your 64-bit system."),(0,i.kt)("li",{parentName:"ol"},"Once downloaded, open a terminal window and navigate to the directory where the ",(0,i.kt)("inlineCode",{parentName:"li"},".deb")," file is located."),(0,i.kt)("li",{parentName:"ol"},"Run the following command to install VS Code:",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"sudo dpkg -i <filename>.deb\nsudo apt-get install -f\n")))),(0,i.kt)("h4",{id:"step-2-install-miniconda"},"Step 2: Install Miniconda"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Open a terminal window and run the following command to download Miniconda:",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"wget https://repo.anaconda.com/miniconda/Miniconda3-py310_23.5.2-0-Linux-x86_64.sh\n"))),(0,i.kt)("li",{parentName:"ol"},"Make the script executable and run it:",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"bash Miniconda3-py310_23.5.2-0-Linux-x86_64.sh\n"))),(0,i.kt)("li",{parentName:"ol"},"Follow the on-screen instructions to complete the installation."),(0,i.kt)("li",{parentName:"ol"},"Create a new environment named ",(0,i.kt)("inlineCode",{parentName:"li"},"imswitch")," with Python 3.10:",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"conda create -n imswitch python=3.10 -y\n")))),(0,i.kt)("h4",{id:"step-3-clone-necessary-repositories"},"Step 3: Clone Necessary Repositories"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Navigate to the Downloads directory:",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"cd ~/Downloads\n"))),(0,i.kt)("li",{parentName:"ol"},"Clone the required repositories:",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/openUC2/UC2-REST\ngit clone https://github.com/openUC2/ImSwitch\ngit clone https://gitlab.com/bionanoimaging/nanoimagingpack\n")))),(0,i.kt)("h4",{id:"step-4-install-imswitch-and-related-packages"},"Step 4: Install ImSwitch and Related Packages"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Activate the ",(0,i.kt)("inlineCode",{parentName:"li"},"imswitch")," environment:",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"conda activate imswitch\n"))),(0,i.kt)("li",{parentName:"ol"},"Navigate to the ImSwitch directory and install it:",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"cd ~/Downloads/imswitch\npip install -e .\n"))),(0,i.kt)("li",{parentName:"ol"},"Repeat for UC2-REST and nanoimagingpack:",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"cd ~/Downloads/UC2-REST\npip install -e .\ncd ~/Downloads/nanoimagingpack  # Correcting typo from original logs\npip install -e .\n")))),(0,i.kt)("h4",{id:"step-5-install-camera-drivers"},"Step 5: Install Camera Drivers"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Clone the camera drivers:",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"cd ~/Downloads\ngit clone https://github.com/hongquanli/octopi-research/\n"))),(0,i.kt)("li",{parentName:"ol"},"Navigate to the camera drivers directory and run the installation script:",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"cd octopi-research/software/drivers\\ and\\ libraries/daheng\\ camera/Galaxy_Linux-x86_Gige-U3_32bits-64bits_1.2.1911.9122/\n./Galaxy_camera.run\n")))),(0,i.kt)("h4",{id:"step-6-clone-imswitch-configuration-and-set-permissions"},"Step 6: Clone ImSwitch Configuration and Set Permissions"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Navigate to the Documents directory:",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"cd ~/Documents\n"))),(0,i.kt)("li",{parentName:"ol"},"Clone the ImSwitch configuration:",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/openUC2/ImSwitchConfig\n"))),(0,i.kt)("li",{parentName:"ol"},"Change the ownership of the device:",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"sudo chown pi:pi /dev/ttyUSB0\n")))),(0,i.kt)("h2",{id:"new-way"},"New way"),(0,i.kt)("p",null,"  A more detailed explantion can be found here: ",(0,i.kt)("a",{parentName:"p",href:"https://openuc2.discourse.group/t/imswitch-installation-on-mac-and-windows/37"},"https://openuc2.discourse.group/t/imswitch-installation-on-mac-and-windows/37")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Set up your Python environment")," (using Conda or Mamba):\n",(0,i.kt)("inlineCode",{parentName:"p"},"bash\nmamba create -n imswitchhackathon python=3.9 -y\nmamba activate imswitchhackathon\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Install ImSwitch"),":\n``bash\npip install ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/openUC2/ImSwitch/archive/refs/heads/master.zip"},"https://github.com/openUC2/ImSwitch/archive/refs/heads/master.zip")," # this installs the lastest master"),(0,i.kt)("h1",{parentName:"li",id:"do-the-same-if-you-want-to-update-the-system"},"do the same if you want to update the system"),(0,i.kt)("h1",{parentName:"li",id:"alternative"},"alternative:"),(0,i.kt)("p",{parentName:"li"},"git clone ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/openUC2/ImSwitch/"},"https://github.com/openUC2/ImSwitch/"),"\ncd ImSwitch\npip install -e .\n``")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Optional"),": Install the required dependencies for QT and Napari:\n",(0,i.kt)("inlineCode",{parentName:"p"},"bash\n   pip install pyqtgraph qdarkstyle\n   ")),(0,i.kt)("p",{parentName:"li"},"This setup will allow you to run ImSwitch with full functionality, including graphical user interface (GUI) support for Napari."))),(0,i.kt)("h3",{id:"step-3-running-the-microscope-with-imswitch"},"Step 3: Running the Microscope with ImSwitch"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Launch ImSwitch"),":"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"python -m imswitch\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Select the Configuration"),":\nUpon launch, choose ",(0,i.kt)("strong",{parentName:"p"},'"Virtual Microscope"')," or load your custom configuration file, such as ",(0,i.kt)("inlineCode",{parentName:"p"},"uc2_hik_histo.json"),".")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Control the System"),":\nUse the ImSwitch GUI to move the motorized stage, control the LED-matrix, and capture images. The interface allows you to automate tasks such as focus stacking and digital phase-contrast imaging."))),(0,i.kt)("p",null,"You can also try tthis bash script to download all depenceices and pull the code:\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/openUC2/ImSwitchDockerInstall/blob/master/install_native.sh"},"https://github.com/openUC2/ImSwitchDockerInstall/blob/master/install_native.sh")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},'#!/bin/bash -eu\nsudo apt-get update\nsudo apt-get install -y git curl\n\n# in case they don\'t exist create Download/Desktop folder (e.g. lite)\nmkdir ~/Downloads\nmkdir ~/Desktop\n\n# Set timezone\nexport TZ=America/Los_Angeles\necho "Setting timezone to $TZ"\nsudo ln -snf /usr/share/zoneinfo/"$TZ" /etc/localtime && echo "$TZ" >/etc/timezone\n\n# Update and install necessary dependencies\necho "Updating system and installing dependencies"\nsudo apt-get update && sudo apt-get install -y \\\n    wget \\\n    unzip \\\n    python3 \\\n    python3-pip \\\n    build-essential \\\n    git \\\n    mesa-utils \\\n    openssh-server \\\n    libhdf5-dev \\\n    usbutils\n\n# Clean up apt caches\nsudo apt-get clean\nsudo rm -rf /var/lib/apt/lists/*\n\n# Download and install the appropriate Hik driver\necho "Downloading and installing Hik driver"\ncd /tmp\nwget https://www.hikrobotics.com/cn2/source/support/software/MVS_STD_GML_V2.1.2_231116.zip\nunzip MVS_STD_GML_V2.1.2_231116.zip\n\nARCH=$(uname -m)\nif [ "$ARCH" = "aarch64" ]; then\n    sudo dpkg -i MVS-2.1.2_aarch64_20231116.deb\nelif [ "$ARCH" = "x86_64" ]; then\n    sudo dpkg -i MVS-2.1.2_x86_64_20231116.deb\nfi\n\n# Create necessary directories\necho "Creating directories"\nmkdir -p /opt/MVS/bin/fonts\n\n# Source the bashrc file\necho "Sourcing .bashrc"\nsource ~/.bashrc\n\n# Set environment variable for MVCAM_COMMON_RUNENV\necho "Setting environment variables"\nexport MVCAM_COMMON_RUNENV=/opt/MVS/lib\nexport LD_LIBRARY_PATH=/opt/MVS/lib/64:/opt/MVS/lib/32:$LD_LIBRARY_PATH\n\n# Install Miniforge\necho "Installing Miniforge"\nif [ "$ARCH" = "aarch64" ]; then\n    wget https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Linux-aarch64.sh -O /tmp/miniforge.sh\nelif [ "$ARCH" = "x86_64" ]; then\n    wget https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Linux-x86_64.sh -O /tmp/miniforge.sh\nfi\nsudo bash /tmp/miniforge.sh -b -p /opt/conda\nrm /tmp/miniforge.sh\n\n# Update PATH environment variable\necho "Updating PATH"\nexport PATH=/opt/conda/bin:$PATH\n\n# Create conda environment and install packages\necho "Creating conda environment and installing packages"\nconda create -y --name imswitch311 python=3.11\nconda install -n imswitch311 -y -c conda-forge h5py numcodecs scikit-image\nconda clean --all -f -y\n\n# Clone the config folder\necho "Cloning ImSwitchConfig"\ngit clone https://github.com/openUC2/ImSwitchConfig ~/ImSwitchConfig\n\n# Clone the repository and install dependencies\necho "Cloning and installing imSwitch"\ngit clone https://github.com/openUC2/imSwitch ~/ImSwitch\ncd ~/ImSwitch\ngit checkout master\nsource /opt/conda/bin/activate imswitch311 && pip install -e ~/ImSwitch\n\n# Install UC2-REST\necho "Installing UC2-REST"\ngit clone https://github.com/openUC2/UC2-REST ~/UC2-REST\ncd ~/UC2-REST\nsource /opt/conda/bin/activate imswitch311 && pip install -e ~/UC2-REST\n\n# we want psygnal to be installed without binaries - so first remove it - raspi doesn\'t need this one\n# source /opt/conda/bin/activate imswitch && pip uninstall psygnal -y\n# source /opt/conda/bin/activate imswitch && pip install psygnal --no-binary :all:\n\n# fix the version of OME-ZARR\nsource /opt/conda/bin/activate imswitch311 && pip install ome-zarr==0.9.0\nsource /opt/conda/bin/activate imswitch311 && conda install -c conda-forge --strict-channel-priority numpy scikit-image==0.19.3 -y\n\n# fix numpy\nsource /opt/conda/bin/activate imswitch311 && python3 -m pip install numpy==1.26.4\n\n# Expose SSH port and HTTP port\necho "Exposing ports 22, 8002 and 8001 and 8888"\nsudo ufw allow 22\nsudo ufw allow 8001\nsudo ufw allow 8002\nsudo ufw allow 8888\n\necho "Installation complete. To run the application, use the following command:"\necho "source /opt/conda/bin/activate imswitch311 && python3 ~/ImSwitch/main.py --headless --http-port 8001"\n\necho "source /opt/conda/bin/activate imswitch311" >>~/.bashrc\n')),(0,i.kt)("p",null,"Congratulations! You have successfully installed ImSwitch and related dependencies."))}m.isMDXComponent=!0}}]);