"use strict";(self.webpackChunkuc_2_docs=self.webpackChunkuc_2_docs||[]).push([[9656],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>u});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),c=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},m=function(e){var n=c(e.components);return a.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},p=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),p=c(t),u=r,g=p["".concat(s,".").concat(u)]||p[u]||d[u]||o;return t?a.createElement(g,i(i({ref:n},m),{},{components:t})):a.createElement(g,i({ref:n},m))}));function u(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=p;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var c=2;c<o;c++)i[c]=t[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},71509:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var a=t(87462),r=(t(67294),t(3905));const o={},i="UC2-REST Python Interface",l={unversionedId:"Electronics/Advanced/UC2-REST/README",id:"Electronics/Advanced/UC2-REST/README",title:"UC2-REST Python Interface",description:"Advanced documentation for the UC2-REST Python library, including API reference, integration guides, and custom development.",source:"@site/docs/04_Electronics/10_Advanced/02_UC2-REST/README.md",sourceDirName:"04_Electronics/10_Advanced/02_UC2-REST",slug:"/Electronics/Advanced/UC2-REST/",permalink:"/docs/Electronics/Advanced/UC2-REST/",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"TMC",permalink:"/docs/Electronics/Advanced/UC2-ESP32/APIDescription/TMC"},next:{title:"REST principle",permalink:"/docs/Electronics/Advanced/UC2-REST/uc2e5"}},s={},c=[{value:"Overview",id:"overview",level:2},{value:"Key Features",id:"key-features",level:2},{value:"Available Documentation",id:"available-documentation",level:2},{value:"Getting Started",id:"getting-started",level:3},{value:"Core Documentation",id:"core-documentation",level:3},{value:"Advanced Topics",id:"advanced-topics",level:3},{value:"Quick Reference",id:"quick-reference",level:2},{value:"Basic Connection",id:"basic-connection",level:3},{value:"Hardware Control",id:"hardware-control",level:3},{value:"Architecture",id:"architecture",level:2},{value:"Class Hierarchy",id:"class-hierarchy",level:3},{value:"Communication Flow",id:"communication-flow",level:3},{value:"Device Managers",id:"device-managers",level:2},{value:"LED Manager",id:"led-manager",level:3},{value:"Stage Manager",id:"stage-manager",level:3},{value:"Laser Manager",id:"laser-manager",level:3},{value:"Integration Examples",id:"integration-examples",level:2},{value:"ImSwitch Configuration",id:"imswitch-configuration",level:3},{value:"Custom Device Manager",id:"custom-device-manager",level:3},{value:"Jupyter Notebook Integration",id:"jupyter-notebook-integration",level:3},{value:"Advanced Usage",id:"advanced-usage",level:2},{value:"Error Handling",id:"error-handling",level:3},{value:"Custom Commands",id:"custom-commands",level:3},{value:"Performance Optimization",id:"performance-optimization",level:3},{value:"Custom Protocol Development",id:"custom-protocol-development",level:2},{value:"Protocol Extension",id:"protocol-extension",level:3},{value:"Testing and Validation",id:"testing-and-validation",level:2},{value:"Unit Tests",id:"unit-tests",level:3},{value:"Performance Benchmarks",id:"performance-benchmarks",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues",id:"common-issues",level:3},{value:"Contributing",id:"contributing",level:2},{value:"Development Setup",id:"development-setup",level:3},{value:"Code Style",id:"code-style",level:3},{value:"Testing",id:"testing",level:3},{value:"Related Resources",id:"related-resources",level:2}],m={toc:c};function d(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"uc2-rest-python-interface"},"UC2-REST Python Interface"),(0,r.kt)("p",null,"Advanced documentation for the UC2-REST Python library, including API reference, integration guides, and custom development."),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,"UC2-REST is the Python interface library that provides high-level control of UC2 hardware through the UC2-ESP32 firmware. It serves as the bridge between Python applications (including ImSwitch) and the low-level hardware control."),(0,r.kt)("h2",{id:"key-features"},"Key Features"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Object-Oriented API"),": Intuitive Python interface for hardware control"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Dual Communication"),": USB Serial and WiFi/HTTP support"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Error Handling"),": Robust communication with automatic retry"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"ImSwitch Integration"),": Native support for ImSwitch microscopy software"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Extensible"),": Easy to add custom device managers and protocols")),(0,r.kt)("h2",{id:"available-documentation"},"Available Documentation"),(0,r.kt)("h3",{id:"getting-started"},"Getting Started"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("a",{parentName:"strong",href:"./Installation.md"},"Installation Guide"))," - Install UC2-REST library"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("a",{parentName:"strong",href:"./Quick-Start.md"},"Quick Start"))," - Basic usage examples"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("a",{parentName:"strong",href:"./API-Overview.md"},"API Overview"))," - High-level API introduction")),(0,r.kt)("h3",{id:"core-documentation"},"Core Documentation"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("a",{parentName:"strong",href:"/docs/Electronics/Advanced/UC2-REST/INTRO"},"Communication Introduction"))," - Basic communication concepts"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("a",{parentName:"strong",href:"/docs/Electronics/Advanced/UC2-REST/ESP32_Messaging_Callback"},"ESP32 Messaging"))," - Message handling system"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("a",{parentName:"strong",href:"/docs/Electronics/Advanced/UC2-REST/ESP32_Motor"},"Motor Control"))," - Motor control examples"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("a",{parentName:"strong",href:"/docs/Electronics/Advanced/UC2-REST/uc2e5.1"},"Command Sending"))," - Command interface details")),(0,r.kt)("h3",{id:"advanced-topics"},"Advanced Topics"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("a",{parentName:"strong",href:"./API-Reference.md"},"API Reference"))," - Complete API documentation"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("a",{parentName:"strong",href:"./Integration.md"},"Integration Guide"))," - Integrate with other software"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("a",{parentName:"strong",href:"./Custom-Managers.md"},"Custom Managers"))," - Create custom device managers"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("a",{parentName:"strong",href:"./Protocols.md"},"Protocol Documentation"))," - Communication protocol details")),(0,r.kt)("h2",{id:"quick-reference"},"Quick Reference"),(0,r.kt)("h3",{id:"basic-connection"},"Basic Connection"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from UC2REST import UC2Client\n\n# USB Serial connection\nclient = UC2Client(serialport="/dev/ttyUSB0")\n\n# WiFi connection\nclient = UC2Client(host="192.168.1.100", port=31950)\n\n# Check connection\nif client.is_connected:\n    print("Connected to UC2-ESP32")\n')),(0,r.kt)("h3",{id:"hardware-control"},"Hardware Control"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# LED control\nclient.led.set_led(channel=1, intensity=100)\nclient.led.set_led_array([100, 50, 75, 0])\n\n# Motor control\nclient.stage.move_x(1000)\nclient.stage.move_xyz(x=500, y=500, z=100)\nclient.stage.home_xyz()\n\n# Laser control\nclient.laser.set_laser(channel=1, intensity=50)\nclient.laser.turn_off_all()\n\n# Sensor reading\nsensors = client.sensor.get_sensor_data()\nposition = client.stage.get_position()\n")),(0,r.kt)("h2",{id:"architecture"},"Architecture"),(0,r.kt)("h3",{id:"class-hierarchy"},"Class Hierarchy"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"UC2Client\n\u251c\u2500\u2500 SerialManager (USB communication)\n\u251c\u2500\u2500 HTTPManager (WiFi communication)\n\u251c\u2500\u2500 LEDManager (LED control)\n\u251c\u2500\u2500 StageManager (Motor control)\n\u251c\u2500\u2500 LaserManager (Laser control)\n\u251c\u2500\u2500 SensorManager (Sensor reading)\n\u2514\u2500\u2500 StateManager (System status)\n")),(0,r.kt)("h3",{id:"communication-flow"},"Communication Flow"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Python Application\n      \u2193\n   UC2Client\n      \u2193\nCommunication Manager (Serial/HTTP)\n      \u2193\nJSON Protocol\n      \u2193\nUC2-ESP32 Firmware\n      \u2193\nHardware Components\n")),(0,r.kt)("h2",{id:"device-managers"},"Device Managers"),(0,r.kt)("h3",{id:"led-manager"},"LED Manager"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'class LEDManager:\n    def set_led(self, channel, intensity):\n        """Set individual LED intensity"""\n        \n    def set_led_array(self, intensities):\n        """Set multiple LED intensities"""\n        \n    def get_led_status(self):\n        """Get current LED status"""\n')),(0,r.kt)("h3",{id:"stage-manager"},"Stage Manager"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'class StageManager:\n    def move_x(self, steps):\n        """Move X axis by specified steps"""\n        \n    def move_xyz(self, x=0, y=0, z=0):\n        """Move multiple axes simultaneously"""\n        \n    def set_position(self, x=None, y=None, z=None):\n        """Set absolute position"""\n        \n    def home_xyz(self):\n        """Home all axes"""\n        \n    def get_position(self):\n        """Get current position"""\n')),(0,r.kt)("h3",{id:"laser-manager"},"Laser Manager"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'class LaserManager:\n    def set_laser(self, channel, intensity):\n        """Set laser power"""\n        \n    def turn_off_all(self):\n        """Emergency laser shutdown"""\n        \n    def get_laser_info(self):\n        """Get laser capabilities"""\n')),(0,r.kt)("h2",{id:"integration-examples"},"Integration Examples"),(0,r.kt)("h3",{id:"imswitch-configuration"},"ImSwitch Configuration"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "rs232devices": {\n    "ESP32": {\n      "managerName": "ESP32Manager",\n      "managerProperties": {\n        "serialport": "/dev/ttyUSB0",\n        "host_": "192.168.1.100"\n      }\n    }\n  },\n  "positioners": {\n    "ESP32Stage": {\n      "managerName": "ESP32StageManager",\n      "managerProperties": {\n        "rs232device": "ESP32"\n      },\n      "axes": ["X", "Y", "Z"],\n      "forScanning": true\n    }\n  }\n}\n')),(0,r.kt)("h3",{id:"custom-device-manager"},"Custom Device Manager"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from UC2REST import UC2Client\nfrom imswitch.imcontrol.model.interfaces import DeviceManager\n\nclass CustomUC2Manager(DeviceManager):\n    def __init__(self, deviceInfo, name, **kwargs):\n        super().__init__(deviceInfo, name, **kwargs)\n        \n        # Initialize UC2-REST client\n        self.client = UC2Client(\n            serialport=deviceInfo.managerProperties.get(\'serialport\'),\n            host=deviceInfo.managerProperties.get(\'host\')\n        )\n    \n    def custom_function(self, parameters):\n        """Implement custom functionality"""\n        return self.client.send_command({\n            "task": "/custom_act",\n            "parameters": parameters\n        })\n')),(0,r.kt)("h3",{id:"jupyter-notebook-integration"},"Jupyter Notebook Integration"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# Interactive microscopy control\nimport ipywidgets as widgets\nfrom IPython.display import display\n\ndef create_motor_controls(client):\n    """Create interactive motor controls"""\n    \n    # Movement buttons\n    move_x_plus = widgets.Button(description=\'X+\')\n    move_x_minus = widgets.Button(description=\'X-\')\n    \n    # Step size slider\n    step_size = widgets.IntSlider(value=100, min=10, max=1000)\n    \n    def on_move_x_plus(b):\n        client.stage.move_x(step_size.value)\n    \n    def on_move_x_minus(b):\n        client.stage.move_x(-step_size.value)\n    \n    move_x_plus.on_click(on_move_x_plus)\n    move_x_minus.on_click(on_move_x_minus)\n    \n    return widgets.VBox([\n        step_size,\n        widgets.HBox([move_x_minus, move_x_plus])\n    ])\n\n# Create and display controls\ncontrols = create_motor_controls(client)\ndisplay(controls)\n')),(0,r.kt)("h2",{id:"advanced-usage"},"Advanced Usage"),(0,r.kt)("h3",{id:"error-handling"},"Error Handling"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from UC2REST import UC2RESTError\nimport serial\n\ntry:\n    client = UC2Client(serialport="/dev/ttyUSB0")\n    client.stage.move_x(1000)\n    \nexcept UC2RESTError as e:\n    print(f"UC2-REST error: {e}")\n    \nexcept serial.SerialException as e:\n    print(f"Serial communication error: {e}")\n    \nexcept Exception as e:\n    print(f"Unexpected error: {e}")\n')),(0,r.kt)("h3",{id:"custom-commands"},"Custom Commands"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'def send_custom_command(client, command_data):\n    """Send custom JSON command"""\n    try:\n        response = client.send_command(command_data)\n        \n        if response.get("return") == 1:\n            return response\n        else:\n            raise UC2RESTError(f"Command failed: {response}")\n            \n    except Exception as e:\n        print(f"Communication error: {e}")\n        return None\n\n# Example usage\nresult = send_custom_command(client, {\n    "task": "/custom_task",\n    "parameter1": "value1",\n    "parameter2": 42\n})\n')),(0,r.kt)("h3",{id:"performance-optimization"},"Performance Optimization"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'class OptimizedController:\n    def __init__(self, client):\n        self.client = client\n        self.position_cache = {"x": 0, "y": 0, "z": 0}\n        \n    def move_relative(self, dx=0, dy=0, dz=0):\n        """Move relative with position caching"""\n        # Update cached position\n        self.position_cache["x"] += dx\n        self.position_cache["y"] += dy\n        self.position_cache["z"] += dz\n        \n        # Send movement command\n        self.client.stage.move_xyz(x=dx, y=dy, z=dz)\n    \n    def get_cached_position(self):\n        """Get position from cache (faster than querying hardware)"""\n        return self.position_cache.copy()\n    \n    def sync_position(self):\n        """Synchronize cache with actual hardware position"""\n        actual_pos = self.client.stage.get_position()\n        self.position_cache.update(actual_pos)\n        return actual_pos\n')),(0,r.kt)("h2",{id:"custom-protocol-development"},"Custom Protocol Development"),(0,r.kt)("h3",{id:"protocol-extension"},"Protocol Extension"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'class CustomProtocol:\n    def __init__(self, client):\n        self.client = client\n    \n    def batch_commands(self, commands):\n        """Execute multiple commands efficiently"""\n        batch_command = {\n            "task": "/batch_act",\n            "commands": commands\n        }\n        return self.client.send_command(batch_command)\n    \n    def stream_data(self, duration, interval):\n        """Stream sensor data for specified duration"""\n        stream_command = {\n            "task": "/stream_start",\n            "duration": duration,\n            "interval": interval\n        }\n        \n        # Start streaming\n        response = self.client.send_command(stream_command)\n        \n        if response.get("return") == 1:\n            # Read streamed data\n            data = []\n            for _ in range(int(duration / interval)):\n                reading = self.client.sensor.get_sensor_data()\n                data.append(reading)\n                time.sleep(interval)\n            \n            return data\n        else:\n            raise UC2RESTError("Failed to start data streaming")\n')),(0,r.kt)("h2",{id:"testing-and-validation"},"Testing and Validation"),(0,r.kt)("h3",{id:"unit-tests"},"Unit Tests"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'import unittest\nfrom UC2REST import UC2Client\n\nclass TestUC2REST(unittest.TestCase):\n    def setUp(self):\n        self.client = UC2Client(serialport="/dev/ttyUSB0")\n    \n    def test_connection(self):\n        """Test basic connection"""\n        self.assertTrue(self.client.is_connected)\n    \n    def test_led_control(self):\n        """Test LED control"""\n        # Turn LED on\n        self.client.led.set_led(channel=1, intensity=100)\n        \n        # Turn LED off\n        self.client.led.set_led(channel=1, intensity=0)\n        \n        # Test should not raise exceptions\n        self.assertTrue(True)\n    \n    def test_stage_movement(self):\n        """Test stage movement"""\n        original_pos = self.client.stage.get_position()\n        \n        # Move and return\n        self.client.stage.move_x(100)\n        time.sleep(1)\n        self.client.stage.move_x(-100)\n        time.sleep(1)\n        \n        final_pos = self.client.stage.get_position()\n        \n        # Should return to approximately original position\n        self.assertAlmostEqual(\n            original_pos["x"], final_pos["x"], delta=10\n        )\n\nif __name__ == "__main__":\n    unittest.main()\n')),(0,r.kt)("h3",{id:"performance-benchmarks"},"Performance Benchmarks"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'import time\nimport statistics\n\ndef benchmark_communication_speed(client, n_commands=100):\n    """Benchmark communication speed"""\n    times = []\n    \n    for _ in range(n_commands):\n        start = time.time()\n        client.state.get_state()\n        end = time.time()\n        times.append(end - start)\n    \n    return {\n        "mean": statistics.mean(times),\n        "median": statistics.median(times),\n        "stdev": statistics.stdev(times),\n        "commands_per_second": 1.0 / statistics.mean(times)\n    }\n\n# Run benchmark\nresults = benchmark_communication_speed(client)\nprint(f"Communication speed: {results[\'commands_per_second\']:.1f} commands/sec")\n')),(0,r.kt)("h2",{id:"troubleshooting"},"Troubleshooting"),(0,r.kt)("h3",{id:"common-issues"},"Common Issues"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Connection Problems"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# Check available serial ports\nimport serial.tools.list_ports\nports = serial.tools.list_ports.comports()\nfor port in ports:\n    print(f"{port.device}: {port.description}")\n\n# Test with different parameters\ntry:\n    client = UC2Client(serialport="/dev/ttyUSB0", baudrate=115200, timeout=2.0)\nexcept Exception as e:\n    print(f"Connection failed: {e}")\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Communication Timeouts"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# Increase timeout for slow operations\nclient = UC2Client(serialport="/dev/ttyUSB0", timeout=5.0)\n\n# Implement retry logic\ndef robust_command(client, command_func, max_retries=3):\n    for attempt in range(max_retries):\n        try:\n            return command_func()\n        except Exception as e:\n            if attempt == max_retries - 1:\n                raise e\n            time.sleep(1)\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Debug Mode"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# Enable debug output\nclient = UC2Client(serialport="/dev/ttyUSB0", DEBUG=True)\n\n# All communication will be logged\nclient.stage.move_x(1000)\n# Output: [DEBUG] Sending: {"task": "/motor_act", ...}\n#         [DEBUG] Received: {"return": 1, ...}\n')),(0,r.kt)("h2",{id:"contributing"},"Contributing"),(0,r.kt)("h3",{id:"development-setup"},"Development Setup"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# Clone repository\ngit clone https://github.com/openUC2/UC2-REST\ncd UC2-REST\n\n# Install in development mode\npip install -e .\n\n# Install development dependencies\npip install -r requirements-dev.txt\n")),(0,r.kt)("h3",{id:"code-style"},"Code Style"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Follow PEP 8 style guidelines"),(0,r.kt)("li",{parentName:"ul"},"Use type hints where possible"),(0,r.kt)("li",{parentName:"ul"},"Document all public methods"),(0,r.kt)("li",{parentName:"ul"},"Include docstring examples")),(0,r.kt)("h3",{id:"testing"},"Testing"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# Run unit tests\npython -m pytest tests/\n\n# Run with coverage\npython -m pytest --cov=UC2REST tests/\n\n# Run integration tests (requires hardware)\npython -m pytest tests/integration/\n")),(0,r.kt)("h2",{id:"related-resources"},"Related Resources"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("a",{parentName:"strong",href:"/docs/Electronics/Advanced/UC2-ESP32/"},"UC2-ESP32 Firmware"))," - Firmware documentation"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("a",{parentName:"strong",href:"../../05_ImSwitch/Advanced/02_Usage/UC2-REST.md"},"ImSwitch Integration"))," - ImSwitch usage guide"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("a",{parentName:"strong",href:"/docs/Electronics/Advanced/Hardware-Interfaces/"},"Hardware Interfaces"))," - Hardware components")))}d.isMDXComponent=!0}}]);